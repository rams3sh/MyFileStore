{
  "name": "AcceptReservedInstancesExchangeQuote",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AcceptTransitGatewayVpcAttachment",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-attachment"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AcceptVpcEndpointConnections",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AcceptVpcPeeringConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vpc-peering-connection",
    "vpc"
  ],
  "supportedResources": [
    {
      "Name": "vpc-peering-connection",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc-peering-connection/${VpcPeeringConnectionId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AccepterVpc",
        "ec2:Region",
        "ec2:RequesterVpc",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "ec2:acceptervpc",
        "ec2:requestervpc"
      ],
      "isRequired": true
    },
    {
      "Name": "vpc",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc/${VpcId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdvertiseByoipCidr",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AllocateAddress",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AllocateHosts",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssignIpv6Addresses",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssignPrivateIpAddresses",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateAddress",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateDhcpOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateIamInstanceProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateRouteTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateSubnetCidrBlock",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateTransitGatewayRouteTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-attachment",
    "transit-gateway-route-table"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    },
    {
      "Name": "transit-gateway-route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-route-table/${TransitGatewayRouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateVpcCidrBlock",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AttachClassicLinkVpc",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "security-group",
    "instance",
    "vpc"
  ],
  "supportedResources": [
    {
      "Name": "security-group",
      "ARN": "arn:aws:ec2:${Region}:${Account}:security-group/${SecurityGroupId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    },
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": true
    },
    {
      "Name": "vpc",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc/${VpcId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachInternetGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AttachNetworkInterface",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AttachVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume",
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:ec2:${Region}:${Account}:volume/${VolumeId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:Encrypted",
        "ec2:ParentSnapshot",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:VolumeIops",
        "ec2:VolumeSize",
        "ec2:VolumeType"
      ],
      "ContextKeyStrings": [
        "ec2:volumesize",
        "ec2:resourcetag/${tagkey}",
        "ec2:parentsnapshot",
        "ec2:region",
        "ec2:volumeiops",
        "ec2:volumetype",
        "ec2:availabilityzone",
        "ec2:encrypted"
      ],
      "isRequired": true
    },
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachVpnGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AuthorizeSecurityGroupEgress",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "security-group"
  ],
  "supportedResources": [
    {
      "Name": "security-group",
      "ARN": "arn:aws:ec2:${Region}:${Account}:security-group/${SecurityGroupId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AuthorizeSecurityGroupIngress",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "security-group"
  ],
  "supportedResources": [
    {
      "Name": "security-group",
      "ARN": "arn:aws:ec2:${Region}:${Account}:security-group/${SecurityGroupId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BundleInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelBundleTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelCapacityReservation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "capacity-reservation"
  ],
  "supportedResources": [
    {
      "Name": "capacity-reservation",
      "ARN": "arn:aws:ec2:${Region}:${Account}:capacity-reservation/${CapacityReservationId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelConversionTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelExportTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelImportTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelReservedInstancesListing",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelSpotFleetRequests",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelSpotInstanceRequests",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ConfirmProductInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CopyFpgaImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CopyImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CopySnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCapacityReservation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCustomerGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDefaultSubnet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDefaultVpc",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDhcpOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateEgressOnlyInternetGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateFlowLogs",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateFpgaImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateInstanceExportTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateInternetGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateKeyPair",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLaunchTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLaunchTemplateVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "launch-template"
  ],
  "supportedResources": [
    {
      "Name": "launch-template",
      "ARN": "arn:aws:ec2:${Region}:${Account}:launch-template/${LaunchTemplateId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateNatGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateNetworkAcl",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateNetworkAclEntry",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateNetworkInterface",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateNetworkInterfacePermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "network-interface"
  ],
  "supportedResources": [
    {
      "Name": "network-interface",
      "ARN": "arn:aws:ec2:${Region}:${Account}:network-interface/${NetworkInterfaceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AuthorizedUser",
        "ec2:AvailabilityZone",
        "ec2:Permission",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Subnet",
        "ec2:Vpc",
        "ec2:AuthorizedService"
      ],
      "ContextKeyStrings": [
        "ec2:authorizeduser",
        "ec2:permission",
        "ec2:subnet",
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "ec2:authorizedservice",
        "ec2:availabilityzone"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreatePlacementGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateReservedInstancesListing",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateRoute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "route-table"
  ],
  "supportedResources": [
    {
      "Name": "route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:route-table/${RouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRouteTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSecurityGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot",
    "volume"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:ec2:${Region}::snapshot/${SnapshotId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}",
        "ec2:ParentVolume",
        "ec2:Region"
      ],
      "ContextKeyStrings": [
        "ec2:parentvolume",
        "aws:tagkeys",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    },
    {
      "Name": "volume",
      "ARN": "arn:aws:ec2:${Region}:${Account}:volume/${VolumeId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Encrypted",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:VolumeIops",
        "ec2:VolumeSize",
        "ec2:VolumeType"
      ],
      "ContextKeyStrings": [
        "ec2:volumesize",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "ec2:volumeiops",
        "ec2:volumetype",
        "ec2:encrypted"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSpotDatafeedSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSubnet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "network-interface",
      "ARN": "arn:aws:ec2:${Region}:${Account}:network-interface/${NetworkInterfaceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:AvailabilityZone",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Subnet",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:subnet",
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}",
        "ec2:availabilityzone"
      ],
      "isRequired": false
    },
    {
      "Name": "route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:route-table/${RouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "transit-gateway-route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-route-table/${TransitGatewayRouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "dhcp-options",
      "ARN": "arn:aws:ec2:${Region}:${Account}:dhcp-options/${DhcpOptionsId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "transit-gateway",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway/${TransitGatewayId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "vpc",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc/${VpcId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "network-acl",
      "ARN": "arn:aws:ec2:${Region}:${Account}:network-acl/${NaclId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "aws:tagkeys",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "aws:requesttag/${tagkey}",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": false
    },
    {
      "Name": "image",
      "ARN": "arn:aws:ec2:${Region}::image/${ImageId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:ImageType",
        "ec2:Owner",
        "ec2:Public",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:rootdevicetype",
        "ec2:imagetype",
        "ec2:owner",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}",
        "ec2:public"
      ],
      "isRequired": false
    },
    {
      "Name": "subnet",
      "ARN": "arn:aws:ec2:${Region}:${Account}:subnet/${SubnetId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:AvailabilityZone",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}",
        "ec2:availabilityzone"
      ],
      "isRequired": false
    },
    {
      "Name": "fpga-image",
      "ARN": "arn:aws:ec2:${Region}::fpga-image/${FpgaImageId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Owner",
        "ec2:Public",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:owner",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}",
        "ec2:public"
      ],
      "isRequired": false
    },
    {
      "Name": "internet-gateway",
      "ARN": "arn:aws:ec2:${Region}:${Account}:internet-gateway/${InternetGatewayId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "vpn-connection",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpn-connection/${VpnConnectionId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "security-group",
      "ARN": "arn:aws:ec2:${Region}:${Account}:security-group/${SecurityGroupId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "vpn-gateway",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpn-gateway/${VpnGatewayId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "capacity-reservation",
      "ARN": "arn:aws:ec2:${Region}:${Account}:capacity-reservation/${CapacityReservationId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "snapshot",
      "ARN": "arn:aws:ec2:${Region}::snapshot/${SnapshotId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Owner",
        "ec2:ParentVolume",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:SnapshotTime",
        "ec2:VolumeSize"
      ],
      "ContextKeyStrings": [
        "ec2:parentvolume",
        "aws:tagkeys",
        "ec2:volumesize",
        "ec2:owner",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "ec2:snapshottime",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "reserved-instances",
      "ARN": "arn:aws:ec2:${Region}:${Account}:reserved-instances/${ReservationId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:AvailabilityZone",
        "ec2:InstanceType",
        "ec2:Region",
        "ec2:ReservedInstancesOfferingType",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}",
        "ec2:reservedinstancesofferingtype",
        "ec2:instancetype",
        "ec2:availabilityzone"
      ],
      "isRequired": false
    },
    {
      "Name": "spot-instance-request",
      "ARN": "arn:aws:ec2:${Region}::spot-instance-request/${SpotInstanceRequestId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "volume",
      "ARN": "arn:aws:ec2:${Region}:${Account}:volume/${VolumeId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:AvailabilityZone",
        "ec2:Encrypted",
        "ec2:ParentSnapshot",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:VolumeIops",
        "ec2:VolumeSize",
        "ec2:VolumeType"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:volumesize",
        "ec2:resourcetag/${tagkey}",
        "ec2:parentsnapshot",
        "ec2:region",
        "ec2:volumeiops",
        "aws:requesttag/${tagkey}",
        "ec2:volumetype",
        "ec2:availabilityzone",
        "ec2:encrypted"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ec2:CreateAction",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-policy-structure.html#amazon-ec2-keys",
      "Description": "The name of a resource-creating API action. "
    }
  ]
}
{
  "name": "CreateTransitGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway/${TransitGatewayId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateTransitGatewayRoute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-route-table"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-route-table/${TransitGatewayRouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    },
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateTransitGatewayRouteTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-route-table",
    "transit-gateway"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-route-table/${TransitGatewayRouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    },
    {
      "Name": "transit-gateway",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway/${TransitGatewayId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateTransitGatewayVpcAttachment",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-attachment",
    "vpc",
    "transit-gateway"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    },
    {
      "Name": "vpc",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc/${VpcId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    },
    {
      "Name": "transit-gateway",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway/${TransitGatewayId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    },
    {
      "Name": "subnet",
      "ARN": "arn:aws:ec2:${Region}:${Account}:subnet/${SubnetId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:ec2:${Region}:${Account}:volume/${VolumeId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:AvailabilityZone",
        "ec2:Encrypted",
        "ec2:ParentSnapshot",
        "ec2:Region",
        "ec2:VolumeIops",
        "ec2:VolumeSize",
        "ec2:VolumeType"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:volumesize",
        "ec2:parentsnapshot",
        "ec2:region",
        "ec2:volumeiops",
        "aws:requesttag/${tagkey}",
        "ec2:volumetype",
        "ec2:availabilityzone",
        "ec2:encrypted"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateVpc",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateVpcEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateVpcEndpointConnectionNotification",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateVpcEndpointServiceConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateVpcPeeringConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vpc-peering-connection",
    "vpc"
  ],
  "supportedResources": [
    {
      "Name": "vpc-peering-connection",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc-peering-connection/${VpcPeeringConnectionId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AccepterVpc",
        "ec2:Region",
        "ec2:RequesterVpc"
      ],
      "ContextKeyStrings": [
        "ec2:region",
        "ec2:acceptervpc",
        "ec2:requestervpc"
      ],
      "isRequired": true
    },
    {
      "Name": "vpc",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc/${VpcId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateVpnConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateVpnConnectionRoute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateVpnGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCustomerGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "customer-gateway"
  ],
  "supportedResources": [
    {
      "Name": "customer-gateway",
      "ARN": "arn:aws:ec2:${Region}:${Account}:customer-gateway/${CustomerGatewayId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDhcpOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dhcp-options"
  ],
  "supportedResources": [
    {
      "Name": "dhcp-options",
      "ARN": "arn:aws:ec2:${Region}:${Account}:dhcp-options/${DhcpOptionsId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteEgressOnlyInternetGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteFleets",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteFlowLogs",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteFpgaImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteInternetGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "internet-gateway"
  ],
  "supportedResources": [
    {
      "Name": "internet-gateway",
      "ARN": "arn:aws:ec2:${Region}:${Account}:internet-gateway/${InternetGatewayId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteKeyPair",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteLaunchTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "launch-template"
  ],
  "supportedResources": [
    {
      "Name": "launch-template",
      "ARN": "arn:aws:ec2:${Region}:${Account}:launch-template/${LaunchTemplateId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteLaunchTemplateVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "launch-template"
  ],
  "supportedResources": [
    {
      "Name": "launch-template",
      "ARN": "arn:aws:ec2:${Region}:${Account}:launch-template/${LaunchTemplateId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteNatGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteNetworkAcl",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "network-acl"
  ],
  "supportedResources": [
    {
      "Name": "network-acl",
      "ARN": "arn:aws:ec2:${Region}:${Account}:network-acl/${NaclId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteNetworkAclEntry",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "network-acl"
  ],
  "supportedResources": [
    {
      "Name": "network-acl",
      "ARN": "arn:aws:ec2:${Region}:${Account}:network-acl/${NaclId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteNetworkInterface",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteNetworkInterfacePermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeletePlacementGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteRoute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "route-table"
  ],
  "supportedResources": [
    {
      "Name": "route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:route-table/${RouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRouteTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "route-table"
  ],
  "supportedResources": [
    {
      "Name": "route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:route-table/${RouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSecurityGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "security-group"
  ],
  "supportedResources": [
    {
      "Name": "security-group",
      "ARN": "arn:aws:ec2:${Region}:${Account}:security-group/${SecurityGroupId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:ec2:${Region}::snapshot/${SnapshotId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Owner",
        "ec2:ParentVolume",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:SnapshotTime",
        "ec2:VolumeSize"
      ],
      "ContextKeyStrings": [
        "ec2:parentvolume",
        "ec2:volumesize",
        "ec2:owner",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "ec2:snapshottime"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSpotDatafeedSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteSubnet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:ec2:${Region}::snapshot/${SnapshotId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "volume",
      "ARN": "arn:aws:ec2:${Region}:${Account}:volume/${VolumeId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "transit-gateway-route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-route-table/${TransitGatewayRouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "security-group",
      "ARN": "arn:aws:ec2:${Region}:${Account}:security-group/${SecurityGroupId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "dhcp-options",
      "ARN": "arn:aws:ec2:${Region}:${Account}:dhcp-options/${DhcpOptionsId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "network-acl",
      "ARN": "arn:aws:ec2:${Region}:${Account}:network-acl/${NaclId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "transit-gateway",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway/${TransitGatewayId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "subnet",
      "ARN": "arn:aws:ec2:${Region}:${Account}:subnet/${SubnetId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "image",
      "ARN": "arn:aws:ec2:${Region}::image/${ImageId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "internet-gateway",
      "ARN": "arn:aws:ec2:${Region}:${Account}:internet-gateway/${InternetGatewayId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "vpn-connection",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpn-connection/${VpnConnectionId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "fpga-image",
      "ARN": "arn:aws:ec2:${Region}::fpga-image/${FpgaImageId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:route-table/${RouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "vpn-gateway",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpn-gateway/${VpnGatewayId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "capacity-reservation",
      "ARN": "arn:aws:ec2:${Region}:${Account}:capacity-reservation/${CapacityReservationId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "reserved-instances",
      "ARN": "arn:aws:ec2:${Region}:${Account}:reserved-instances/${ReservationId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "spot-instance-request",
      "ARN": "arn:aws:ec2:${Region}::spot-instance-request/${SpotInstanceRequestId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "network-interface",
      "ARN": "arn:aws:ec2:${Region}:${Account}:network-interface/${NetworkInterfaceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "vpc",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc/${VpcId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTransitGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway/${TransitGatewayId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTransitGatewayRoute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-route-table"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-route-table/${TransitGatewayRouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTransitGatewayRouteTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-route-table"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-route-table/${TransitGatewayRouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTransitGatewayVpcAttachment",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-attachment"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:ec2:${Region}:${Account}:volume/${VolumeId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:Encrypted",
        "ec2:ParentSnapshot",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:VolumeIops",
        "ec2:VolumeSize",
        "ec2:VolumeType"
      ],
      "ContextKeyStrings": [
        "ec2:volumesize",
        "ec2:resourcetag/${tagkey}",
        "ec2:parentsnapshot",
        "ec2:region",
        "ec2:volumeiops",
        "ec2:volumetype",
        "ec2:availabilityzone",
        "ec2:encrypted"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteVpc",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVpcEndpointConnectionNotifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVpcEndpointServiceConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVpcEndpoints",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVpcPeeringConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vpc-peering-connection"
  ],
  "supportedResources": [
    {
      "Name": "vpc-peering-connection",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc-peering-connection/${VpcPeeringConnectionId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AccepterVpc",
        "ec2:Region",
        "ec2:RequesterVpc",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "ec2:acceptervpc",
        "ec2:requestervpc"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteVpnConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVpnConnectionRoute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVpnGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeprovisionByoipCidr",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeregisterImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAccountAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAddresses",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAggregateIdFormat",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAvailabilityZones",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeBundleTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeByoipCidrs",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCapacityReservations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClassicLinkInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConversionTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCustomerGateways",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDhcpOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEgressOnlyInternetGateways",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeElasticGpus",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeExportTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFleetHistory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFleetInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFleets",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFlowLogs",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFpgaImageAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFpgaImages",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeHostReservationOfferings",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeHostReservations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeHosts",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeIamInstanceProfileAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeIdFormat",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeIdentityIdFormat",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeImageAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeImages",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeImportImageTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeImportSnapshotTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInstanceAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInstanceCreditSpecifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInstanceStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInternetGateways",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeKeyPairs",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLaunchTemplateVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLaunchTemplates",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeMovingAddresses",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeNatGateways",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeNetworkAcls",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeNetworkInterfaceAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeNetworkInterfacePermissions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeNetworkInterfaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePlacementGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePrefixLists",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePrincipalIdFormat",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePublicIpv4Pools",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeRegions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservedInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservedInstancesListings",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservedInstancesModifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservedInstancesOfferings",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeRouteTables",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeScheduledInstanceAvailability",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeScheduledInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSecurityGroupReferences",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSecurityGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSnapshotAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSnapshots",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSpotDatafeedSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSpotFleetInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSpotFleetRequestHistory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSpotFleetRequests",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSpotInstanceRequests",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSpotPriceHistory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeStaleSecurityGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSubnets",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTransitGatewayAttachments",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTransitGatewayRouteTables",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTransitGatewayVpcAttachments",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTransitGateways",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVolumeAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVolumeStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVolumes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVolumesModifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpcAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpcClassicLink",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpcClassicLinkDnsSupport",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpcEndpointConnectionNotifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpcEndpointConnections",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpcEndpointServiceConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpcEndpointServicePermissions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpcEndpointServices",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpcEndpoints",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpcPeeringConnections",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpcs",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpnConnections",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVpnGateways",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetachClassicLinkVpc",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance",
    "vpc"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": true
    },
    {
      "Name": "vpc",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc/${VpcId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachInternetGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetachNetworkInterface",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetachVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume",
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:ec2:${Region}:${Account}:volume/${VolumeId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:Encrypted",
        "ec2:ParentSnapshot",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:VolumeIops",
        "ec2:VolumeSize",
        "ec2:VolumeType"
      ],
      "ContextKeyStrings": [
        "ec2:volumesize",
        "ec2:resourcetag/${tagkey}",
        "ec2:parentsnapshot",
        "ec2:region",
        "ec2:volumeiops",
        "ec2:volumetype",
        "ec2:availabilityzone",
        "ec2:encrypted"
      ],
      "isRequired": true
    },
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachVpnGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableTransitGatewayRouteTablePropagation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-attachment",
    "transit-gateway-route-table"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    },
    {
      "Name": "transit-gateway-route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-route-table/${TransitGatewayRouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisableVgwRoutePropagation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableVpcClassicLink",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vpc"
  ],
  "supportedResources": [
    {
      "Name": "vpc",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc/${VpcId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisableVpcClassicLinkDnsSupport",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateAddress",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateIamInstanceProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateRouteTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateSubnetCidrBlock",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateTransitGatewayRouteTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-attachment",
    "transit-gateway-route-table"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    },
    {
      "Name": "transit-gateway-route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-route-table/${TransitGatewayRouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateVpcCidrBlock",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableTransitGatewayRouteTablePropagation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-attachment",
    "transit-gateway-route-table"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    },
    {
      "Name": "transit-gateway-route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-route-table/${TransitGatewayRouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableVgwRoutePropagation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableVolumeIO",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableVpcClassicLink",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vpc"
  ],
  "supportedResources": [
    {
      "Name": "vpc",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc/${VpcId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableVpcClassicLinkDnsSupport",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ExportTransitGatewayRoutes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetConsoleOutput",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetConsoleScreenshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetHostReservationPurchasePreview",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetLaunchTemplateData",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPasswordData",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetReservedInstancesExchangeQuote",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTransitGatewayAttachmentPropagations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTransitGatewayRouteTableAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTransitGatewayRouteTablePropagations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ImportImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ImportInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ImportKeyPair",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ImportSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ImportVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyCapacityReservation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "capacity-reservation"
  ],
  "supportedResources": [
    {
      "Name": "capacity-reservation",
      "ARN": "arn:aws:ec2:${Region}:${Account}:capacity-reservation/${CapacityReservationId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyFpgaImageAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyHosts",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyIdFormat",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyIdentityIdFormat",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyImageAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyInstanceAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyInstanceCapacityReservationAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyInstanceCreditSpecification",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyInstancePlacement",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyLaunchTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "launch-template"
  ],
  "supportedResources": [
    {
      "Name": "launch-template",
      "ARN": "arn:aws:ec2:${Region}:${Account}:launch-template/${LaunchTemplateId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyNetworkInterfaceAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyReservedInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifySnapshotAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:ec2:${Region}::snapshot/${SnapshotId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Owner",
        "ec2:ParentVolume",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:SnapshotTime",
        "ec2:VolumeSize"
      ],
      "ContextKeyStrings": [
        "ec2:parentvolume",
        "ec2:volumesize",
        "ec2:owner",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "ec2:snapshottime"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifySpotFleetRequest",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifySubnetAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyTransitGatewayVpcAttachment",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-attachment"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    },
    {
      "Name": "subnet",
      "ARN": "arn:aws:ec2:${Region}:${Account}:subnet/${SubnetId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyVolumeAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyVpcAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyVpcEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyVpcEndpointConnectionNotification",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyVpcEndpointServiceConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyVpcEndpointServicePermissions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyVpcPeeringConnectionOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyVpcTenancy",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "MonitorInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "MoveAddressToVpc",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ProvisionByoipCidr",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PurchaseHostReservation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PurchaseReservedInstancesOffering",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PurchaseScheduledInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RebootInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RejectTransitGatewayVpcAttachment",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-attachment"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RejectVpcEndpointConnections",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RejectVpcPeeringConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vpc-peering-connection"
  ],
  "supportedResources": [
    {
      "Name": "vpc-peering-connection",
      "ARN": "arn:aws:ec2:${Region}:${Account}:vpc-peering-connection/${VpcPeeringConnectionId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AccepterVpc",
        "ec2:Region",
        "ec2:RequesterVpc",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "ec2:acceptervpc",
        "ec2:requestervpc"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ReleaseAddress",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ReleaseHosts",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ReplaceIamInstanceProfileAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ReplaceNetworkAclAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ReplaceNetworkAclEntry",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ReplaceRoute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "route-table"
  ],
  "supportedResources": [
    {
      "Name": "route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:route-table/${RouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ReplaceRouteTableAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ReplaceTransitGatewayRoute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transit-gateway-route-table"
  ],
  "supportedResources": [
    {
      "Name": "transit-gateway-route-table",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-route-table/${TransitGatewayRouteTableId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    },
    {
      "Name": "transit-gateway-attachment",
      "ARN": "arn:aws:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ReportInstanceStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RequestSpotFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RequestSpotInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResetFpgaImageAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResetImageAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResetInstanceAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResetNetworkInterfaceAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResetSnapshotAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RestoreAddressToClassic",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RevokeSecurityGroupEgress",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "security-group"
  ],
  "supportedResources": [
    {
      "Name": "security-group",
      "ARN": "arn:aws:ec2:${Region}:${Account}:security-group/${SecurityGroupId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RevokeSecurityGroupIngress",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "security-group"
  ],
  "supportedResources": [
    {
      "Name": "security-group",
      "ARN": "arn:aws:ec2:${Region}:${Account}:security-group/${SecurityGroupId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RunInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume",
    "instance",
    "network-interface",
    "image",
    "security-group",
    "subnet"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:ec2:${Region}:${Account}:volume/${VolumeId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:AvailabilityZone",
        "ec2:Encrypted",
        "ec2:IsLaunchTemplateResource",
        "ec2:LaunchTemplate",
        "ec2:ParentSnapshot",
        "ec2:Region",
        "ec2:VolumeIops",
        "ec2:VolumeSize",
        "ec2:VolumeType"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "ec2:volumesize",
        "ec2:parentsnapshot",
        "ec2:region",
        "ec2:volumeiops",
        "aws:requesttag/${tagkey}",
        "ec2:volumetype",
        "ec2:islaunchtemplateresource",
        "ec2:availabilityzone",
        "ec2:encrypted",
        "ec2:launchtemplate"
      ],
      "isRequired": true
    },
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:IsLaunchTemplateResource",
        "ec2:LaunchTemplate",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "aws:tagkeys",
        "ec2:rootdevicetype",
        "ec2:placementgroup",
        "ec2:region",
        "aws:requesttag/${tagkey}",
        "ec2:islaunchtemplateresource",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized",
        "ec2:launchtemplate"
      ],
      "isRequired": true
    },
    {
      "Name": "network-interface",
      "ARN": "arn:aws:ec2:${Region}:${Account}:network-interface/${NetworkInterfaceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:IsLaunchTemplateResource",
        "ec2:LaunchTemplate",
        "ec2:Region",
        "ec2:ResourceTag/",
        "ec2:Subnet",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:subnet",
        "ec2:vpc",
        "ec2:resourcetag/",
        "ec2:region",
        "ec2:islaunchtemplateresource",
        "ec2:availabilityzone",
        "ec2:launchtemplate"
      ],
      "isRequired": true
    },
    {
      "Name": "image",
      "ARN": "arn:aws:ec2:${Region}::image/${ImageId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:ImageType",
        "ec2:IsLaunchTemplateResource",
        "ec2:LaunchTemplate",
        "ec2:Owner",
        "ec2:Public",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType"
      ],
      "ContextKeyStrings": [
        "ec2:rootdevicetype",
        "ec2:imagetype",
        "ec2:owner",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "ec2:islaunchtemplateresource",
        "ec2:public",
        "ec2:launchtemplate"
      ],
      "isRequired": true
    },
    {
      "Name": "security-group",
      "ARN": "arn:aws:ec2:${Region}:${Account}:security-group/${SecurityGroupId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:IsLaunchTemplateResource",
        "ec2:LaunchTemplate",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "ec2:islaunchtemplateresource",
        "ec2:launchtemplate"
      ],
      "isRequired": true
    },
    {
      "Name": "subnet",
      "ARN": "arn:aws:ec2:${Region}:${Account}:subnet/${SubnetId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:IsLaunchTemplateResource",
        "ec2:LaunchTemplate",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "ec2:islaunchtemplateresource",
        "ec2:availabilityzone",
        "ec2:launchtemplate"
      ],
      "isRequired": true
    },
    {
      "Name": "placement-group",
      "ARN": "arn:aws:ec2:${Region}:${Account}:placement-group/${PlacementGroupName}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:IsLaunchTemplateResource",
        "ec2:LaunchTemplate",
        "ec2:PlacementGroupStrategy",
        "ec2:Region"
      ],
      "ContextKeyStrings": [
        "ec2:region",
        "ec2:islaunchtemplateresource",
        "ec2:placementgroupstrategy",
        "ec2:launchtemplate"
      ],
      "isRequired": false
    },
    {
      "Name": "launch-template",
      "ARN": "arn:aws:ec2:${Region}:${Account}:launch-template/${LaunchTemplateId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:IsLaunchTemplateResource",
        "ec2:LaunchTemplate",
        "ec2:Region"
      ],
      "ContextKeyStrings": [
        "ec2:region",
        "ec2:islaunchtemplateresource",
        "ec2:launchtemplate"
      ],
      "isRequired": false
    },
    {
      "Name": "snapshot",
      "ARN": "arn:aws:ec2:${Region}::snapshot/${SnapshotId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:IsLaunchTemplateResource",
        "ec2:LaunchTemplate",
        "ec2:Owner",
        "ec2:ParentVolume",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:SnapshotTime",
        "ec2:VolumeSize"
      ],
      "ContextKeyStrings": [
        "ec2:parentvolume",
        "ec2:volumesize",
        "ec2:owner",
        "ec2:resourcetag/${tagkey}",
        "ec2:region",
        "ec2:snapshottime",
        "ec2:islaunchtemplateresource",
        "ec2:launchtemplate"
      ],
      "isRequired": false
    },
    {
      "Name": "key-pair",
      "ARN": "arn:aws:ec2:${Region}:${Account}:key-pair/${KeyPairName}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:IsLaunchTemplateResource",
        "ec2:LaunchTemplate",
        "ec2:Region"
      ],
      "ContextKeyStrings": [
        "ec2:region",
        "ec2:islaunchtemplateresource",
        "ec2:launchtemplate"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [
    {
      "Name": "EC2-Classic-InstanceStore",
      "RequiredResources": [
        "image",
        "instance",
        "security-group"
      ],
      "OptionalResources": [
        "key-pair",
        "placement-group",
        "snapshot"
      ],
      "Default": false
    },
    {
      "Name": "EC2-Classic-EBS",
      "RequiredResources": [
        "image",
        "instance",
        "security-group",
        "volume"
      ],
      "OptionalResources": [
        "key-pair",
        "placement-group",
        "snapshot"
      ],
      "Default": false
    },
    {
      "Name": "EC2-VPC-InstanceStore",
      "RequiredResources": [
        "image",
        "instance",
        "network-interface",
        "security-group"
      ],
      "OptionalResources": [
        "key-pair",
        "placement-group",
        "snapshot"
      ],
      "Default": false
    },
    {
      "Name": "EC2-VPC-InstanceStore-Subnet",
      "RequiredResources": [
        "image",
        "instance",
        "network-interface",
        "security-group",
        "subnet"
      ],
      "OptionalResources": [
        "key-pair",
        "placement-group",
        "snapshot"
      ],
      "Default": false
    },
    {
      "Name": "EC2-VPC-EBS",
      "RequiredResources": [
        "image",
        "instance",
        "network-interface",
        "security-group",
        "volume"
      ],
      "OptionalResources": [
        "key-pair",
        "placement-group",
        "snapshot"
      ],
      "Default": false
    },
    {
      "Name": "EC2-VPC-EBS-Subnet",
      "RequiredResources": [
        "image",
        "instance",
        "network-interface",
        "security-group",
        "subnet",
        "volume"
      ],
      "OptionalResources": [
        "key-pair",
        "placement-group",
        "snapshot"
      ],
      "Default": true
    }
  ],
  "contextKeys": []
}
{
  "name": "RunScheduledInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchTransitGatewayRoutes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TerminateInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:AvailabilityZone",
        "ec2:EbsOptimized",
        "ec2:InstanceProfile",
        "ec2:InstanceType",
        "ec2:PlacementGroup",
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:RootDeviceType",
        "ec2:Tenancy"
      ],
      "ContextKeyStrings": [
        "ec2:tenancy",
        "ec2:rootdevicetype",
        "ec2:resourcetag/${tagkey}",
        "ec2:placementgroup",
        "ec2:region",
        "ec2:instanceprofile",
        "ec2:instancetype",
        "ec2:availabilityzone",
        "ec2:ebsoptimized"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UnassignIpv6Addresses",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UnassignPrivateIpAddresses",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UnmonitorInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateSecurityGroupRuleDescriptionsEgress",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "security-group"
  ],
  "supportedResources": [
    {
      "Name": "security-group",
      "ARN": "arn:aws:ec2:${Region}:${Account}:security-group/${SecurityGroupId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSecurityGroupRuleDescriptionsIngress",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "security-group"
  ],
  "supportedResources": [
    {
      "Name": "security-group",
      "ARN": "arn:aws:ec2:${Region}:${Account}:security-group/${SecurityGroupId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ec2:Region",
        "ec2:ResourceTag/${TagKey}",
        "ec2:Vpc"
      ],
      "ContextKeyStrings": [
        "ec2:vpc",
        "ec2:resourcetag/${tagkey}",
        "ec2:region"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "WithdrawByoipCidr",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2",
  "service": "Amazon EC2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Login",
  "evaluated": false,
  "allowed": false,
  "prefix": "sumerian",
  "service": "Amazon Sumerian",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ViewRelease",
  "evaluated": false,
  "allowed": false,
  "prefix": "sumerian",
  "service": "Amazon Sumerian",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:sumerian:${Region}:${Account}:project:${ProjectName}",
      "RegEx": "^arn:aws:sumerian:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateConfigurationSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms-voice",
  "service": "Amazon Pinpoint SMS and Voice Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateConfigurationSetEventDestination",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms-voice",
  "service": "Amazon Pinpoint SMS and Voice Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteConfigurationSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms-voice",
  "service": "Amazon Pinpoint SMS and Voice Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteConfigurationSetEventDestination",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms-voice",
  "service": "Amazon Pinpoint SMS and Voice Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetConfigurationSetEventDestinations",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms-voice",
  "service": "Amazon Pinpoint SMS and Voice Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListConfigurationSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms-voice",
  "service": "Amazon Pinpoint SMS and Voice Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendVoiceMessage",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms-voice",
  "service": "Amazon Pinpoint SMS and Voice Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateConfigurationSetEventDestination",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms-voice",
  "service": "Amazon Pinpoint SMS and Voice Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDetectDominantLanguage",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDetectEntities",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDetectKeyPhrases",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDetectSentiment",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDetectSyntax",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDocumentClassifier",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document-classifier"
  ],
  "supportedResources": [
    {
      "Name": "document-classifier",
      "ARN": "arn:aws:comprehend:${Region}:${Account}:document-classifier/${DocumentClassifierName}",
      "RegEx": "^arn:aws:comprehend:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateEntityRecognizer",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "entity-recognizer"
  ],
  "supportedResources": [
    {
      "Name": "entity-recognizer",
      "ARN": "arn:aws:comprehend:${Region}:${Account}:entity-recognizer/${EntityRecognizerName}",
      "RegEx": "^arn:aws:comprehend:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDocumentClassifier",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document-classifier"
  ],
  "supportedResources": [
    {
      "Name": "document-classifier",
      "ARN": "arn:aws:comprehend:${Region}:${Account}:document-classifier/${DocumentClassifierName}",
      "RegEx": "^arn:aws:comprehend:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteEntityRecognizer",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "entity-recognizer"
  ],
  "supportedResources": [
    {
      "Name": "entity-recognizer",
      "ARN": "arn:aws:comprehend:${Region}:${Account}:entity-recognizer/${EntityRecognizerName}",
      "RegEx": "^arn:aws:comprehend:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDocumentClassificationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDocumentClassifier",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document-classifier"
  ],
  "supportedResources": [
    {
      "Name": "document-classifier",
      "ARN": "arn:aws:comprehend:${Region}:${Account}:document-classifier/${DocumentClassifierName}",
      "RegEx": "^arn:aws:comprehend:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDominantLanguageDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEntitiesDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEntityRecognizer",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "entity-recognizer"
  ],
  "supportedResources": [
    {
      "Name": "entity-recognizer",
      "ARN": "arn:aws:comprehend:${Region}:${Account}:entity-recognizer/${EntityRecognizerName}",
      "RegEx": "^arn:aws:comprehend:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeKeyPhrasesDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSentimentDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTopicsDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetectDominantLanguage",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetectEntities",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetectKeyPhrases",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetectSentiment",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetectSyntax",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDocumentClassificationJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDocumentClassifiers",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDominantLanguageDetectionJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListEntitiesDetectionJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListEntityRecognizers",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListKeyPhrasesDetectionJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSentimentDetectionJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTopicsDetectionJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartDocumentClassificationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document-classifier"
  ],
  "supportedResources": [
    {
      "Name": "document-classifier",
      "ARN": "arn:aws:comprehend:${Region}:${Account}:document-classifier/${DocumentClassifierName}",
      "RegEx": "^arn:aws:comprehend:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartDominantLanguageDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartEntitiesDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartKeyPhrasesDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartSentimentDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartTopicsDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopDominantLanguageDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopEntitiesDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopKeyPhrasesDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopSentimentDetectionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopTrainingDocumentClassifier",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document-classifier"
  ],
  "supportedResources": [
    {
      "Name": "document-classifier",
      "ARN": "arn:aws:comprehend:${Region}:${Account}:document-classifier/${DocumentClassifierName}",
      "RegEx": "^arn:aws:comprehend:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopTrainingEntityRecognizer",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehend",
  "service": "Amazon Comprehend",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "entity-recognizer"
  ],
  "supportedResources": [
    {
      "Name": "entity-recognizer",
      "ARN": "arn:aws:comprehend:${Region}:${Account}:entity-recognizer/${EntityRecognizerName}",
      "RegEx": "^arn:aws:comprehend:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetTraces",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSamplingRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteSamplingRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetEncryptionConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSamplingRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSamplingStatisticSummaries",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSamplingTargets",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetServiceGraph",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTraceGraph",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTraceSummaries",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutEncryptionConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutTelemetryRecords",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutTraceSegments",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateSamplingRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "xray",
  "service": "AWS X-Ray",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddPermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topic"
  ],
  "supportedResources": [
    {
      "Name": "topic",
      "ARN": "arn:aws:sns:${Region}:${Account}:${TopicName}",
      "RegEx": "^arn:aws:sns:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CheckIfPhoneNumberIsOptedOut",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ConfirmSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topic"
  ],
  "supportedResources": [
    {
      "Name": "topic",
      "ARN": "arn:aws:sns:${Region}:${Account}:${TopicName}",
      "RegEx": "^arn:aws:sns:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreatePlatformApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePlatformEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTopic",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topic"
  ],
  "supportedResources": [
    {
      "Name": "topic",
      "ARN": "arn:aws:sns:${Region}:${Account}:${TopicName}",
      "RegEx": "^arn:aws:sns:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeletePlatformApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteTopic",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topic"
  ],
  "supportedResources": [
    {
      "Name": "topic",
      "ARN": "arn:aws:sns:${Region}:${Account}:${TopicName}",
      "RegEx": "^arn:aws:sns:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetEndpointAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPlatformApplicationAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSMSAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSubscriptionAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTopicAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topic"
  ],
  "supportedResources": [
    {
      "Name": "topic",
      "ARN": "arn:aws:sns:${Region}:${Account}:${TopicName}",
      "RegEx": "^arn:aws:sns:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListEndpointsByPlatformApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPhoneNumbersOptedOut",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPlatformApplications",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "arn:${Partition}:sns:$region:$account:*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSubscriptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "arn:${Partition}:sns:$region:$account:*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSubscriptionsByTopic",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topic"
  ],
  "supportedResources": [
    {
      "Name": "topic",
      "ARN": "arn:aws:sns:${Region}:${Account}:${TopicName}",
      "RegEx": "^arn:aws:sns:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTopics",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "arn:${Partition}:sns:$region:$account:*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "OptInPhoneNumber",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Publish",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topic"
  ],
  "supportedResources": [
    {
      "Name": "topic",
      "ARN": "arn:aws:sns:${Region}:${Account}:${TopicName}",
      "RegEx": "^arn:aws:sns:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemovePermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topic"
  ],
  "supportedResources": [
    {
      "Name": "topic",
      "ARN": "arn:aws:sns:${Region}:${Account}:${TopicName}",
      "RegEx": "^arn:aws:sns:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetEndpointAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetPlatformApplicationAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetSMSAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetSubscriptionAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetTopicAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topic"
  ],
  "supportedResources": [
    {
      "Name": "topic",
      "ARN": "arn:aws:sns:${Region}:${Account}:${TopicName}",
      "RegEx": "^arn:aws:sns:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "Subscribe",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topic"
  ],
  "supportedResources": [
    {
      "Name": "topic",
      "ARN": "arn:aws:sns:${Region}:${Account}:${TopicName}",
      "RegEx": "^arn:aws:sns:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sns:Protocol",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/sns/latest/dg/UsingIAMwithSNS.html#w2ab1c11c23c19",
      "Description": "The protocol value from a Subscribe request or a previously confirmed subscription."
    },
    {
      "Name": "sns:Endpoint",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/sns/latest/dg/UsingIAMwithSNS.html#w2ab1c11c23c19",
      "Description": "The URL, email address, or ARN from a Subscribe request or a previously confirmed subscription."
    }
  ]
}
{
  "name": "Unsubscribe",
  "evaluated": false,
  "allowed": false,
  "prefix": "sns",
  "service": "Amazon SNS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConsoleJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "groundtruthlabeling",
  "service": "Amazon GroundTruth Labeling",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDatasetObjects",
  "evaluated": false,
  "allowed": false,
  "prefix": "groundtruthlabeling",
  "service": "Amazon GroundTruth Labeling",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RunFilterOrSampleDatasetJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "groundtruthlabeling",
  "service": "Amazon GroundTruth Labeling",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RunGenerateManifestByCrawlingJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "groundtruthlabeling",
  "service": "Amazon GroundTruth Labeling",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddFlowOutputs",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateFlow",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteFlow",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFlow",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GrantFlowEntitlements",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListEntitlements",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListFlows",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveFlowOutput",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RevokeFlowEntitlement",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartFlow",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopFlow",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateFlowEntitlement",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateFlowOutput",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateFlowSource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconnect",
  "service": "AWS Elemental MediaConnect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDescribeSimulationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelSimulationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDeploymentJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateRobot",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateRobotApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateRobotApplicationVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSimulationApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSimulationApplicationVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSimulationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteRobot",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteRobotApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteSimulationApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeregisterRobot",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDeploymentJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeRobot",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeRobotApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSimulationApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSimulationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDeploymentJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListFleets",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRobotApplications",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRobots",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSimulationApplications",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSimulationJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterRobot",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RestartSimulationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SyncDeploymentJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateRobotApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateSimulationApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "robomaker",
  "service": "AWS RoboMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateMemberAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "macie",
  "service": "Amazon Macie",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateS3Resources",
  "evaluated": false,
  "allowed": false,
  "prefix": "macie",
  "service": "Amazon Macie",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateMemberAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "macie",
  "service": "Amazon Macie",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateS3Resources",
  "evaluated": false,
  "allowed": false,
  "prefix": "macie",
  "service": "Amazon Macie",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListMemberAccounts",
  "evaluated": false,
  "allowed": false,
  "prefix": "macie",
  "service": "Amazon Macie",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListS3Resources",
  "evaluated": false,
  "allowed": false,
  "prefix": "macie",
  "service": "Amazon Macie",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateS3Resources",
  "evaluated": false,
  "allowed": false,
  "prefix": "macie",
  "service": "Amazon Macie",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CompareFaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCollection",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "collection"
  ],
  "supportedResources": [
    {
      "Name": "collection",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:collection/${CollectionId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateStreamProcessor",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "collection",
    "streamprocessor"
  ],
  "supportedResources": [
    {
      "Name": "collection",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:collection/${CollectionId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    },
    {
      "Name": "streamprocessor",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:streamprocessor/${StreamprocessorId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteCollection",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "collection"
  ],
  "supportedResources": [
    {
      "Name": "collection",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:collection/${CollectionId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteFaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "collection"
  ],
  "supportedResources": [
    {
      "Name": "collection",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:collection/${CollectionId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteStreamProcessor",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "streamprocessor"
  ],
  "supportedResources": [
    {
      "Name": "streamprocessor",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:streamprocessor/${StreamprocessorId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCollection",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeStreamProcessor",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "streamprocessor"
  ],
  "supportedResources": [
    {
      "Name": "streamprocessor",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:streamprocessor/${StreamprocessorId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetectFaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetectLabels",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetectModerationLabels",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetectText",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCelebrityInfo",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCelebrityRecognition",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetContentModeration",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetFaceDetection",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetFaceSearch",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetLabelDetection",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPersonTracking",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "IndexFaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "collection"
  ],
  "supportedResources": [
    {
      "Name": "collection",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:collection/${CollectionId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListCollections",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "collection"
  ],
  "supportedResources": [
    {
      "Name": "collection",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:collection/${CollectionId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListFaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "collection"
  ],
  "supportedResources": [
    {
      "Name": "collection",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:collection/${CollectionId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListStreamProcessors",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "streamprocessor"
  ],
  "supportedResources": [
    {
      "Name": "streamprocessor",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:streamprocessor/${StreamprocessorId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RecognizeCelebrities",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchFaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "collection"
  ],
  "supportedResources": [
    {
      "Name": "collection",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:collection/${CollectionId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SearchFacesByImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "collection"
  ],
  "supportedResources": [
    {
      "Name": "collection",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:collection/${CollectionId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartCelebrityRecognition",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartContentModeration",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartFaceDetection",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartFaceSearch",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "collection"
  ],
  "supportedResources": [
    {
      "Name": "collection",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:collection/${CollectionId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartLabelDetection",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartPersonTracking",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartStreamProcessor",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "streamprocessor"
  ],
  "supportedResources": [
    {
      "Name": "streamprocessor",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:streamprocessor/${StreamprocessorId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopStreamProcessor",
  "evaluated": false,
  "allowed": false,
  "prefix": "rekognition",
  "service": "Amazon Rekognition",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "streamprocessor"
  ],
  "supportedResources": [
    {
      "Name": "streamprocessor",
      "ARN": "arn:aws:rekognition:${Region}:${Account}:streamprocessor/${StreamprocessorId}",
      "RegEx": "^arn:aws:rekognition:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssumeRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "sts",
  "service": "AWS Security Token Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sts:ExternalId",
      "Type": "String"
    }
  ]
}
{
  "name": "AssumeRoleWithSAML",
  "evaluated": false,
  "allowed": false,
  "prefix": "sts",
  "service": "AWS Security Token Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "saml:edupersonprimaryorgunitdn",
      "Type": "String"
    },
    {
      "Name": "saml:uid",
      "Type": "String"
    },
    {
      "Name": "saml:eduorgidentityauthnpolicyuri",
      "Type": "String"
    },
    {
      "Name": "saml:edupersonaffiliation",
      "Type": "String"
    },
    {
      "Name": "saml:edupersonassurance",
      "Type": "String"
    },
    {
      "Name": "saml:eduorglegalname",
      "Type": "String"
    },
    {
      "Name": "saml:primaryGroupSID",
      "Type": "String"
    },
    {
      "Name": "saml:doc",
      "Type": "String"
    },
    {
      "Name": "saml:namequalifier",
      "Type": "String"
    },
    {
      "Name": "saml:commonName",
      "Type": "String"
    },
    {
      "Name": "saml:aud",
      "Type": "String"
    },
    {
      "Name": "saml:iss",
      "Type": "String"
    },
    {
      "Name": "saml:eduorghomepageuri",
      "Type": "String"
    },
    {
      "Name": "saml:eduorgwhitepagesuri",
      "Type": "String"
    },
    {
      "Name": "saml:name",
      "Type": "String"
    },
    {
      "Name": "saml:eduorgsuperioruri",
      "Type": "String"
    },
    {
      "Name": "saml:edupersonprimaryaffiliation",
      "Type": "String"
    },
    {
      "Name": "saml:mail",
      "Type": "String"
    },
    {
      "Name": "saml:sub",
      "Type": "String"
    },
    {
      "Name": "saml:edupersonorgdn",
      "Type": "String"
    },
    {
      "Name": "saml:edupersonscopedaffiliation",
      "Type": "String"
    },
    {
      "Name": "saml:edupersonprincipalname",
      "Type": "String"
    },
    {
      "Name": "saml:givenName",
      "Type": "String"
    },
    {
      "Name": "saml:edupersonentitlement",
      "Type": "String"
    },
    {
      "Name": "saml:edupersonorgunitdn",
      "Type": "String"
    },
    {
      "Name": "saml:x500UniqueIdentifier",
      "Type": "String"
    },
    {
      "Name": "saml:edupersonnickname",
      "Type": "String"
    },
    {
      "Name": "saml:organizationStatus",
      "Type": "String"
    },
    {
      "Name": "saml:sub_type",
      "Type": "String"
    },
    {
      "Name": "saml:cn",
      "Type": "String"
    },
    {
      "Name": "saml:edupersontargetedid",
      "Type": "String"
    },
    {
      "Name": "saml:surname",
      "Type": "String"
    }
  ]
}
{
  "name": "AssumeRoleWithWebIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "sts",
  "service": "AWS Security Token Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "<web-identity-provider>:aud",
      "Type": "String"
    },
    {
      "Name": "<web-identity-provider>:sub",
      "Type": "String"
    },
    {
      "Name": "aws:FederatedProvider",
      "Type": "String"
    },
    {
      "Name": "<web-identity-provider>:oaud",
      "Type": "String"
    }
  ]
}
{
  "name": "DecodeAuthorizationMessage",
  "evaluated": false,
  "allowed": false,
  "prefix": "sts",
  "service": "AWS Security Token Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCallerIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "sts",
  "service": "AWS Security Token Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetFederationToken",
  "evaluated": false,
  "allowed": false,
  "prefix": "sts",
  "service": "AWS Security Token Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-portal",
  "service": "AWS Billing",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyBilling",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-portal",
  "service": "AWS Billing",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyPaymentMethods",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-portal",
  "service": "AWS Billing",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ViewAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-portal",
  "service": "AWS Billing",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ViewBilling",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-portal",
  "service": "AWS Billing",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ViewPaymentMethods",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-portal",
  "service": "AWS Billing",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ViewUsage",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-portal",
  "service": "AWS Billing",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateDRTLogBucket",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateDRTRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateProtection",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "protection"
  ],
  "supportedResources": [
    {
      "Name": "protection",
      "ARN": "arn:aws:shield::${Account}:protection/${Id}",
      "RegEx": "^arn:aws:shield:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "arn:${Partition}:shield::$account:subscription/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteProtection",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "protection"
  ],
  "supportedResources": [
    {
      "Name": "protection",
      "ARN": "arn:aws:shield::${Account}:protection/${Id}",
      "RegEx": "^arn:aws:shield:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "arn:${Partition}:shield::$account:subscription/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAttack",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "attack"
  ],
  "supportedResources": [
    {
      "Name": "attack",
      "ARN": "arn:aws:shield::${Account}:attack/${Id}",
      "RegEx": "^arn:aws:shield:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDRTAccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEmergencyContactSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeProtection",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "protection"
  ],
  "supportedResources": [
    {
      "Name": "protection",
      "ARN": "arn:aws:shield::${Account}:protection/${Id}",
      "RegEx": "^arn:aws:shield:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "arn:${Partition}:shield::$account:subscription/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateDRTLogBucket",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateDRTRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSubscriptionState",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAttacks",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "arn:${Partition}:shield::$account:attack/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListProtections",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "arn:${Partition}:shield::$account:protection/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateEmergencyContactSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "shield",
  "service": "AWS Shield",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack",
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:appstream:${Region}:${Account}:stack/${StackName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    },
    {
      "Name": "fleet",
      "ARN": "arn:aws:appstream:${Region}:${Account}:fleet/${FleetName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchAssociateUserStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDisassociateUserStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CopyImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "image"
  ],
  "supportedResources": [
    {
      "Name": "image",
      "ARN": "arn:aws:appstream:${Region}:${Account}:image/${ImageName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDirectoryConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:appstream:${Region}:${Account}:fleet/${FleetName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateImageBuilder",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "image-builder"
  ],
  "supportedResources": [
    {
      "Name": "image-builder",
      "ARN": "arn:aws:appstream:${Region}:${Account}:image-builder/${ImageBuilderName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateImageBuilderStreamingURL",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "image-builder"
  ],
  "supportedResources": [
    {
      "Name": "image-builder",
      "ARN": "arn:aws:appstream:${Region}:${Account}:image-builder/${ImageBuilderName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:appstream:${Region}:${Account}:stack/${StackName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateStreamingURL",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack",
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:appstream:${Region}:${Account}:stack/${StackName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    },
    {
      "Name": "fleet",
      "ARN": "arn:aws:appstream:${Region}:${Account}:fleet/${FleetName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDirectoryConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:appstream:${Region}:${Account}:fleet/${FleetName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "image"
  ],
  "supportedResources": [
    {
      "Name": "image",
      "ARN": "arn:aws:appstream:${Region}:${Account}:image/${ImageName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteImageBuilder",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "image-builder"
  ],
  "supportedResources": [
    {
      "Name": "image-builder",
      "ARN": "arn:aws:appstream:${Region}:${Account}:image-builder/${ImageBuilderName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteImagePermissions",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "image"
  ],
  "supportedResources": [
    {
      "Name": "image",
      "ARN": "arn:aws:appstream:${Region}:${Account}:image/${ImageName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:appstream:${Region}:${Account}:stack/${StackName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDirectoryConfigs",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFleets",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:appstream:${Region}:${Account}:fleet/${FleetName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeImageBuilders",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "image-builder",
      "ARN": "arn:aws:appstream:${Region}:${Account}:image-builder/${ImageBuilderName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeImagePermissions",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "image"
  ],
  "supportedResources": [
    {
      "Name": "image",
      "ARN": "arn:aws:appstream:${Region}:${Account}:image/${ImageName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeImages",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "image",
      "ARN": "arn:aws:appstream:${Region}:${Account}:image/${ImageName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeSessions",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeStacks",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:appstream:${Region}:${Account}:stack/${StackName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeUserStackAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack",
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:appstream:${Region}:${Account}:stack/${StackName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    },
    {
      "Name": "fleet",
      "ARN": "arn:aws:appstream:${Region}:${Account}:fleet/${FleetName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ExpireSession",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAssociatedFleets",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:appstream:${Region}:${Account}:stack/${StackName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAssociatedStacks",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:appstream:${Region}:${Account}:fleet/${FleetName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:appstream:${Region}:${Account}:fleet/${FleetName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartImageBuilder",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "image-builder"
  ],
  "supportedResources": [
    {
      "Name": "image-builder",
      "ARN": "arn:aws:appstream:${Region}:${Account}:image-builder/${ImageBuilderName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:appstream:${Region}:${Account}:fleet/${FleetName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopImageBuilder",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "image-builder"
  ],
  "supportedResources": [
    {
      "Name": "image-builder",
      "ARN": "arn:aws:appstream:${Region}:${Account}:image-builder/${ImageBuilderName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "Stream",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:appstream:${Region}:${Account}:stack/${StackName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "appstream:userId",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/appstream2/latest/developerguide/external-identity-providers-setting-up-saml.html#external-identity-providers-embed-inline-policy-for-IAM-role",
      "Description": "Filters access by the ID of the AppStream 2.0 user."
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDirectoryConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:appstream:${Region}:${Account}:fleet/${FleetName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateImagePermissions",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "image"
  ],
  "supportedResources": [
    {
      "Name": "image",
      "ARN": "arn:aws:appstream:${Region}:${Account}:image/${ImageName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "appstream",
  "service": "Amazon AppStream 2.0",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:appstream:${Region}:${Account}:stack/${StackName}",
      "RegEx": "^arn:aws:appstream:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDeliveryStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "firehose",
  "service": "Amazon Kinesis Firehose",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deliverystream"
  ],
  "supportedResources": [
    {
      "Name": "deliverystream",
      "ARN": "arn:aws:firehose:${Region}:${Account}:deliverystream/${DeliveryStreamName}",
      "RegEx": "^arn:aws:firehose:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "Filters create requests based on the presence of mandatory tags in the request"
    },
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "Filters create requests based on the allowed set of values for each of the tags"
    }
  ]
}
{
  "name": "DeleteDeliveryStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "firehose",
  "service": "Amazon Kinesis Firehose",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deliverystream"
  ],
  "supportedResources": [
    {
      "Name": "deliverystream",
      "ARN": "arn:aws:firehose:${Region}:${Account}:deliverystream/${DeliveryStreamName}",
      "RegEx": "^arn:aws:firehose:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "DescribeDeliveryStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "firehose",
  "service": "Amazon Kinesis Firehose",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deliverystream"
  ],
  "supportedResources": [
    {
      "Name": "deliverystream",
      "ARN": "arn:aws:firehose:${Region}:${Account}:deliverystream/${DeliveryStreamName}",
      "RegEx": "^arn:aws:firehose:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "ListDeliveryStreams",
  "evaluated": false,
  "allowed": false,
  "prefix": "firehose",
  "service": "Amazon Kinesis Firehose",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForDeliveryStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "firehose",
  "service": "Amazon Kinesis Firehose",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deliverystream"
  ],
  "supportedResources": [
    {
      "Name": "deliverystream",
      "ARN": "arn:aws:firehose:${Region}:${Account}:deliverystream/${DeliveryStreamName}",
      "RegEx": "^arn:aws:firehose:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "PutRecord",
  "evaluated": false,
  "allowed": false,
  "prefix": "firehose",
  "service": "Amazon Kinesis Firehose",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deliverystream"
  ],
  "supportedResources": [
    {
      "Name": "deliverystream",
      "ARN": "arn:aws:firehose:${Region}:${Account}:deliverystream/${DeliveryStreamName}",
      "RegEx": "^arn:aws:firehose:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "PutRecordBatch",
  "evaluated": false,
  "allowed": false,
  "prefix": "firehose",
  "service": "Amazon Kinesis Firehose",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deliverystream"
  ],
  "supportedResources": [
    {
      "Name": "deliverystream",
      "ARN": "arn:aws:firehose:${Region}:${Account}:deliverystream/${DeliveryStreamName}",
      "RegEx": "^arn:aws:firehose:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "StartDeliveryStreamEncryption",
  "evaluated": false,
  "allowed": false,
  "prefix": "firehose",
  "service": "Amazon Kinesis Firehose",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deliverystream"
  ],
  "supportedResources": [
    {
      "Name": "deliverystream",
      "ARN": "arn:aws:firehose:${Region}:${Account}:deliverystream/${DeliveryStreamName}",
      "RegEx": "^arn:aws:firehose:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "StopDeliveryStreamEncryption",
  "evaluated": false,
  "allowed": false,
  "prefix": "firehose",
  "service": "Amazon Kinesis Firehose",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deliverystream"
  ],
  "supportedResources": [
    {
      "Name": "deliverystream",
      "ARN": "arn:aws:firehose:${Region}:${Account}:deliverystream/${DeliveryStreamName}",
      "RegEx": "^arn:aws:firehose:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "TagDeliveryStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "firehose",
  "service": "Amazon Kinesis Firehose",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deliverystream"
  ],
  "supportedResources": [
    {
      "Name": "deliverystream",
      "ARN": "arn:aws:firehose:${Region}:${Account}:deliverystream/${DeliveryStreamName}",
      "RegEx": "^arn:aws:firehose:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "Filters create requests based on the presence of mandatory tags in the request"
    },
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "Filters create requests based on the allowed set of values for each of the tags"
    }
  ]
}
{
  "name": "UntagDeliveryStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "firehose",
  "service": "Amazon Kinesis Firehose",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deliverystream"
  ],
  "supportedResources": [
    {
      "Name": "deliverystream",
      "ARN": "arn:aws:firehose:${Region}:${Account}:deliverystream/${DeliveryStreamName}",
      "RegEx": "^arn:aws:firehose:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "Filters create requests based on the presence of mandatory tags in the request"
    }
  ]
}
{
  "name": "UpdateDestination",
  "evaluated": false,
  "allowed": false,
  "prefix": "firehose",
  "service": "Amazon Kinesis Firehose",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deliverystream"
  ],
  "supportedResources": [
    {
      "Name": "deliverystream",
      "ARN": "arn:aws:firehose:${Region}:${Account}:deliverystream/${DeliveryStreamName}",
      "RegEx": "^arn:aws:firehose:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "AddListenerCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener"
  ],
  "supportedResources": [
    {
      "Name": "listener",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:listener/${LoadBalancerName}/${LoadBalancerId}/${ListenerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "targetgroup",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:targetgroup/${TargetGroupName}/${TargetGroupId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    },
    {
      "Name": "loadbalancer/app/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    },
    {
      "Name": "loadbalancer/net/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/net/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateListener",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "loadbalancer/app/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    },
    {
      "Name": "loadbalancer/net/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/net/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateLoadBalancer",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "loadbalancer/app/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    },
    {
      "Name": "loadbalancer/net/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/net/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener"
  ],
  "supportedResources": [
    {
      "Name": "listener",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:listener/${LoadBalancerName}/${LoadBalancerId}/${ListenerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateTargetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "targetgroup"
  ],
  "supportedResources": [
    {
      "Name": "targetgroup",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:targetgroup/${TargetGroupName}/${TargetGroupId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteListener",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener"
  ],
  "supportedResources": [
    {
      "Name": "listener",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:listener/${LoadBalancerName}/${LoadBalancerId}/${ListenerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteLoadBalancer",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "loadbalancer/app/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    },
    {
      "Name": "loadbalancer/net/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/net/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener-rule"
  ],
  "supportedResources": [
    {
      "Name": "listener-rule",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:listener-rule/app/${LoadBalancerName}/${LoadBalancerId}/${ListenerId}/${ListenerRuleId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTargetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "targetgroup"
  ],
  "supportedResources": [
    {
      "Name": "targetgroup",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:targetgroup/${TargetGroupName}/${TargetGroupId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterTargets",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "targetgroup"
  ],
  "supportedResources": [
    {
      "Name": "targetgroup",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:targetgroup/${TargetGroupName}/${TargetGroupId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAccountLimits",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeListenerCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeListeners",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLoadBalancerAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLoadBalancers",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSSLPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTargetGroupAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTargetGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTargetHealth",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyListener",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener"
  ],
  "supportedResources": [
    {
      "Name": "listener",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:listener/${LoadBalancerName}/${LoadBalancerId}/${ListenerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyLoadBalancerAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "loadbalancer/app/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    },
    {
      "Name": "loadbalancer/net/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/net/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener-rule"
  ],
  "supportedResources": [
    {
      "Name": "listener-rule",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:listener-rule/app/${LoadBalancerName}/${LoadBalancerId}/${ListenerId}/${ListenerRuleId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyTargetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "targetgroup"
  ],
  "supportedResources": [
    {
      "Name": "targetgroup",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:targetgroup/${TargetGroupName}/${TargetGroupId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyTargetGroupAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "targetgroup"
  ],
  "supportedResources": [
    {
      "Name": "targetgroup",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:targetgroup/${TargetGroupName}/${TargetGroupId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterTargets",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "targetgroup"
  ],
  "supportedResources": [
    {
      "Name": "targetgroup",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:targetgroup/${TargetGroupName}/${TargetGroupId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveListenerCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener"
  ],
  "supportedResources": [
    {
      "Name": "listener",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:listener/${LoadBalancerName}/${LoadBalancerId}/${ListenerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "targetgroup",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:targetgroup/${TargetGroupName}/${TargetGroupId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    },
    {
      "Name": "loadbalancer/app/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    },
    {
      "Name": "loadbalancer/net/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/net/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetIpAddressType",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "loadbalancer/app/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    },
    {
      "Name": "loadbalancer/net/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/net/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetRulePriorities",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener-rule"
  ],
  "supportedResources": [
    {
      "Name": "listener-rule",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:listener-rule/app/${LoadBalancerName}/${LoadBalancerId}/${ListenerId}/${ListenerRuleId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetSecurityGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "loadbalancer/app/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    },
    {
      "Name": "loadbalancer/net/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/net/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetSubnets",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "loadbalancer/app/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    },
    {
      "Name": "loadbalancer/net/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/net/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetWebAcl",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing V2",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateControlChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssmmessages",
  "service": "Amazon Session Manager Message Gateway Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDataChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssmmessages",
  "service": "Amazon Session Manager Message Gateway Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "OpenControlChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssmmessages",
  "service": "Amazon Session Manager Message Gateway Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "OpenDataChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssmmessages",
  "service": "Amazon Session Manager Message Gateway Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateVocabulary",
  "evaluated": false,
  "allowed": false,
  "prefix": "transcribe",
  "service": "Amazon Transcribe",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteTranscriptionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "transcribe",
  "service": "Amazon Transcribe",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVocabulary",
  "evaluated": false,
  "allowed": false,
  "prefix": "transcribe",
  "service": "Amazon Transcribe",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTranscriptionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "transcribe",
  "service": "Amazon Transcribe",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetVocabulary",
  "evaluated": false,
  "allowed": false,
  "prefix": "transcribe",
  "service": "Amazon Transcribe",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTranscriptionJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "transcribe",
  "service": "Amazon Transcribe",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListVocabularies",
  "evaluated": false,
  "allowed": false,
  "prefix": "transcribe",
  "service": "Amazon Transcribe",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartStreamTranscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "transcribe",
  "service": "Amazon Transcribe",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartTranscriptionJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "transcribe",
  "service": "Amazon Transcribe",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateVocabulary",
  "evaluated": false,
  "allowed": false,
  "prefix": "transcribe",
  "service": "Amazon Transcribe",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateBackup",
  "evaluated": false,
  "allowed": false,
  "prefix": "fsx",
  "service": "Amazon FSx",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system",
    "backup"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:fsx:${Region}:${Account}:file-system/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    },
    {
      "Name": "backup",
      "ARN": "arn:aws:fsx:${Region}:${Account}:backup/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String"
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String"
    }
  ]
}
{
  "name": "CreateFileSystem",
  "evaluated": false,
  "allowed": false,
  "prefix": "fsx",
  "service": "Amazon FSx",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:fsx:${Region}:${Account}:file-system/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String"
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String"
    }
  ]
}
{
  "name": "CreateFileSystemFromBackup",
  "evaluated": false,
  "allowed": false,
  "prefix": "fsx",
  "service": "Amazon FSx",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system",
    "backup"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:fsx:${Region}:${Account}:file-system/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    },
    {
      "Name": "backup",
      "ARN": "arn:aws:fsx:${Region}:${Account}:backup/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String"
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String"
    }
  ]
}
{
  "name": "DeleteBackup",
  "evaluated": false,
  "allowed": false,
  "prefix": "fsx",
  "service": "Amazon FSx",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backup"
  ],
  "supportedResources": [
    {
      "Name": "backup",
      "ARN": "arn:aws:fsx:${Region}:${Account}:backup/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteFileSystem",
  "evaluated": false,
  "allowed": false,
  "prefix": "fsx",
  "service": "Amazon FSx",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:fsx:${Region}:${Account}:file-system/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeBackups",
  "evaluated": false,
  "allowed": false,
  "prefix": "fsx",
  "service": "Amazon FSx",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFileSystems",
  "evaluated": false,
  "allowed": false,
  "prefix": "fsx",
  "service": "Amazon FSx",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "fsx",
  "service": "Amazon FSx",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "backup",
      "ARN": "arn:aws:fsx:${Region}:${Account}:backup/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "file-system",
      "ARN": "arn:aws:fsx:${Region}:${Account}:file-system/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "fsx",
  "service": "Amazon FSx",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "backup",
      "ARN": "arn:aws:fsx:${Region}:${Account}:backup/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "file-system",
      "ARN": "arn:aws:fsx:${Region}:${Account}:file-system/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String"
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String"
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "fsx",
  "service": "Amazon FSx",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "backup",
      "ARN": "arn:aws:fsx:${Region}:${Account}:backup/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "file-system",
      "ARN": "arn:aws:fsx:${Region}:${Account}:file-system/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String"
    }
  ]
}
{
  "name": "UpdateFileSystem",
  "evaluated": false,
  "allowed": false,
  "prefix": "fsx",
  "service": "Amazon FSx",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:fsx:${Region}:${Account}:file-system/*",
      "RegEx": "^arn:aws:fsx:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BulkPublish",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDataset",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}/identity/${IdentityId}/dataset/${DatasetName}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDataset",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}/identity/${IdentityId}/dataset/${DatasetName}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeIdentityPoolUsage",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeIdentityUsage",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identity"
  ],
  "supportedResources": [
    {
      "Name": "identity",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}/identity/${IdentityId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBulkPublishDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCognitoEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetIdentityPoolConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDatasets",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}/identity/${IdentityId}/dataset/${DatasetName}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListIdentityPoolUsage",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListRecords",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}/identity/${IdentityId}/dataset/${DatasetName}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "QueryRecords",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identity"
  ],
  "supportedResources": [
    {
      "Name": "identity",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}/identity/${IdentityId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetCognitoEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetDatasetConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}/identity/${IdentityId}/dataset/${DatasetName}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetIdentityPoolConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SubscribeToDataset",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}/identity/${IdentityId}/dataset/${DatasetName}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UnsubscribeFromDataset",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}/identity/${IdentityId}/dataset/${DatasetName}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRecords",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-sync",
  "service": "Amazon Cognito Sync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}/identity/${IdentityId}/dataset/${DatasetName}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AbortDocumentVersionUpload",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ActivateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddResourcePermissions",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddUserToGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CheckAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateFolder",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateNotificationSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeactivateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDocument",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteFolder",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteFolderContents",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteNotificationSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeregisterDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAvailableDirectories",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDocumentVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFolderContents",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeNotificationSubscriptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeResourcePermissions",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDocument",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDocumentPath",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDocumentVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetFolder",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetFolderPath",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "InitiateDocumentVersionUpload",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveAllResourcePermissions",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveResourcePermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveUserFromGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDocument",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDocumentVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateFolder",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateInstanceAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "workdocs",
  "service": "Amazon WorkDocs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AcceptAgreement",
  "evaluated": false,
  "allowed": false,
  "prefix": "artifact",
  "service": "AWS Artifact",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "agreement"
  ],
  "supportedResources": [
    {
      "Name": "agreement",
      "ARN": "arn:aws:artifact:::agreement/*",
      "RegEx": "^arn:aws:artifact:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DownloadAgreement",
  "evaluated": false,
  "allowed": false,
  "prefix": "artifact",
  "service": "AWS Artifact",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "agreement",
      "ARN": "arn:aws:artifact:::agreement/*",
      "RegEx": "^arn:aws:artifact:.+",
      "isRequired": false
    },
    {
      "Name": "customer-agreement",
      "ARN": "arn:aws:artifact::${Account}:customer-agreement/*",
      "RegEx": "^arn:aws:artifact:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "Get",
  "evaluated": false,
  "allowed": false,
  "prefix": "artifact",
  "service": "AWS Artifact",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "report-package"
  ],
  "supportedResources": [
    {
      "Name": "report-package",
      "ARN": "arn:aws:artifact:::report-package/*",
      "RegEx": "^arn:aws:artifact:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TerminateAgreement",
  "evaluated": false,
  "allowed": false,
  "prefix": "artifact",
  "service": "AWS Artifact",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "customer-agreement"
  ],
  "supportedResources": [
    {
      "Name": "customer-agreement",
      "ARN": "arn:aws:artifact::${Account}:customer-agreement/*",
      "RegEx": "^arn:aws:artifact:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "uploadFiles",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace-management",
  "service": "AWS Marketplace Management Portal",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "viewMarketing",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace-management",
  "service": "AWS Marketplace Management Portal",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "viewReports",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace-management",
  "service": "AWS Marketplace Management Portal",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "viewSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace-management",
  "service": "AWS Marketplace Management Portal",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "viewSupport",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace-management",
  "service": "AWS Marketplace Management Portal",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddTagsToResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateHapg",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateHsm",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLunaClient",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteHapg",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteHsm",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteLunaClient",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeBackups",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClusters",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeHapg",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeHsm",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLunaClient",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "InitializeCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAvailableZones",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListHapgs",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListHsms",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLunaClients",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyHapg",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyHsm",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyLunaClient",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveTagsFromResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudhsm",
  "service": "AWS CloudHSM",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateCreatedArtifact",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "migrationTask"
  ],
  "supportedResources": [
    {
      "Name": "migrationTask",
      "ARN": "arn:aws:mgh:${Region}:${Account}:progressUpdateStream/${Stream}/migrationTask/${Task}",
      "RegEx": "^arn:aws:mgh:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateDiscoveredResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "migrationTask"
  ],
  "supportedResources": [
    {
      "Name": "migrationTask",
      "ARN": "arn:aws:mgh:${Region}:${Account}:progressUpdateStream/${Stream}/migrationTask/${Task}",
      "RegEx": "^arn:aws:mgh:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateProgressUpdateStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "progressUpdateStream"
  ],
  "supportedResources": [
    {
      "Name": "progressUpdateStream",
      "ARN": "arn:aws:mgh:${Region}:${Account}:progressUpdateStream/${Stream}",
      "RegEx": "^arn:aws:mgh:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteProgressUpdateStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "progressUpdateStream"
  ],
  "supportedResources": [
    {
      "Name": "progressUpdateStream",
      "ARN": "arn:aws:mgh:${Region}:${Account}:progressUpdateStream/${Stream}",
      "RegEx": "^arn:aws:mgh:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeApplicationState",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeMigrationTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "migrationTask"
  ],
  "supportedResources": [
    {
      "Name": "migrationTask",
      "ARN": "arn:aws:mgh:${Region}:${Account}:progressUpdateStream/${Stream}/migrationTask/${Task}",
      "RegEx": "^arn:aws:mgh:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateCreatedArtifact",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "migrationTask"
  ],
  "supportedResources": [
    {
      "Name": "migrationTask",
      "ARN": "arn:aws:mgh:${Region}:${Account}:progressUpdateStream/${Stream}/migrationTask/${Task}",
      "RegEx": "^arn:aws:mgh:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateDiscoveredResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "migrationTask"
  ],
  "supportedResources": [
    {
      "Name": "migrationTask",
      "ARN": "arn:aws:mgh:${Region}:${Account}:progressUpdateStream/${Stream}/migrationTask/${Task}",
      "RegEx": "^arn:aws:mgh:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ImportMigrationTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "migrationTask"
  ],
  "supportedResources": [
    {
      "Name": "migrationTask",
      "ARN": "arn:aws:mgh:${Region}:${Account}:progressUpdateStream/${Stream}/migrationTask/${Task}",
      "RegEx": "^arn:aws:mgh:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListCreatedArtifacts",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "migrationTask"
  ],
  "supportedResources": [
    {
      "Name": "migrationTask",
      "ARN": "arn:aws:mgh:${Region}:${Account}:progressUpdateStream/${Stream}/migrationTask/${Task}",
      "RegEx": "^arn:aws:mgh:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDiscoveredResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "migrationTask"
  ],
  "supportedResources": [
    {
      "Name": "migrationTask",
      "ARN": "arn:aws:mgh:${Region}:${Account}:progressUpdateStream/${Stream}/migrationTask/${Task}",
      "RegEx": "^arn:aws:mgh:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListMigrationTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListProgressUpdateStreams",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "NotifyApplicationState",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "NotifyMigrationTaskState",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "migrationTask"
  ],
  "supportedResources": [
    {
      "Name": "migrationTask",
      "ARN": "arn:aws:mgh:${Region}:${Account}:progressUpdateStream/${Stream}/migrationTask/${Task}",
      "RegEx": "^arn:aws:mgh:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutResourceAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "mgh",
  "service": "AWS Migration Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "migrationTask"
  ],
  "supportedResources": [
    {
      "Name": "migrationTask",
      "ARN": "arn:aws:mgh:${Region}:${Account}:progressUpdateStream/${Stream}/migrationTask/${Task}",
      "RegEx": "^arn:aws:mgh:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateService",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAccountSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "container-instance"
  ],
  "supportedResources": [
    {
      "Name": "container-instance",
      "ARN": "arn:aws:ecs:${Region}:${Account}:container-instance/${ContainerInstanceId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecs:cluster",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS cluster."
    }
  ]
}
{
  "name": "DeleteCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:ecs:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteService",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeregisterContainerInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:ecs:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterTaskDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClusters",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:ecs:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeContainerInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "container-instance"
  ],
  "supportedResources": [
    {
      "Name": "container-instance",
      "ARN": "arn:aws:ecs:${Region}:${Account}:container-instance/${ContainerInstanceId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecs:cluster",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS cluster."
    }
  ]
}
{
  "name": "DescribeServices",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTaskDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "task"
  ],
  "supportedResources": [
    {
      "Name": "task",
      "ARN": "arn:aws:ecs:${Region}:${Account}:task/${TaskId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecs:cluster",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS cluster."
    }
  ]
}
{
  "name": "DiscoverPollEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAccountSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:ecs:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListClusters",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListContainerInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:ecs:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListServices",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "task",
      "ARN": "arn:aws:ecs:${Region}:${Account}:task/${TaskId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": false
    },
    {
      "Name": "container-instance",
      "ARN": "arn:aws:ecs:${Region}:${Account}:container-instance/${ContainerInstanceId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": false
    },
    {
      "Name": "cluster",
      "ARN": "arn:aws:ecs:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTaskDefinitionFamilies",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTaskDefinitions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "container-instance"
  ],
  "supportedResources": [
    {
      "Name": "container-instance",
      "ARN": "arn:aws:ecs:${Region}:${Account}:container-instance/${ContainerInstanceId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecs:cluster",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS cluster."
    }
  ]
}
{
  "name": "Poll",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "container-instance"
  ],
  "supportedResources": [
    {
      "Name": "container-instance",
      "ARN": "arn:aws:ecs:${Region}:${Account}:container-instance/${ContainerInstanceId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecs:cluster",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS cluster."
    }
  ]
}
{
  "name": "PutAccountSetting",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutAccountSettingDefault",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "container-instance"
  ],
  "supportedResources": [
    {
      "Name": "container-instance",
      "ARN": "arn:aws:ecs:${Region}:${Account}:container-instance/${ContainerInstanceId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecs:cluster",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS cluster."
    }
  ]
}
{
  "name": "RegisterContainerInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:ecs:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterTaskDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RunTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "task-definition"
  ],
  "supportedResources": [
    {
      "Name": "task-definition",
      "ARN": "arn:aws:ecs:${Region}:${Account}:task-definition/${TaskDefinitionFamilyName}:${TaskDefinitionRevisionNumber}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecs:cluster",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS cluster."
    }
  ]
}
{
  "name": "StartTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "task-definition"
  ],
  "supportedResources": [
    {
      "Name": "task-definition",
      "ARN": "arn:aws:ecs:${Region}:${Account}:task-definition/${TaskDefinitionFamilyName}:${TaskDefinitionRevisionNumber}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecs:container-instances",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS container instance."
    },
    {
      "Name": "ecs:cluster",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS cluster."
    }
  ]
}
{
  "name": "StartTelemetrySession",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "container-instance"
  ],
  "supportedResources": [
    {
      "Name": "container-instance",
      "ARN": "arn:aws:ecs:${Region}:${Account}:container-instance/${ContainerInstanceId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecs:cluster",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS cluster."
    }
  ]
}
{
  "name": "StopTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "task"
  ],
  "supportedResources": [
    {
      "Name": "task",
      "ARN": "arn:aws:ecs:${Region}:${Account}:task/${TaskId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecs:cluster",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS cluster."
    }
  ]
}
{
  "name": "SubmitContainerStateChange",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:ecs:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SubmitTaskStateChange",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:ecs:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "task",
      "ARN": "arn:aws:ecs:${Region}:${Account}:task/${TaskId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": false
    },
    {
      "Name": "container-instance",
      "ARN": "arn:aws:ecs:${Region}:${Account}:container-instance/${ContainerInstanceId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": false
    },
    {
      "Name": "cluster",
      "ARN": "arn:aws:ecs:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String"
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String"
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "task",
      "ARN": "arn:aws:ecs:${Region}:${Account}:task/${TaskId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": false
    },
    {
      "Name": "container-instance",
      "ARN": "arn:aws:ecs:${Region}:${Account}:container-instance/${ContainerInstanceId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": false
    },
    {
      "Name": "cluster",
      "ARN": "arn:aws:ecs:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String"
    }
  ]
}
{
  "name": "UpdateContainerAgent",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "container-instance"
  ],
  "supportedResources": [
    {
      "Name": "container-instance",
      "ARN": "arn:aws:ecs:${Region}:${Account}:container-instance/${ContainerInstanceId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecs:cluster",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS cluster."
    }
  ]
}
{
  "name": "UpdateContainerInstancesState",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "container-instance"
  ],
  "supportedResources": [
    {
      "Name": "container-instance",
      "ARN": "arn:aws:ecs:${Region}:${Account}:container-instance/${ContainerInstanceId}",
      "RegEx": "^arn:aws:ecs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecs:cluster",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/iam-policy-structure.html#amazon-ecs-keys",
      "Description": "The ARN of an ECS cluster."
    }
  ]
}
{
  "name": "UpdateService",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecs",
  "service": "Amazon Elastic Container Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CloneReceiptRuleSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateConfigurationSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateConfigurationSetEventDestination",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateConfigurationSetTrackingOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCustomVerificationEmailTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateReceiptFilter",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateReceiptRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateReceiptRuleSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteConfigurationSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteConfigurationSetEventDestination",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteConfigurationSetTrackingOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCustomVerificationEmailTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteIdentityPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteReceiptFilter",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteReceiptRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteReceiptRuleSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVerifiedEmailAddress",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeActiveReceiptRuleSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConfigurationSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReceiptRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReceiptRuleSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAccountSendingEnabled",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCustomVerificationEmailTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetIdentityDkimAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetIdentityMailFromDomainAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetIdentityNotificationAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetIdentityPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetIdentityVerificationAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSendQuota",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSendStatistics",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListConfigurationSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCustomVerificationEmailTemplates",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListIdentities",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListIdentityPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListReceiptFilters",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListReceiptRuleSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTemplates",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListVerifiedEmailAddresses",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutIdentityPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ReorderReceiptRuleSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendBounce",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendBulkTemplatedEmail",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendCustomVerificationEmail",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendEmail",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendRawEmail",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendTemplatedEmail",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetActiveReceiptRuleSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetIdentityDkimEnabled",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetIdentityFeedbackForwardingEnabled",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetIdentityHeadersInNotificationsEnabled",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetIdentityMailFromDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetIdentityNotificationTopic",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetReceiptRulePosition",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TestRenderTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateAccountSendingEnabled",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateConfigurationSetEventDestination",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateConfigurationSetReputationMetricsEnabled",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateConfigurationSetSendingEnabled",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateConfigurationSetTrackingOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateCustomVerificationEmailTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateReceiptRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "VerifyDomainDkim",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "VerifyDomainIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "VerifyEmailAddress",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "VerifyEmailIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "ses",
  "service": "Amazon SES",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateElasticsearchDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteElasticsearchDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteElasticsearchServiceRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeElasticsearchDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeElasticsearchDomainConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeElasticsearchDomains",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeElasticsearchInstanceTypeLimits",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservedElasticsearchInstanceOfferings",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservedElasticsearchInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ESHttpDelete",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ESHttpGet",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ESHttpHead",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ESHttpPost",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ESHttpPut",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCompatibleElasticsearchVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetUpgradeHistory",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetUpgradeStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDomainNames",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListElasticsearchInstanceTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListElasticsearchVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PurchaseReservedElasticsearchInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateElasticsearchDomainConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpgradeElasticsearchDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "es",
  "service": "Amazon Elasticsearch Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:es:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:es:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "resource-groups",
  "service": "AWS Resource Groups",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "resource-groups",
  "service": "AWS Resource Groups",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "resource-groups",
  "service": "AWS Resource Groups",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGroupQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "resource-groups",
  "service": "AWS Resource Groups",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "resource-groups",
  "service": "AWS Resource Groups",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGroupResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "resource-groups",
  "service": "AWS Resource Groups",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "resource-groups",
  "service": "AWS Resource Groups",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "resource-groups",
  "service": "AWS Resource Groups",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Tag",
  "evaluated": false,
  "allowed": false,
  "prefix": "resource-groups",
  "service": "AWS Resource Groups",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Untag",
  "evaluated": false,
  "allowed": false,
  "prefix": "resource-groups",
  "service": "AWS Resource Groups",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "resource-groups",
  "service": "AWS Resource Groups",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateGroupQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "resource-groups",
  "service": "AWS Resource Groups",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddAttributesToFindings",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateAssessmentTarget",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateAssessmentTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateResourceGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAssessmentRun",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAssessmentTarget",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAssessmentTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAssessmentRuns",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAssessmentTargets",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAssessmentTemplates",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCrossAccountAccessRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFindings",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeResourceGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeRulesPackages",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTelemetryMetadata",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAssessmentRunAgents",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAssessmentRuns",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAssessmentTargets",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAssessmentTemplates",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListEventSubscriptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListFindings",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRulesPackages",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PreviewAgents",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterCrossAccountAccessRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveAttributesFromFindings",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartAssessmentRun",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopAssessmentRun",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SubscribeToEvent",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UnsubscribeFromEvent",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateAssessmentTarget",
  "evaluated": false,
  "allowed": false,
  "prefix": "inspector",
  "service": "Amazon Inspector",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AllocateStaticIp",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "StaticIp"
  ],
  "supportedResources": [
    {
      "Name": "StaticIp",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:StaticIp/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachStaticIp",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "StaticIp",
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "StaticIp",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:StaticIp/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    },
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CloseInstancePublicPorts",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Domain"
  ],
  "supportedResources": [
    {
      "Name": "Domain",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Domain/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDomainEntry",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Domain"
  ],
  "supportedResources": [
    {
      "Name": "Domain",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Domain/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateInstanceSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "InstanceSnapshot",
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "InstanceSnapshot",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:InstanceSnapshot/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    },
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "KeyPair"
  ],
  "supportedResources": [
    {
      "Name": "KeyPair",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:KeyPair/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateInstancesFromSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "InstanceSnapshot",
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "InstanceSnapshot",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:InstanceSnapshot/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    },
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateKeyPair",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "KeyPair"
  ],
  "supportedResources": [
    {
      "Name": "KeyPair",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:KeyPair/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Domain"
  ],
  "supportedResources": [
    {
      "Name": "Domain",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Domain/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDomainEntry",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Domain"
  ],
  "supportedResources": [
    {
      "Name": "Domain",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Domain/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteInstanceSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "InstanceSnapshot"
  ],
  "supportedResources": [
    {
      "Name": "InstanceSnapshot",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:InstanceSnapshot/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteKeyPair",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "KeyPair"
  ],
  "supportedResources": [
    {
      "Name": "KeyPair",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:KeyPair/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachStaticIp",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "StaticIp",
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "StaticIp",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:StaticIp/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    },
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DownloadDefaultKeyPair",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "KeyPair"
  ],
  "supportedResources": [
    {
      "Name": "KeyPair",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:KeyPair/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetActiveNames",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBlueprints",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBundles",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Domain"
  ],
  "supportedResources": [
    {
      "Name": "Domain",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Domain/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDomains",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Domain"
  ],
  "supportedResources": [
    {
      "Name": "Domain",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Domain/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInstanceAccessDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInstanceMetricData",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInstancePortStates",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInstanceSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "InstanceSnapshot"
  ],
  "supportedResources": [
    {
      "Name": "InstanceSnapshot",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:InstanceSnapshot/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInstanceSnapshots",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "InstanceSnapshot"
  ],
  "supportedResources": [
    {
      "Name": "InstanceSnapshot",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:InstanceSnapshot/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInstanceState",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetKeyPair",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "KeyPair"
  ],
  "supportedResources": [
    {
      "Name": "KeyPair",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:KeyPair/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetKeyPairs",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "KeyPair"
  ],
  "supportedResources": [
    {
      "Name": "KeyPair",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:KeyPair/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetOperation",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetOperations",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetOperationsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "Domain",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Domain/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": false
    },
    {
      "Name": "StaticIp",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:StaticIp/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": false
    },
    {
      "Name": "InstanceSnapshot",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:InstanceSnapshot/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": false
    },
    {
      "Name": "KeyPair",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:KeyPair/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": false
    },
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRegions",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetStaticIp",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "StaticIp"
  ],
  "supportedResources": [
    {
      "Name": "StaticIp",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:StaticIp/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetStaticIps",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "StaticIp"
  ],
  "supportedResources": [
    {
      "Name": "StaticIp",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:StaticIp/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ImportKeyPair",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "KeyPair"
  ],
  "supportedResources": [
    {
      "Name": "KeyPair",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:KeyPair/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "IsVpcPeered",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "OpenInstancePublicPorts",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PeerVpc",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RebootInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ReleaseStaticIp",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "StaticIp"
  ],
  "supportedResources": [
    {
      "Name": "StaticIp",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:StaticIp/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Instance"
  ],
  "supportedResources": [
    {
      "Name": "Instance",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Instance/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UnpeerVpc",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDomainEntry",
  "evaluated": false,
  "allowed": false,
  "prefix": "lightsail",
  "service": "Amazon Lightsail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Domain"
  ],
  "supportedResources": [
    {
      "Name": "Domain",
      "ARN": "arn:aws:lightsail:${Region}:${Account}:Domain/${Id}",
      "RegEx": "arn:aws:lightsail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteScalingPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "application-autoscaling",
  "service": "Application Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteScheduledAction",
  "evaluated": false,
  "allowed": false,
  "prefix": "application-autoscaling",
  "service": "Application Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeregisterScalableTarget",
  "evaluated": false,
  "allowed": false,
  "prefix": "application-autoscaling",
  "service": "Application Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeScalableTargets",
  "evaluated": false,
  "allowed": false,
  "prefix": "application-autoscaling",
  "service": "Application Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeScalingActivities",
  "evaluated": false,
  "allowed": false,
  "prefix": "application-autoscaling",
  "service": "Application Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeScalingPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "application-autoscaling",
  "service": "Application Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeScheduledActions",
  "evaluated": false,
  "allowed": false,
  "prefix": "application-autoscaling",
  "service": "Application Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutScalingPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "application-autoscaling",
  "service": "Application Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutScheduledAction",
  "evaluated": false,
  "allowed": false,
  "prefix": "application-autoscaling",
  "service": "Application Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterScalableTarget",
  "evaluated": false,
  "allowed": false,
  "prefix": "application-autoscaling",
  "service": "Application Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchPutMessage",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "channel"
  ],
  "supportedResources": [
    {
      "Name": "channel",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:channel/${ChannelName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "CancelPipelineReprocessing",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:pipeline/${PipelineName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "CreateChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "channel"
  ],
  "supportedResources": [
    {
      "Name": "channel",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:channel/${ChannelName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the IoT Analytics resource in the request."
    },
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "A tag key that is present in the request that the user makes to IoT Analytics."
    }
  ]
}
{
  "name": "CreateDataset",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:dataset/${DatasetName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the IoT Analytics resource in the request."
    },
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "A tag key that is present in the request that the user makes to IoT Analytics."
    }
  ]
}
{
  "name": "CreateDatasetContent",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:dataset/${DatasetName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "CreateDatastore",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "datastore"
  ],
  "supportedResources": [
    {
      "Name": "datastore",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:datastore/${DatastoreName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the IoT Analytics resource in the request."
    },
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "A tag key that is present in the request that the user makes to IoT Analytics."
    }
  ]
}
{
  "name": "CreatePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:pipeline/${PipelineName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the IoT Analytics resource in the request."
    },
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "A tag key that is present in the request that the user makes to IoT Analytics."
    }
  ]
}
{
  "name": "DeleteChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "channel"
  ],
  "supportedResources": [
    {
      "Name": "channel",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:channel/${ChannelName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "DeleteDataset",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:dataset/${DatasetName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "DeleteDatasetContent",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:dataset/${DatasetName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "DeleteDatastore",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "datastore"
  ],
  "supportedResources": [
    {
      "Name": "datastore",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:datastore/${DatastoreName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "DeletePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:pipeline/${PipelineName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "DescribeChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "channel"
  ],
  "supportedResources": [
    {
      "Name": "channel",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:channel/${ChannelName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "DescribeDataset",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:dataset/${DatasetName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "DescribeDatastore",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "datastore"
  ],
  "supportedResources": [
    {
      "Name": "datastore",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:datastore/${DatastoreName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "DescribeLoggingOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:pipeline/${PipelineName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "GetDatasetContent",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:dataset/${DatasetName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "ListChannels",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDatasets",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDatastores",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPipelines",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "datastore",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:datastore/${DatastoreName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "pipeline",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:pipeline/${PipelineName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "channel",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:channel/${ChannelName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "dataset",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:dataset/${DatasetName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "PutLoggingOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RunPipelineActivity",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SampleChannelData",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "channel"
  ],
  "supportedResources": [
    {
      "Name": "channel",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:channel/${ChannelName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "StartPipelineReprocessing",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:pipeline/${PipelineName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "datastore",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:datastore/${DatastoreName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "pipeline",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:pipeline/${PipelineName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "channel",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:channel/${ChannelName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "dataset",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:dataset/${DatasetName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the IoT Analytics resource in the request."
    },
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "A tag key that is present in the request that the user makes to IoT Analytics."
    },
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "datastore",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:datastore/${DatastoreName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "pipeline",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:pipeline/${PipelineName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "channel",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:channel/${ChannelName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "dataset",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:dataset/${DatasetName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the IoT Analytics resource in the request."
    },
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "A tag key that is present in the request that the user makes to IoT Analytics."
    },
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "UpdateChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "channel"
  ],
  "supportedResources": [
    {
      "Name": "channel",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:channel/${ChannelName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "UpdateDataset",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dataset"
  ],
  "supportedResources": [
    {
      "Name": "dataset",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:dataset/${DatasetName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "UpdateDatastore",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "datastore"
  ],
  "supportedResources": [
    {
      "Name": "datastore",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:datastore/${DatastoreName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "UpdatePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotanalytics",
  "service": "AWS IoT Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:iotanalytics:${Region}:${Account}:pipeline/${PipelineName}",
      "RegEx": "^arn:aws:iotanalytics:.+",
      "ContextKeys": [
        "aws:RequestTag/${TagKey}",
        "aws:TagKeys",
        "iotanalytics:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "iotanalytics:resourcetag/${tagkey}",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotanalytics:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "The preface string for a tag key and value pair attached to an IoT Analytics resource."
    }
  ]
}
{
  "name": "AuthenticatePackager",
  "evaluated": false,
  "allowed": false,
  "prefix": "wam",
  "service": "Amazon WorkSpaces Application Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Connect",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastic-inference",
  "service": "Amazon Elastic Inference",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "accelerator"
  ],
  "supportedResources": [
    {
      "Name": "accelerator",
      "ARN": "arn:aws:elastic-inference:${Region}:${Account}:elastic-inference-accelerator/${AcceleratorId}",
      "RegEx": "^arn:aws:elastic-inference:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateOriginEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteOriginEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeOriginEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListChannels",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListOriginEndpoints",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RotateIngestEndpointCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateOriginEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediapackage",
  "service": "AWS Elemental MediaPackage",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "importexport",
  "service": "AWS Import Export Disk Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "importexport",
  "service": "AWS Import Export Disk Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetShippingLabel",
  "evaluated": false,
  "allowed": false,
  "prefix": "importexport",
  "service": "AWS Import Export Disk Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "importexport",
  "service": "AWS Import Export Disk Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "importexport",
  "service": "AWS Import Export Disk Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "importexport",
  "service": "AWS Import Export Disk Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLicenseConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteLicenseConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "license-configuration"
  ],
  "supportedResources": [
    {
      "Name": "license-configuration",
      "ARN": "arn:aws:license-manager:${Region}:${Account}:license-configuration/${LicenseConfigurationId}",
      "RegEx": "^arn:aws:license-manager:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetLicenseConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "license-configuration"
  ],
  "supportedResources": [
    {
      "Name": "license-configuration",
      "ARN": "arn:aws:license-manager:${Region}:${Account}:license-configuration/${LicenseConfigurationId}",
      "RegEx": "^arn:aws:license-manager:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetServiceSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAssociationsForLicenseConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "license-configuration"
  ],
  "supportedResources": [
    {
      "Name": "license-configuration",
      "ARN": "arn:aws:license-manager:${Region}:${Account}:license-configuration/${LicenseConfigurationId}",
      "RegEx": "^arn:aws:license-manager:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListLicenseConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLicenseSpecificationsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListResourceInventory",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "license-configuration"
  ],
  "supportedResources": [
    {
      "Name": "license-configuration",
      "ARN": "arn:aws:license-manager:${Region}:${Account}:license-configuration/${LicenseConfigurationId}",
      "RegEx": "^arn:aws:license-manager:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListUsageForLicenseConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "license-configuration"
  ],
  "supportedResources": [
    {
      "Name": "license-configuration",
      "ARN": "arn:aws:license-manager:${Region}:${Account}:license-configuration/${LicenseConfigurationId}",
      "RegEx": "^arn:aws:license-manager:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "license-configuration"
  ],
  "supportedResources": [
    {
      "Name": "license-configuration",
      "ARN": "arn:aws:license-manager:${Region}:${Account}:license-configuration/${LicenseConfigurationId}",
      "RegEx": "^arn:aws:license-manager:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "license-configuration"
  ],
  "supportedResources": [
    {
      "Name": "license-configuration",
      "ARN": "arn:aws:license-manager:${Region}:${Account}:license-configuration/${LicenseConfigurationId}",
      "RegEx": "^arn:aws:license-manager:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateLicenseConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "license-configuration"
  ],
  "supportedResources": [
    {
      "Name": "license-configuration",
      "ARN": "arn:aws:license-manager:${Region}:${Account}:license-configuration/${LicenseConfigurationId}",
      "RegEx": "^arn:aws:license-manager:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateLicenseSpecificationsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "license-configuration"
  ],
  "supportedResources": [
    {
      "Name": "license-configuration",
      "ARN": "arn:aws:license-manager:${Region}:${Account}:license-configuration/${LicenseConfigurationId}",
      "RegEx": "^arn:aws:license-manager:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateServiceSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "license-manager",
  "service": "AWS License Manager",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddClientIDToOpenIDConnectProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "oidc-provider"
  ],
  "supportedResources": [
    {
      "Name": "oidc-provider",
      "ARN": "arn:aws:iam::${Account}:oidc-provider/${OidcProviderName}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddRoleToInstanceProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance-profile"
  ],
  "supportedResources": [
    {
      "Name": "instance-profile",
      "ARN": "arn:aws:iam::${Account}:instance-profile/${InstanceProfileNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddUserToGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachGroupPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PolicyARN",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PolicyARN",
      "Description": "Filters access by the ARN of an IAM policy"
    }
  ]
}
{
  "name": "AttachRolePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PolicyARN",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PolicyARN",
      "Description": "Filters access by the ARN of an IAM policy"
    },
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "AttachUserPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PolicyARN",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PolicyARN",
      "Description": "Filters access by the ARN of an IAM policy"
    },
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "ChangePassword",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateAccessKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateAccountAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateInstanceProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance-profile"
  ],
  "supportedResources": [
    {
      "Name": "instance-profile",
      "ARN": "arn:aws:iam::${Account}:instance-profile/${InstanceProfileNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateLoginProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateOpenIDConnectProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "oidc-provider"
  ],
  "supportedResources": [
    {
      "Name": "oidc-provider",
      "ARN": "arn:aws:iam::${Account}:oidc-provider/${OidcProviderName}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreatePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iam::${Account}:policy/${PolicyNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreatePolicyVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iam::${Account}:policy/${PolicyNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "CreateSAMLProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "saml-provider"
  ],
  "supportedResources": [
    {
      "Name": "saml-provider",
      "ARN": "arn:aws:iam::${Account}:saml-provider/${SamlProviderName}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateServiceLinkedRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:AWSServiceName",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_AWSServiceName",
      "Description": "Filters access by the AWS service to which this role is attached"
    }
  ]
}
{
  "name": "CreateServiceSpecificCredential",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "CreateVirtualMFADevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "mfa"
  ],
  "supportedResources": [
    {
      "Name": "mfa",
      "ARN": "arn:aws:iam::${Account}:mfa/${Path}/${MfaTokenId}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeactivateMFADevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteAccessKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteAccountAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAccountPasswordPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteGroupPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteInstanceProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance-profile"
  ],
  "supportedResources": [
    {
      "Name": "instance-profile",
      "ARN": "arn:aws:iam::${Account}:instance-profile/${InstanceProfileNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteLoginProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteOpenIDConnectProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "oidc-provider"
  ],
  "supportedResources": [
    {
      "Name": "oidc-provider",
      "ARN": "arn:aws:iam::${Account}:oidc-provider/${OidcProviderName}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iam::${Account}:policy/${PolicyNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePolicyVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iam::${Account}:policy/${PolicyNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRolePermissionsBoundary",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "DeleteRolePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "DeleteSAMLProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "saml-provider"
  ],
  "supportedResources": [
    {
      "Name": "saml-provider",
      "ARN": "arn:aws:iam::${Account}:saml-provider/${SamlProviderName}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSSHPublicKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteServerCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "server-certificate"
  ],
  "supportedResources": [
    {
      "Name": "server-certificate",
      "ARN": "arn:aws:iam::${Account}:server-certificate/${CertificateNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteServiceLinkedRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteServiceSpecificCredential",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSigningCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUserPermissionsBoundary",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "DeleteUserPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "DeleteVirtualMFADevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "mfa",
      "ARN": "arn:aws:iam::${Account}:mfa/${Path}/${MfaTokenId}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": false
    },
    {
      "Name": "sms-mfa",
      "ARN": "arn:aws:iam::${Account}:sms-mfa/${MfaTokenIdWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachGroupPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PolicyARN",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PolicyARN",
      "Description": "Filters access by the ARN of an IAM policy"
    }
  ]
}
{
  "name": "DetachRolePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PolicyARN",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PolicyARN",
      "Description": "Filters access by the ARN of an IAM policy"
    },
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "DetachUserPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PolicyARN",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PolicyARN",
      "Description": "Filters access by the ARN of an IAM policy"
    },
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "EnableMFADevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GenerateCredentialReport",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GenerateServiceLastAccessedDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAccessKeyLastUsed",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetAccountAuthorizationDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAccountPasswordPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAccountSummary",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetContextKeysForCustomPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetContextKeysForPrincipalPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCredentialReport",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetGroupPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInstanceProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance-profile"
  ],
  "supportedResources": [
    {
      "Name": "instance-profile",
      "ARN": "arn:aws:iam::${Account}:instance-profile/${InstanceProfileNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetLoginProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetOpenIDConnectProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "oidc-provider"
  ],
  "supportedResources": [
    {
      "Name": "oidc-provider",
      "ARN": "arn:aws:iam::${Account}:oidc-provider/${OidcProviderName}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iam::${Account}:policy/${PolicyNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPolicyVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iam::${Account}:policy/${PolicyNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRolePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSAMLProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "saml-provider"
  ],
  "supportedResources": [
    {
      "Name": "saml-provider",
      "ARN": "arn:aws:iam::${Account}:saml-provider/${SamlProviderName}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSSHPublicKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetServerCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "server-certificate"
  ],
  "supportedResources": [
    {
      "Name": "server-certificate",
      "ARN": "arn:aws:iam::${Account}:server-certificate/${CertificateNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetServiceLastAccessedDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetServiceLastAccessedDetailsWithEntities",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetServiceLinkedRoleDeletionStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetUserPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAccessKeys",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAccountAliases",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAttachedGroupPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAttachedRolePolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAttachedUserPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListEntitiesForPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iam::${Account}:policy/${PolicyNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListGroupPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "arn:aws:iam::$account:group/",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGroupsForUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListInstanceProfiles",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance-profile"
  ],
  "supportedResources": [
    {
      "Name": "instance-profile",
      "ARN": "arn:aws:iam::${Account}:instance-profile/${InstanceProfileNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListInstanceProfilesForRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListMFADevices",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListOpenIDConnectProviders",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "arn:aws:iam::$account:policy/",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPoliciesGrantingServiceAccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPolicyVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iam::${Account}:policy/${PolicyNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListRolePolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListRoleTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListRoles",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "arn:aws:iam::$account:role/",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSAMLProviders",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSSHPublicKeys",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListServerCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "arn:aws:iam::$account:server-certificate/",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListServiceSpecificCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListSigningCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListUserPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListUserTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "arn:aws:iam::$account:user/",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListVirtualMFADevices",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "arn:aws:iam::$account:mfa/",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PassRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PassedToService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PassedToService",
      "Description": "Filters access by the AWS service to which this role is passed"
    }
  ]
}
{
  "name": "PutGroupPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutRolePermissionsBoundary",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "PutRolePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "PutUserPermissionsBoundary",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "PutUserPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iam:PermissionsBoundary",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#ck_PermissionsBoundary",
      "Description": "Filters access if the specified policy is set as the permissions boundary on the IAM entity (user or role)"
    }
  ]
}
{
  "name": "RemoveClientIDFromOpenIDConnectProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "oidc-provider"
  ],
  "supportedResources": [
    {
      "Name": "oidc-provider",
      "ARN": "arn:aws:iam::${Account}:oidc-provider/${OidcProviderName}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveRoleFromInstanceProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance-profile"
  ],
  "supportedResources": [
    {
      "Name": "instance-profile",
      "ARN": "arn:aws:iam::${Account}:instance-profile/${InstanceProfileNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveUserFromGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ResetServiceSpecificCredential",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ResyncMFADevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetDefaultPolicyVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iam::${Account}:policy/${PolicyNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SimulateCustomPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SimulatePrincipalPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateAccessKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateAccountPasswordPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateAssumeRolePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iam::${Account}:group/${GroupNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateLoginProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateOpenIDConnectProviderThumbprint",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "oidc-provider"
  ],
  "supportedResources": [
    {
      "Name": "oidc-provider",
      "ARN": "arn:aws:iam::${Account}:oidc-provider/${OidcProviderName}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRoleDescription",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "role"
  ],
  "supportedResources": [
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSAMLProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "saml-provider"
  ],
  "supportedResources": [
    {
      "Name": "saml-provider",
      "ARN": "arn:aws:iam::${Account}:saml-provider/${SamlProviderName}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSSHPublicKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateServerCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "server-certificate"
  ],
  "supportedResources": [
    {
      "Name": "server-certificate",
      "ARN": "arn:aws:iam::${Account}:server-certificate/${CertificateNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateServiceSpecificCredential",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSigningCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UploadSSHPublicKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UploadServerCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "server-certificate"
  ],
  "supportedResources": [
    {
      "Name": "server-certificate",
      "ARN": "arn:aws:iam::${Account}:server-certificate/${CertificateNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UploadSigningCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iam",
  "service": "Identity And Access Management",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:iam::${Account}:user/${UserNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "ContextKeys": [
        "iam:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "iam:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateWebACL",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer/app/",
    "webacl"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer/app/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    },
    {
      "Name": "webacl",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:webacl/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateByteMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bytematchset"
  ],
  "supportedResources": [
    {
      "Name": "bytematchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:bytematchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateGeoMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "geomatchset"
  ],
  "supportedResources": [
    {
      "Name": "geomatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:geomatchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateIPSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ipset"
  ],
  "supportedResources": [
    {
      "Name": "ipset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:ipset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRateBasedRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ratebasedrule"
  ],
  "supportedResources": [
    {
      "Name": "ratebasedrule",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:ratebasedrule/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRegexMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexmatchset"
  ],
  "supportedResources": [
    {
      "Name": "regexmatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:regexmatch/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRegexPatternSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexpatternset"
  ],
  "supportedResources": [
    {
      "Name": "regexpatternset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:regexpatternset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:rule/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRuleGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSizeConstraintSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sizeconstraintset"
  ],
  "supportedResources": [
    {
      "Name": "sizeconstraintset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:sizeconstraintset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSqlInjectionMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sqlinjectionmatchset"
  ],
  "supportedResources": [
    {
      "Name": "sqlinjectionmatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:sqlinjectionmatchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateWebACL",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webacl"
  ],
  "supportedResources": [
    {
      "Name": "webacl",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:webacl/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateXssMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "xssmatchset"
  ],
  "supportedResources": [
    {
      "Name": "xssmatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:xssmatchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteByteMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bytematchset"
  ],
  "supportedResources": [
    {
      "Name": "bytematchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:bytematchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteGeoMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "geomatchset"
  ],
  "supportedResources": [
    {
      "Name": "geomatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:geomatchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteIPSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ipset"
  ],
  "supportedResources": [
    {
      "Name": "ipset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:ipset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePermissionPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRateBasedRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ratebasedrule"
  ],
  "supportedResources": [
    {
      "Name": "ratebasedrule",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:ratebasedrule/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRegexMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexmatchset"
  ],
  "supportedResources": [
    {
      "Name": "regexmatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:regexmatch/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRegexPatternSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexpatternset"
  ],
  "supportedResources": [
    {
      "Name": "regexpatternset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:regexpatternset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:rule/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRuleGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSizeConstraintSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sizeconstraintset"
  ],
  "supportedResources": [
    {
      "Name": "sizeconstraintset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:sizeconstraintset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSqlInjectionMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sqlinjectionmatchset"
  ],
  "supportedResources": [
    {
      "Name": "sqlinjectionmatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:sqlinjectionmatchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteWebACL",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webacl"
  ],
  "supportedResources": [
    {
      "Name": "webacl",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:webacl/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteXssMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "xssmatchset"
  ],
  "supportedResources": [
    {
      "Name": "xssmatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:xssmatchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateWebACL",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer/app/"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer/app/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetByteMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bytematchset"
  ],
  "supportedResources": [
    {
      "Name": "bytematchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:bytematchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetChangeToken",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetChangeTokenStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGeoMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "geomatchset"
  ],
  "supportedResources": [
    {
      "Name": "geomatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:geomatchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetIPSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ipset"
  ],
  "supportedResources": [
    {
      "Name": "ipset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:ipset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPermissionPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRateBasedRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ratebasedrule"
  ],
  "supportedResources": [
    {
      "Name": "ratebasedrule",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:ratebasedrule/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRateBasedRuleManagedKeys",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ratebasedrule"
  ],
  "supportedResources": [
    {
      "Name": "ratebasedrule",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:ratebasedrule/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRegexMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexmatchset"
  ],
  "supportedResources": [
    {
      "Name": "regexmatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:regexmatch/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRegexPatternSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexpatternset"
  ],
  "supportedResources": [
    {
      "Name": "regexpatternset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:regexpatternset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:rule/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRuleGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSampledRequests",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "webacl",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:webacl/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": false
    },
    {
      "Name": "rule",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:rule/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSizeConstraintSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sizeconstraintset"
  ],
  "supportedResources": [
    {
      "Name": "sizeconstraintset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:sizeconstraintset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSqlInjectionMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sqlinjectionmatchset"
  ],
  "supportedResources": [
    {
      "Name": "sqlinjectionmatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:sqlinjectionmatchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetWebACL",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webacl"
  ],
  "supportedResources": [
    {
      "Name": "webacl",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:webacl/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetWebACLForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer/app/"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer/app/",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetXssMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "xssmatchset"
  ],
  "supportedResources": [
    {
      "Name": "xssmatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:xssmatchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListActivatedRulesInRuleGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListByteMatchSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGeoMatchSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListIPSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRateBasedRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRegexMatchSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRegexPatternSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListResourcesForWebACL",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webacl"
  ],
  "supportedResources": [
    {
      "Name": "webacl",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:webacl/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListRuleGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSizeConstraintSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSqlInjectionMatchSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSubscribedRuleGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListWebACLs",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListXssMatchSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutPermissionPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateByteMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bytematchset"
  ],
  "supportedResources": [
    {
      "Name": "bytematchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:bytematchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateGeoMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "geomatchset"
  ],
  "supportedResources": [
    {
      "Name": "geomatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:geomatchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateIPSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ipset"
  ],
  "supportedResources": [
    {
      "Name": "ipset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:ipset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRateBasedRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ratebasedrule"
  ],
  "supportedResources": [
    {
      "Name": "ratebasedrule",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:ratebasedrule/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRegexMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexmatchset"
  ],
  "supportedResources": [
    {
      "Name": "regexmatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:regexmatch/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRegexPatternSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexpatternset"
  ],
  "supportedResources": [
    {
      "Name": "regexpatternset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:regexpatternset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:rule/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRuleGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSizeConstraintSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sizeconstraintset"
  ],
  "supportedResources": [
    {
      "Name": "sizeconstraintset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:sizeconstraintset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSqlInjectionMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sqlinjectionmatchset"
  ],
  "supportedResources": [
    {
      "Name": "sqlinjectionmatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:sqlinjectionmatchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateWebACL",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webacl"
  ],
  "supportedResources": [
    {
      "Name": "webacl",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:webacl/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateXssMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf-regional",
  "service": "AWS WAF Regional",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "xssmatchset"
  ],
  "supportedResources": [
    {
      "Name": "xssmatchset",
      "ARN": "arn:aws:waf-regional:${Region}:${Account}:xssmatchset/${Id}",
      "RegEx": "^arn:aws:waf-regional:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddMemberToGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGroupsForUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListMembersInGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveMemberFromGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdatePassword",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "VerifyEmail",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso-directory",
  "service": "AWS SSO Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCampaign",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateExportJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateImportJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSegment",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteAdmChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApnsChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteApnsSandboxChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApnsVoipChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApnsVoipSandboxChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteBaiduChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCampaign",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "campaigns",
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "campaigns",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}/campaigns/${CampaignId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    },
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteEmailChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteEventStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteGcmChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSegment",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps",
    "segments"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    },
    {
      "Name": "segments",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}/segments/${SegmentId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSmsChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteUserEndpoints",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVoiceChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAdmChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetApnsChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetApnsSandboxChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetApnsVoipChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetApnsVoipSandboxChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetApplicationSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetApps",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBaiduChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCampaign",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "campaigns",
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "campaigns",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}/campaigns/${CampaignId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    },
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCampaignActivities",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "campaigns",
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "campaigns",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}/campaigns/${CampaignId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    },
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCampaignVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "campaigns",
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "campaigns",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}/campaigns/${CampaignId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    },
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCampaignVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "campaigns",
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "campaigns",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}/campaigns/${CampaignId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    },
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCampaigns",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetChannels",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetEmailChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetEventStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetExportJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetExportJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGcmChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetImportJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetImportJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSegment",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps",
    "segments"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    },
    {
      "Name": "segments",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}/segments/${SegmentId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSegmentExportJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSegmentImportJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps",
    "segments"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    },
    {
      "Name": "segments",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}/segments/${SegmentId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSegmentVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps",
    "segments"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    },
    {
      "Name": "segments",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}/segments/${SegmentId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSegmentVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps",
    "segments"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    },
    {
      "Name": "segments",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}/segments/${SegmentId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSegments",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSmsChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetUserEndpoints",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetVoiceChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PhoneNumberValidate",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutEventStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendMessages",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendUsersMessages",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateAdmChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApnsChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateApnsSandboxChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApnsVoipChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApnsVoipSandboxChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApplicationSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateBaiduChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateCampaign",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "campaigns",
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "campaigns",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}/campaigns/${CampaignId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    },
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateEmailChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateEndpointsBatch",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateGcmChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSegment",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps",
    "segments"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    },
    {
      "Name": "segments",
      "ARN": "arn:aws:mobiletargeting:${Region}:${Account}:apps/${AppId}/segments/${SegmentId}",
      "RegEx": "^arn:aws:mobiletargeting:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSmsChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateVoiceChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobiletargeting",
  "service": "Amazon Pinpoint",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DELETE",
  "evaluated": false,
  "allowed": false,
  "prefix": "apigateway",
  "service": "Manage Amazon API Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apigateway-general"
  ],
  "supportedResources": [
    {
      "Name": "apigateway-general",
      "ARN": "arn:aws:apigateway:${Region}::${ApiGatewayResourcePath}",
      "RegEx": "^arn:aws:apigateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GET",
  "evaluated": false,
  "allowed": false,
  "prefix": "apigateway",
  "service": "Manage Amazon API Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apigateway-general"
  ],
  "supportedResources": [
    {
      "Name": "apigateway-general",
      "ARN": "arn:aws:apigateway:${Region}::${ApiGatewayResourcePath}",
      "RegEx": "^arn:aws:apigateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PATCH",
  "evaluated": false,
  "allowed": false,
  "prefix": "apigateway",
  "service": "Manage Amazon API Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apigateway-general"
  ],
  "supportedResources": [
    {
      "Name": "apigateway-general",
      "ARN": "arn:aws:apigateway:${Region}::${ApiGatewayResourcePath}",
      "RegEx": "^arn:aws:apigateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "POST",
  "evaluated": false,
  "allowed": false,
  "prefix": "apigateway",
  "service": "Manage Amazon API Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apigateway-general"
  ],
  "supportedResources": [
    {
      "Name": "apigateway-general",
      "ARN": "arn:aws:apigateway:${Region}::${ApiGatewayResourcePath}",
      "RegEx": "^arn:aws:apigateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PUT",
  "evaluated": false,
  "allowed": false,
  "prefix": "apigateway",
  "service": "Manage Amazon API Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apigateway-general"
  ],
  "supportedResources": [
    {
      "Name": "apigateway-general",
      "ARN": "arn:aws:apigateway:${Region}::${ApiGatewayResourcePath}",
      "RegEx": "^arn:aws:apigateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRestApiPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "apigateway",
  "service": "Manage Amazon API Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apigateway-general"
  ],
  "supportedResources": [
    {
      "Name": "apigateway-general",
      "ARN": "arn:aws:apigateway:${Region}::${ApiGatewayResourcePath}",
      "RegEx": "^arn:aws:apigateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelRotateSecret",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "CreateSecret",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteResourcePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "DeleteSecret",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:RecoveryWindowInDays",
      "Type": "Long",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the number of days that Secrets Manager waits before it can delete the secret."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    },
    {
      "Name": "secretsmanager:ForceDeleteWithoutRecovery",
      "Type": "Boolean",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by whether the secret is to be deleted immediately without any recovery window."
    }
  ]
}
{
  "name": "DescribeSecret",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "GetRandomPassword",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetResourcePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "GetSecretValue",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:VersionStage",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the list of version stages in the request."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    },
    {
      "Name": "secretsmanager:VersionId",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the unique identifier of the version of the secret in the request."
    }
  ]
}
{
  "name": "ListSecretVersionIds",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "ListSecrets",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutResourcePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "PutSecretValue",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "RestoreSecret",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "RotateSecret",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:RotationLambdaARN",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function in the request."
    },
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a key that is present in the request the user makes to the Secrets Manager service."
    },
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the list of all the tag key namespresent in the request the user makes to the Secrets Manager service."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the list of all the tag key namespresent in the request the user makes to the Secrets Manager service."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "UpdateSecret",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:Description",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the description text in the request."
    },
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:KmsKeyId",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the KMS key in the request."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "UpdateSecretVersionStage",
  "evaluated": false,
  "allowed": false,
  "prefix": "secretsmanager",
  "service": "AWS Secrets Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "Secret"
  ],
  "supportedResources": [
    {
      "Name": "Secret",
      "ARN": "arn:aws:secretsmanager:${Region}:${Account}:secret:${SecretId}",
      "RegEx": "^arn:aws:secretsmanager:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "secretsmanager:ResourceTag/tag-key",
        "secretsmanager:resource/AllowRotationLambdaArn"
      ],
      "ContextKeyStrings": [
        "secretsmanager:resourcetag/tag-key",
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "secretsmanager:resource/allowrotationlambdaarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "secretsmanager:resource/AllowRotationLambdaArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the ARN of the rotation Lambda function associated with the secret."
    },
    {
      "Name": "secretsmanager:VersionStage",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the list of version stages in the request."
    },
    {
      "Name": "secretsmanager:SecretId",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by the SecretID value in the request."
    },
    {
      "Name": "secretsmanager:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-contextkeys",
      "Description": "Filters access by a tag key and value pair."
    }
  ]
}
{
  "name": "GetResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "tag",
  "service": "Amazon Resource Group Tagging API",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTagKeys",
  "evaluated": false,
  "allowed": false,
  "prefix": "tag",
  "service": "Amazon Resource Group Tagging API",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTagValues",
  "evaluated": false,
  "allowed": false,
  "prefix": "tag",
  "service": "Amazon Resource Group Tagging API",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "tag",
  "service": "Amazon Resource Group Tagging API",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "tag",
  "service": "Amazon Resource Group Tagging API",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddRoleToDBCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "iam-role",
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "iam-role",
      "ARN": "arn:aws:iam::${Account}:role/${RoleNameWithPath}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    },
    {
      "Name": "cluster",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster:${DbClusteInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:DatabaseEngine",
        "rds:DatabaseName",
        "rds:Vpc",
        "rds:cluster-tag"
      ],
      "ContextKeyStrings": [
        "rds:databasename",
        "rds:cluster-tag",
        "rds:databaseengine",
        "rds:vpc"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddSourceIdentifierToSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "es"
  ],
  "supportedResources": [
    {
      "Name": "es",
      "ARN": "arn:aws:rds:${Region}:${Account}:es:${SubscriptionName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:es-tag"
      ],
      "ContextKeyStrings": [
        "rds:es-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddTagsToResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:snapshot:${SnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:snapshot-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "ri",
      "ARN": "arn:aws:rds:${Region}:${Account}:ri:${ReservedDbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:ri-tag"
      ],
      "ContextKeyStrings": [
        "rds:ri-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "secgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:secgrp:${SecurityGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:secgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:secgrp-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "es",
      "ARN": "arn:aws:rds:${Region}:${Account}:es:${SubscriptionName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:es-tag"
      ],
      "ContextKeyStrings": [
        "rds:es-tag"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ApplyPendingMaintenanceAction",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AuthorizeDBSecurityGroupIngress",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "secgrp"
  ],
  "supportedResources": [
    {
      "Name": "secgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:secgrp:${SecurityGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:secgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:secgrp-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CopyDBClusterSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster-snapshot"
  ],
  "supportedResources": [
    {
      "Name": "cluster-snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-snapshot:${ClusterSnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-snapshot-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CopyDBParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pg"
  ],
  "supportedResources": [
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CopyDBSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:snapshot:${SnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:snapshot-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CopyOptionGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "og"
  ],
  "supportedResources": [
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDBCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "subgrp",
    "og",
    "cluster-pg",
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "cluster-pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-pg:${ClusterParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-pg-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "cluster",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster:${DbClusteInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:DatabaseEngine",
        "rds:DatabaseName",
        "rds:Vpc",
        "rds:cluster-tag"
      ],
      "ContextKeyStrings": [
        "rds:databasename",
        "rds:cluster-tag",
        "rds:databaseengine",
        "rds:vpc"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDBClusterParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster-pg"
  ],
  "supportedResources": [
    {
      "Name": "cluster-pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-pg:${ClusterParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDBClusterSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster",
    "cluster-snapshot"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster:${DbClusteInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "cluster-snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-snapshot:${ClusterSnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-snapshot-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDBInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "secgrp",
    "subgrp",
    "og",
    "pg",
    "db"
  ],
  "supportedResources": [
    {
      "Name": "secgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:secgrp:${SecurityGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:secgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:secgrp-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:DatabaseClass",
        "rds:DatabaseEngine",
        "rds:DatabaseName",
        "rds:MultiAz",
        "rds:Piops",
        "rds:StorageSize",
        "rds:Vpc",
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:piops",
        "rds:databasename",
        "rds:db-tag",
        "rds:databaseclass",
        "rds:multiaz",
        "rds:databaseengine",
        "rds:vpc",
        "rds:storagesize"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDBInstanceReadReplica",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "subgrp",
    "og",
    "db"
  ],
  "supportedResources": [
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "Piops",
        "rds:DatabaseClass",
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "piops",
        "rds:db-tag",
        "rds:databaseclass"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDBParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pg"
  ],
  "supportedResources": [
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDBSecurityGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "secgrp"
  ],
  "supportedResources": [
    {
      "Name": "secgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:secgrp:${SecurityGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:secgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:secgrp-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDBSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot",
    "db"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:snapshot:${SnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:snapshot-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDBSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "subgrp"
  ],
  "supportedResources": [
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateEventSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "es"
  ],
  "supportedResources": [
    {
      "Name": "es",
      "ARN": "arn:aws:rds:${Region}:${Account}:es:${SubscriptionName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:es-tag"
      ],
      "ContextKeyStrings": [
        "rds:es-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateOptionGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "og"
  ],
  "supportedResources": [
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDBCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster",
    "cluster-snapshot"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster:${DbClusteInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "cluster-snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-snapshot:${ClusterSnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-snapshot-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDBClusterParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster-pg"
  ],
  "supportedResources": [
    {
      "Name": "cluster-pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-pg:${ClusterParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDBClusterSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster-snapshot"
  ],
  "supportedResources": [
    {
      "Name": "cluster-snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-snapshot:${ClusterSnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-snapshot-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDBInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDBParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pg"
  ],
  "supportedResources": [
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDBSecurityGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "secgrp"
  ],
  "supportedResources": [
    {
      "Name": "secgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:secgrp:${SecurityGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:secgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:secgrp-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDBSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:snapshot:${SnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:snapshot-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDBSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "subgrp"
  ],
  "supportedResources": [
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteEventSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "es"
  ],
  "supportedResources": [
    {
      "Name": "es",
      "ARN": "arn:aws:rds:${Region}:${Account}:es:${SubscriptionName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:es-tag"
      ],
      "ContextKeyStrings": [
        "rds:es-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteOptionGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "og"
  ],
  "supportedResources": [
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAccountAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDBClusterParameterGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster-pg"
  ],
  "supportedResources": [
    {
      "Name": "cluster-pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-pg:${ClusterParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDBClusterParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster-pg"
  ],
  "supportedResources": [
    {
      "Name": "cluster-pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-pg:${ClusterParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDBClusterSnapshotAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster-snapshot"
  ],
  "supportedResources": [
    {
      "Name": "cluster-snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-snapshot:${ClusterSnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-snapshot-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDBClusterSnapshots",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDBClusters",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster:${DbClusteInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDBEngineVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pg"
  ],
  "supportedResources": [
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDBInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDBLogFiles",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDBParameterGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pg"
  ],
  "supportedResources": [
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDBParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pg"
  ],
  "supportedResources": [
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDBSecurityGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "secgrp"
  ],
  "supportedResources": [
    {
      "Name": "secgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:secgrp:${SecurityGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:secgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:secgrp-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDBSnapshotAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:snapshot:${SnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:snapshot-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDBSnapshots",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot",
    "db"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:snapshot:${SnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:snapshot-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDBSubnetGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "subgrp"
  ],
  "supportedResources": [
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEngineDefaultClusterParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEngineDefaultParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEventCategories",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEventSubscriptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "es"
  ],
  "supportedResources": [
    {
      "Name": "es",
      "ARN": "arn:aws:rds:${Region}:${Account}:es:${SubscriptionName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:es-tag"
      ],
      "ContextKeyStrings": [
        "rds:es-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "es"
  ],
  "supportedResources": [
    {
      "Name": "es",
      "ARN": "arn:aws:rds:${Region}:${Account}:es:${SubscriptionName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:es-tag"
      ],
      "ContextKeyStrings": [
        "rds:es-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeOptionGroupOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "og"
  ],
  "supportedResources": [
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeOptionGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "og"
  ],
  "supportedResources": [
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeOrderableDBInstanceOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePendingMaintenanceActions",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:DatabaseClass",
        "rds:DatabaseEngine",
        "rds:DatabaseName",
        "rds:MultiAz",
        "rds:Piops",
        "rds:StorageSize",
        "rds:Vpc",
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:piops",
        "rds:databasename",
        "rds:db-tag",
        "rds:databaseclass",
        "rds:multiaz",
        "rds:databaseengine",
        "rds:vpc",
        "rds:storagesize"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeReservedDBInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ri"
  ],
  "supportedResources": [
    {
      "Name": "ri",
      "ARN": "arn:aws:rds:${Region}:${Account}:ri:${ReservedDbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:DatabaseClass",
        "rds:MultiAz",
        "rds:ri-tag"
      ],
      "ContextKeyStrings": [
        "rds:databaseclass",
        "rds:multiaz",
        "rds:ri-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeReservedDBInstancesOfferings",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeValidDBInstanceModifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DownloadCompleteDBLogFile",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DownloadDBLogFilePortion",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "FailoverDBCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster:${DbClusteInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:snapshot:${SnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:snapshot-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "ri",
      "ARN": "arn:aws:rds:${Region}:${Account}:ri:${ReservedDbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:ri-tag"
      ],
      "ContextKeyStrings": [
        "rds:ri-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "secgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:secgrp:${SecurityGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:secgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:secgrp-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "es",
      "ARN": "arn:aws:rds:${Region}:${Account}:es:${SubscriptionName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:es-tag"
      ],
      "ContextKeyStrings": [
        "rds:es-tag"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyCurrentDBClusterCapacity",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster:${DbClusteInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyDBCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "og",
    "cluster",
    "cluster-pg"
  ],
  "supportedResources": [
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "cluster",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster:${DbClusteInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:Vpc",
        "rds:cluster-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-tag",
        "rds:vpc"
      ],
      "isRequired": true
    },
    {
      "Name": "cluster-pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-pg:${ClusterParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyDBClusterParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster-pg"
  ],
  "supportedResources": [
    {
      "Name": "cluster-pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-pg:${ClusterParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyDBClusterSnapshotAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster-snapshot"
  ],
  "supportedResources": [
    {
      "Name": "cluster-snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-snapshot:${ClusterSnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-snapshot-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyDBInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db",
    "secgrp",
    "og",
    "pg"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:DatabaseClass",
        "rds:MultiAz",
        "rds:Piops",
        "rds:StorageSize",
        "rds:Vpc",
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:piops",
        "rds:db-tag",
        "rds:databaseclass",
        "rds:multiaz",
        "rds:vpc",
        "rds:storagesize"
      ],
      "isRequired": true
    },
    {
      "Name": "secgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:secgrp:${SecurityGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:secgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:secgrp-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyDBParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pg"
  ],
  "supportedResources": [
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyDBSnapshotAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:snapshot:${SnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:snapshot-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyDBSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "subgrp"
  ],
  "supportedResources": [
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyEventSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "es"
  ],
  "supportedResources": [
    {
      "Name": "es",
      "ARN": "arn:aws:rds:${Region}:${Account}:es:${SubscriptionName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:es-tag"
      ],
      "ContextKeyStrings": [
        "rds:es-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyOptionGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "og"
  ],
  "supportedResources": [
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PromoteReadReplica",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PurchaseReservedDBInstancesOffering",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RebootDBInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveSourceIdentifierFromSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "es"
  ],
  "supportedResources": [
    {
      "Name": "es",
      "ARN": "arn:aws:rds:${Region}:${Account}:es:${SubscriptionName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:es-tag"
      ],
      "ContextKeyStrings": [
        "rds:es-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveTagsFromResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:snapshot:${SnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:snapshot-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "ri",
      "ARN": "arn:aws:rds:${Region}:${Account}:ri:${ReservedDbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:ri-tag"
      ],
      "ContextKeyStrings": [
        "rds:ri-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:db-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "secgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:secgrp:${SecurityGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:secgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:secgrp-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": false
    },
    {
      "Name": "es",
      "ARN": "arn:aws:rds:${Region}:${Account}:es:${SubscriptionName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:es-tag"
      ],
      "ContextKeyStrings": [
        "rds:es-tag"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ResetDBClusterParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster-pg"
  ],
  "supportedResources": [
    {
      "Name": "cluster-pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-pg:${ClusterParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ResetDBParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pg"
  ],
  "supportedResources": [
    {
      "Name": "pg",
      "ARN": "arn:aws:rds:${Region}:${Account}:pg:${ParameterGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:pg-tag"
      ],
      "ContextKeyStrings": [
        "rds:pg-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RestoreDBClusterFromSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "og",
    "cluster-snapshot",
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "cluster-snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster-snapshot:${ClusterSnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-snapshot-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "cluster",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster:${DbClusteInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:DatabaseEngine",
        "rds:DatabaseName",
        "rds:Vpc",
        "rds:cluster-tag"
      ],
      "ContextKeyStrings": [
        "rds:databasename",
        "rds:cluster-tag",
        "rds:databaseengine",
        "rds:vpc"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RestoreDBClusterToPointInTime",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "subgrp",
    "og",
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "cluster",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster:${DbClusteInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:Vpc",
        "rds:cluster-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-tag",
        "rds:vpc"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RestoreDBInstanceFromDBSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db",
    "subgrp",
    "og",
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:DatabaseClass",
        "rds:DatabaseEngine",
        "rds:DatabaseName",
        "rds:MultiAz",
        "rds:Piops",
        "rds:Vpc",
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:piops",
        "rds:databasename",
        "rds:db-tag",
        "rds:databaseclass",
        "rds:multiaz",
        "rds:databaseengine",
        "rds:vpc"
      ],
      "isRequired": true
    },
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:snapshot:${SnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:snapshot-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RestoreDBInstanceToPointInTime",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db",
    "subgrp",
    "og",
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:DatabaseClass",
        "rds:DatabaseEngine",
        "rds:DatabaseName",
        "rds:MultiAz",
        "rds:Piops",
        "rds:Vpc",
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:piops",
        "rds:databasename",
        "rds:db-tag",
        "rds:databaseclass",
        "rds:multiaz",
        "rds:databaseengine",
        "rds:vpc"
      ],
      "isRequired": true
    },
    {
      "Name": "subgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:subgrp:${SubnetGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:subgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:subgrp-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "og",
      "ARN": "arn:aws:rds:${Region}:${Account}:og:${OptionGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:og-tag"
      ],
      "ContextKeyStrings": [
        "rds:og-tag"
      ],
      "isRequired": true
    },
    {
      "Name": "snapshot",
      "ARN": "arn:aws:rds:${Region}:${Account}:snapshot:${SnapshotName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:snapshot-tag"
      ],
      "ContextKeyStrings": [
        "rds:snapshot-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RevokeDBSecurityGroupIngress",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "secgrp"
  ],
  "supportedResources": [
    {
      "Name": "secgrp",
      "ARN": "arn:aws:rds:${Region}:${Account}:secgrp:${SecurityGroupName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:secgrp-tag"
      ],
      "ContextKeyStrings": [
        "rds:secgrp-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartDBCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster:${DbClusteInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartDBInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:DatabaseClass",
        "rds:DatabaseEngine",
        "rds:DatabaseName",
        "rds:MultiAz",
        "rds:Piops",
        "rds:StorageSize",
        "rds:Vpc",
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:piops",
        "rds:databasename",
        "rds:db-tag",
        "rds:databaseclass",
        "rds:multiaz",
        "rds:databaseengine",
        "rds:vpc",
        "rds:storagesize"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopDBCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:rds:${Region}:${Account}:cluster:${DbClusteInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:cluster-tag"
      ],
      "ContextKeyStrings": [
        "rds:cluster-tag"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopDBInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "rds",
  "service": "Amazon RDS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "db"
  ],
  "supportedResources": [
    {
      "Name": "db",
      "ARN": "arn:aws:rds:${Region}:${Account}:db:${DbInstanceName}",
      "RegEx": "^arn:aws:rds:.+",
      "ContextKeys": [
        "rds:DatabaseClass",
        "rds:DatabaseEngine",
        "rds:DatabaseName",
        "rds:MultiAz",
        "rds:Piops",
        "rds:StorageSize",
        "rds:Vpc",
        "rds:db-tag"
      ],
      "ContextKeyStrings": [
        "rds:piops",
        "rds:databasename",
        "rds:db-tag",
        "rds:databaseclass",
        "rds:multiaz",
        "rds:databaseengine",
        "rds:vpc",
        "rds:storagesize"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateLifecyclePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "dlm",
  "service": "Amazon Data Lifecycle Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteLifecyclePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "dlm",
  "service": "Amazon Data Lifecycle Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetLifecyclePolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "dlm",
  "service": "Amazon Data Lifecycle Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetLifecyclePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "dlm",
  "service": "Amazon Data Lifecycle Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateLifecyclePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "dlm",
  "service": "Amazon Data Lifecycle Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableRegion",
  "evaluated": false,
  "allowed": false,
  "prefix": "account",
  "service": "AWS Accounts",
  "serviceAware": false,
  "resourceEnabled": true,
  "deniedByOrganization": false
}
{
  "name": "EnableRegion",
  "evaluated": false,
  "allowed": false,
  "prefix": "account",
  "service": "AWS Accounts",
  "serviceAware": false,
  "resourceEnabled": true,
  "deniedByOrganization": false
}
{
  "name": "ListRegions",
  "evaluated": false,
  "allowed": false,
  "prefix": "account",
  "service": "AWS Accounts",
  "serviceAware": false,
  "resourceEnabled": true,
  "deniedByOrganization": false
}
{
  "name": "BatchMeterUsage",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Marketplace Metering Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "MeterUsage",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Marketplace Metering Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterUsage",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Marketplace Metering Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResolveCustomer",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Marketplace Metering Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateAddress",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAddress",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAddresses",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetJobManifest",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetJobUnlockCode",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSnowballUsage",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListClusterJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListClusters",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "snowball",
  "service": "AWS Snowball",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateConfigurationItemsToApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDeleteImportData",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApplications",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAgents",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeContinuousExports",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeExportConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeExportTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeImportTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateConfigurationItemsFromApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ExportConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDiscoverySummary",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListServerNeighbors",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartContinuousExport",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartDataCollectionByAgentIds",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartExportTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartImportTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopContinuousExport",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopDataCollectionByAgentIds",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "discovery",
  "service": "Application Discovery",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateAdmin",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:user/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:group/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateGroupMembership",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:group/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "ContextKeys": [
        "quicksight:UserName"
      ],
      "ContextKeyStrings": [
        "quicksight:username"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateReader",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:user/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:user/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:group/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteGroupMembership",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:group/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "ContextKeys": [
        "quicksight:UserName"
      ],
      "ContextKeyStrings": [
        "quicksight:username"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:user/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:group/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:user/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDashboardEmbedUrl",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGroupMapping",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGroupMemberships",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:group/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:group/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListUserGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:user/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:user/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:user/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "ContextKeys": [
        "quicksight:IamArn",
        "quicksight:SessionName"
      ],
      "ContextKeyStrings": [
        "quicksight:sessionname",
        "quicksight:iamarn"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SearchDirectoryGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetGroupMapping",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Subscribe",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Unsubscribe",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "quicksight",
  "service": "Amazon QuickSight",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:quicksight:${Region}:${Account}:group/${ResourceId}",
      "RegEx": "^arn:aws:quicksight:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ApproveSkill",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateContactWithAddressBook",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateDeviceWithRoom",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "room",
    "device"
  ],
  "supportedResources": [
    {
      "Name": "room",
      "ARN": "arn:aws:a4b:${Region}:${Account}:room/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    },
    {
      "Name": "device",
      "ARN": "arn:aws:a4b:${Region}:${Account}:device/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateSkillGroupWithRoom",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "skillgroup",
    "room"
  ],
  "supportedResources": [
    {
      "Name": "skillgroup",
      "ARN": "arn:aws:a4b:${Region}:${Account}:skill-group/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    },
    {
      "Name": "room",
      "ARN": "arn:aws:a4b:${Region}:${Account}:room/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateSkillWithSkillGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateSkillWithUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateAddressBook",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateBusinessReportSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateConferenceProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateContact",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateRoom",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "profile"
  ],
  "supportedResources": [
    {
      "Name": "profile",
      "ARN": "arn:aws:a4b:${Region}:${Account}:profile/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSkillGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAddressBook",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteBusinessReportSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteConferenceProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteContact",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "profile"
  ],
  "supportedResources": [
    {
      "Name": "profile",
      "ARN": "arn:aws:a4b:${Region}:${Account}:profile/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRoom",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "room"
  ],
  "supportedResources": [
    {
      "Name": "room",
      "ARN": "arn:aws:a4b:${Region}:${Account}:room/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRoomSkillParameter",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "room"
  ],
  "supportedResources": [
    {
      "Name": "room",
      "ARN": "arn:aws:a4b:${Region}:${Account}:room/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSkillAuthorization",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteSkillGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "skillgroup"
  ],
  "supportedResources": [
    {
      "Name": "skillgroup",
      "ARN": "arn:aws:a4b:${Region}:${Account}:skill-group/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:a4b:${Region}:${Account}:user/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateContactFromAddressBook",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateDeviceFromRoom",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:a4b:${Region}:${Account}:device/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateSkillFromSkillGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateSkillFromUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateSkillGroupFromRoom",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "skillgroup",
    "room"
  ],
  "supportedResources": [
    {
      "Name": "skillgroup",
      "ARN": "arn:aws:a4b:${Region}:${Account}:skill-group/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    },
    {
      "Name": "room",
      "ARN": "arn:aws:a4b:${Region}:${Account}:room/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ForgetSmartHomeAppliances",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAddressBook",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetConferencePreference",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetConferenceProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetContact",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:a4b:${Region}:${Account}:device/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "profile"
  ],
  "supportedResources": [
    {
      "Name": "profile",
      "ARN": "arn:aws:a4b:${Region}:${Account}:profile/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRoom",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "room"
  ],
  "supportedResources": [
    {
      "Name": "room",
      "ARN": "arn:aws:a4b:${Region}:${Account}:room/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRoomSkillParameter",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "room"
  ],
  "supportedResources": [
    {
      "Name": "room",
      "ARN": "arn:aws:a4b:${Region}:${Account}:room/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSkillGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "skillgroup"
  ],
  "supportedResources": [
    {
      "Name": "skillgroup",
      "ARN": "arn:aws:a4b:${Region}:${Account}:skill-group/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListBusinessReportSchedules",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListConferenceProviders",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDeviceEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSkills",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSkillsStoreCategories",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSkillsStoreSkillsByCategory",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSmartHomeAppliances",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutConferencePreference",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutRoomSkillParameter",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "room"
  ],
  "supportedResources": [
    {
      "Name": "room",
      "ARN": "arn:aws:a4b:${Region}:${Account}:room/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutSkillAuthorization",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterAVSDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RejectSkill",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResolveRoom",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RevokeInvitation",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:a4b:${Region}:${Account}:user/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SearchAddressBooks",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchContacts",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchDevices",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchProfiles",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchRooms",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchSkillGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendInvitation",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:a4b:${Region}:${Account}:user/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartDeviceSync",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartSmartHomeApplianceDiscovery",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateAddressBook",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateBusinessReportSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateConferenceProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateContact",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:a4b:${Region}:${Account}:device/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "profile"
  ],
  "supportedResources": [
    {
      "Name": "profile",
      "ARN": "arn:aws:a4b:${Region}:${Account}:profile/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRoom",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "room"
  ],
  "supportedResources": [
    {
      "Name": "room",
      "ARN": "arn:aws:a4b:${Region}:${Account}:room/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSkillGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "a4b",
  "service": "Alexa for Business",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "skillgroup"
  ],
  "supportedResources": [
    {
      "Name": "skillgroup",
      "ARN": "arn:aws:a4b:${Region}:${Account}:skill-group/${Resource_id}",
      "RegEx": "^arn:aws:a4b:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateFileSystem",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateMountTarget",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String"
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String"
    }
  ]
}
{
  "name": "DeleteFileSystem",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteMountTarget",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String"
    }
  ]
}
{
  "name": "DescribeFileSystems",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeLifecycleConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeMountTargetSecurityGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeMountTargets",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyMountTargetSecurityGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutLifecycleConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateFileSystem",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticfilesystem",
  "service": "Amazon Elastic File System",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "file-system"
  ],
  "supportedResources": [
    {
      "Name": "file-system",
      "ARN": "arn:aws:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}",
      "RegEx": "^arn:aws:elasticfilesystem:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AcceptSharedDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddIpRoutes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddTagsToResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AuthorizeApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelSchemaExtension",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ConnectDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateComputer",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateConditionalForwarder",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLogSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateMicrosoftAD",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTrust",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteConditionalForwarder",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteLogSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteTrust",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeregisterEventTopic",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConditionalForwarders",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDirectories",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDomainControllers",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEventTopics",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSharedDirectories",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSnapshots",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTrusts",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableRadius",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableSso",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableRadius",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableSso",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDirectoryLimits",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSnapshotLimits",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAuthorizedApplications",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListIpRoutes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLogSubscriptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSchemaExtensions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterEventTopic",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RejectSharedDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveIpRoutes",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveTagsFromResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResetUserPassword",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RestoreFromSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ShareDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartSchemaExtension",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UnauthorizeApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UnshareDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateConditionalForwarder",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateNumberOfDomainControllers",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateRadius",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "VerifyTrust",
  "evaluated": false,
  "allowed": false,
  "prefix": "ds",
  "service": "AWS Directory Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AbortMultipartUpload",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "CreateBucket",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:x-amz-grant-full-control",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-write-acp",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-read-acp",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-read",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-grant-write",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-acl",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#object-keys-in-amazon-s3-policies",
      "Description": "Enables you to require specific access permissions when uploading an object."
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:locationconstraint",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#bucket-keys-in-amazon-s3-policies",
      "Description": "Enables you to restrict the user to creating a bucket in only a specific region."
    }
  ]
}
{
  "name": "DeleteBucket",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "DeleteBucketPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "DeleteBucketWebsite",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "DeleteObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "DeleteObjectTagging",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:ExistingObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Enables you to verify that an existing object tag has the specific tag key and value."
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "DeleteObjectVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:versionid",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "DeleteObjectVersionTagging",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:ExistingObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Enables you to verify that an existing object tag has the specific tag key and value."
    },
    {
      "Name": "s3:versionid",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetAccelerateConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetAccountPublicAccessBlock",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAnalyticsConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetBucketAcl",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetBucketCORS",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetBucketLocation",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBucketLogging",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetBucketNotification",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetBucketPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetBucketPolicyStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetBucketPublicAccessBlock",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetBucketRequestPayment",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetBucketTagging",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetBucketVersioning",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetBucketWebsite",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetEncryptionConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetInventoryConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetLifecycleConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetMetricsConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:ExistingObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Enables you to verify that an existing object tag has the specific tag key and value."
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetObjectAcl",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:ExistingObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Enables you to verify that an existing object tag has the specific tag key and value."
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetObjectTagging",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:ExistingObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Enables you to verify that an existing object tag has the specific tag key and value."
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetObjectTorrent",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetObjectVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:ExistingObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Enables you to verify that an existing object tag has the specific tag key and value."
    },
    {
      "Name": "s3:versionid",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetObjectVersionAcl",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:ExistingObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Enables you to verify that an existing object tag has the specific tag key and value."
    },
    {
      "Name": "s3:versionid",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetObjectVersionForReplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetObjectVersionTagging",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:ExistingObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Enables you to verify that an existing object tag has the specific tag key and value."
    },
    {
      "Name": "s3:versionid",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetObjectVersionTorrent",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:versionid",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "GetReplicationConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "HeadBucket",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAllMyBuckets",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBucket",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:delimiter",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#bucket-keys-in-amazon-s3-policies",
      "Description": "Enables you to require the user to specify the delimiter parameter in the GET Bucket Object versions request."
    },
    {
      "Name": "s3:prefix",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#bucket-keys-in-amazon-s3-policies",
      "Description": "Enables you to limit the response of the ListBucket API to key names with specific prefix."
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:max-keys",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#bucket-keys-in-amazon-s3-policies",
      "Description": "Enables you to limit the number of keys Amazon S3 returns in response to ListBucket requests by requiring the user to specify the max-keys parameter."
    }
  ]
}
{
  "name": "ListBucketByTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:max-keys",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#bucket-keys-in-amazon-s3-policies",
      "Description": "Enables you to limit the number of keys Amazon S3 returns in response to ListBucket requests by requiring the user to specify the max-keys parameter."
    }
  ]
}
{
  "name": "ListBucketMultipartUploads",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "ListBucketVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:delimiter",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#bucket-keys-in-amazon-s3-policies",
      "Description": "Enables you to require the user to specify the delimiter parameter in the GET Bucket Object versions request."
    },
    {
      "Name": "s3:prefix",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#bucket-keys-in-amazon-s3-policies",
      "Description": "Enables you to limit the response of the ListBucket API to key names with specific prefix."
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:max-keys",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#bucket-keys-in-amazon-s3-policies",
      "Description": "Enables you to limit the number of keys Amazon S3 returns in response to ListBucket requests by requiring the user to specify the max-keys parameter."
    }
  ]
}
{
  "name": "ListMultipartUploadParts",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "ObjectOwnerOverrideToBucketOwner",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutAccelerateConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutAccountPublicAccessBlock",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutAnalyticsConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutBucketAcl",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:x-amz-grant-full-control",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-write-acp",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-read-acp",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-read",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-grant-write",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-acl",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#object-keys-in-amazon-s3-policies",
      "Description": "Enables you to require specific access permissions when uploading an object."
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutBucketCORS",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutBucketLogging",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutBucketNotification",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutBucketPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutBucketPublicAccessBlock",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutBucketRequestPayment",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutBucketTagging",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutBucketVersioning",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutBucketWebsite",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutEncryptionConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutInventoryConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutLifecycleConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutMetricsConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:x-amz-grant-full-control",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-write-acp",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-website-redirect-location",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-read",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-copy-source",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#object-keys-in-amazon-s3-policies",
      "Description": "Enables you to restrict the copy source to a specific bucket, a specific folder in the bucket, or a specific object in a bucket."
    },
    {
      "Name": "s3:x-amz-metadata-directive",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#object-keys-in-amazon-s3-policies",
      "Description": "Enables you to enforce certain behavior (COPY vs. REPLACE) when objects are uploaded."
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-storage-class",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-server-side-encryption-aws-kms-key-id",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:RequestObjectTagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": " restrict the tag keys that you want to allow on objects."
    },
    {
      "Name": "s3:x-amz-acl",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#object-keys-in-amazon-s3-policies",
      "Description": "Enables you to require specific access permissions when uploading an object."
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-read-acp",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:RequestObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Restrict the tag keys and values that you want to allow on objects."
    },
    {
      "Name": "s3:x-amz-server-side-encryption",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#object-keys-in-amazon-s3-policies",
      "Description": "Enables you to require the user to specify this header in the request to ensure that objects the user uploads are encrypted when they are saved."
    },
    {
      "Name": "s3:x-amz-grant-write",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutObjectAcl",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:x-amz-grant-full-control",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-write-acp",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-read-acp",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-read",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:ExistingObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Enables you to verify that an existing object tag has the specific tag key and value."
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-grant-write",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-storage-class",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-acl",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#object-keys-in-amazon-s3-policies",
      "Description": "Enables you to require specific access permissions when uploading an object."
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutObjectTagging",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:ExistingObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Enables you to verify that an existing object tag has the specific tag key and value."
    },
    {
      "Name": "s3:RequestObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Restrict the tag keys and values that you want to allow on objects."
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:RequestObjectTagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": " restrict the tag keys that you want to allow on objects."
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutObjectVersionAcl",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:x-amz-grant-full-control",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-write-acp",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-read",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:ExistingObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Enables you to verify that an existing object tag has the specific tag key and value."
    },
    {
      "Name": "s3:versionid",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-storage-class",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-acl",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#object-keys-in-amazon-s3-policies",
      "Description": "Enables you to require specific access permissions when uploading an object."
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-read-acp",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-grant-write",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutObjectVersionTagging",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:ExistingObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Enables you to verify that an existing object tag has the specific tag key and value."
    },
    {
      "Name": "s3:RequestObjectTag/<key>",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": "Restrict the tag keys and values that you want to allow on objects."
    },
    {
      "Name": "s3:versionid",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:RequestObjectTagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/API/object-tagging.html#tagging-and-policies",
      "DocPage": "${ConceptsDocRoot}object-tagging.html#tagging-and-policies",
      "Description": " restrict the tag keys that you want to allow on objects."
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "PutReplicationConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bucket"
  ],
  "supportedResources": [
    {
      "Name": "bucket",
      "ARN": "arn:aws:s3:::${BucketName}",
      "RegEx": "^arn:aws:s3:::[^/]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "ReplicateDelete",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "ReplicateObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-server-side-encryption",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html#object-keys-in-amazon-s3-policies",
      "Description": "Enables you to require the user to specify this header in the request to ensure that objects the user uploads are encrypted when they are saved."
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:x-amz-server-side-encryption-aws-kms-key-id",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "ReplicateTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "RestoreObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "s3",
  "service": "Amazon S3",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "object"
  ],
  "supportedResources": [
    {
      "Name": "object",
      "ARN": "arn:aws:s3:::${BucketName}/${ObjectName}",
      "RegEx": "^arn:aws:s3:::.+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "s3:signatureversion",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:authtype",
      "Type": "String"
    },
    {
      "Name": "s3:x-amz-content-sha256",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    },
    {
      "Name": "s3:signatureage",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html",
      "Description": ""
    }
  ]
}
{
  "name": "BatchCreatePartition",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDeleteConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDeletePartition",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDeleteTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchGetPartition",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateClassifier",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCrawler",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDatabase",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDevEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePartition",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateScript",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSecurityConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTrigger",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateUserDefinedFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteClassifier",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCrawler",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDatabase",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDevEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeletePartition",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteResourcePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "catalog"
  ],
  "supportedResources": [
    {
      "Name": "catalog",
      "ARN": "arn:aws:glue:${Region}:${Account}:catalog/${CatalogName}",
      "RegEx": "^arn:aws:glue:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSecurityConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteTrigger",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteUserDefinedFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCatalogImportStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetClassifier",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetClassifiers",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetConnections",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCrawler",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCrawlerMetrics",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCrawlers",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDataCatalogEncryptionSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDatabase",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDatabases",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDataflowGraph",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDevEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDevEndpoints",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetJobRun",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetJobRuns",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMapping",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPartition",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPartitions",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPlan",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetResourcePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "catalog"
  ],
  "supportedResources": [
    {
      "Name": "catalog",
      "ARN": "arn:aws:glue:${Region}:${Account}:catalog/${CatalogName}",
      "RegEx": "^arn:aws:glue:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSecurityConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSecurityConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTableVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTables",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTrigger",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTriggers",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetUserDefinedFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetUserDefinedFunctions",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ImportCatalogToGlue",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutDataCatalogEncryptionSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutResourcePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "catalog"
  ],
  "supportedResources": [
    {
      "Name": "catalog",
      "ARN": "arn:aws:glue:${Region}:${Account}:catalog/${CatalogName}",
      "RegEx": "^arn:aws:glue:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ResetJobBookmark",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartCrawler",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartCrawlerSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartJobRun",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartTrigger",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopCrawler",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopCrawlerSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopTrigger",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateClassifier",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateCrawler",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDatabase",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDevEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdatePartition",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateTrigger",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateUserDefinedFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "glue",
  "service": "AWS Glue",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddTagsToResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AuthorizeCacheSecurityGroupIngress",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CopySnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCacheCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCacheParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCacheSecurityGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCacheSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateReplicationGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DecreaseReplicaCount",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCacheCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCacheParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCacheSecurityGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCacheSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteReplicationGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCacheClusters",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCacheEngineVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCacheParameterGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCacheParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCacheSecurityGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCacheSubnetGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEngineDefaultParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReplicationGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservedCacheNodes",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservedCacheNodesOfferings",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSnapshots",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "IncreaseReplicaCount",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAllowedNodeTypeModifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyCacheCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyCacheParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyCacheSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyReplicationGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyReplicationGroupShardConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PurchaseReservedCacheNodesOffering",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RebootCacheCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveTagsFromResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResetCacheParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RevokeCacheSecurityGroupIngress",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TestFailover",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticache",
  "service": "Amazon ElastiCache",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AcceptInvitation",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ArchiveFindings",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDetector",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateIPSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSampleFindings",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateThreatIntelSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeclineInvitations",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDetector",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteIPSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ipset",
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "ipset",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}/ipset/${IPSetId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    },
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteInvitations",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteThreatIntelSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "threatintelset",
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "threatintelset",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}/threatintelset/${ThreatIntelSetId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    },
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateFromMasterAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDetector",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetFindings",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetFindingsStatistics",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetIPSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ipset",
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "ipset",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}/ipset/${IPSetId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    },
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInvitationsCount",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMasterAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetThreatIntelSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "threatintelset",
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "threatintelset",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}/threatintelset/${ThreatIntelSetId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    },
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "InviteMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDetectors",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListFindings",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListIPSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListInvitations",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListThreatIntelSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartMonitoringMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopMonitoringMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UnarchiveFindings",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateDetector",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateFindingsFeedback",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateIPSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ipset",
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "ipset",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}/ipset/${IPSetId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    },
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateThreatIntelSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "guardduty",
  "service": "Amazon GuardDuty",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "threatintelset",
    "detector"
  ],
  "supportedResources": [
    {
      "Name": "threatintelset",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}/threatintelset/${ThreatIntelSetId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    },
    {
      "Name": "detector",
      "ARN": "arn:aws:guardduty:${Region}:${Account}:detector/${DetectorId}",
      "RegEx": "^arn:aws:guardduty:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateEnvironmentEC2",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateEnvironmentMembership",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateEnvironmentSSH",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteEnvironment",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:cloud9:${Region}:${Account}:environment:${ResourceId}",
      "RegEx": "^arn:aws:cloud9:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteEnvironmentMembership",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEnvironmentMemberships",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEnvironmentStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEnvironments",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:cloud9:${Region}:${Account}:environment:${ResourceId}",
      "RegEx": "^arn:aws:cloud9:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetUserPublicKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListEnvironments",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateEnvironment",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:cloud9:${Region}:${Account}:environment:${ResourceId}",
      "RegEx": "^arn:aws:cloud9:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateEnvironmentMembership",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ValidateEnvironmentName",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloud9",
  "service": "AWS Cloud9",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelSigningProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "signer",
  "service": "AWS Code Signing for Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "signing-profile"
  ],
  "supportedResources": [
    {
      "Name": "signing-profile",
      "ARN": "arn:aws:signer:${Region}::/signing-profiles/${profileName}",
      "RegEx": "^arn:aws:signer:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeSigningJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "signer",
  "service": "AWS Code Signing for Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "signing-job"
  ],
  "supportedResources": [
    {
      "Name": "signing-job",
      "ARN": "arn:aws:signer:${Region}::/signing-jobs/${jobId}",
      "RegEx": "^arn:aws:signer:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSigningPlatform",
  "evaluated": false,
  "allowed": false,
  "prefix": "signer",
  "service": "AWS Code Signing for Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSigningProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "signer",
  "service": "AWS Code Signing for Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "signing-profile"
  ],
  "supportedResources": [
    {
      "Name": "signing-profile",
      "ARN": "arn:aws:signer:${Region}::/signing-profiles/${profileName}",
      "RegEx": "^arn:aws:signer:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListSigningJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "signer",
  "service": "AWS Code Signing for Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSigningPlatforms",
  "evaluated": false,
  "allowed": false,
  "prefix": "signer",
  "service": "AWS Code Signing for Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSigningProfiles",
  "evaluated": false,
  "allowed": false,
  "prefix": "signer",
  "service": "AWS Code Signing for Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutSigningProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "signer",
  "service": "AWS Code Signing for Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartSigningJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "signer",
  "service": "AWS Code Signing for Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "signing-profile"
  ],
  "supportedResources": [
    {
      "Name": "signing-profile",
      "ARN": "arn:aws:signer:${Region}::/signing-profiles/${profileName}",
      "RegEx": "^arn:aws:signer:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSoftwareConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "freertos",
  "service": "Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteSoftwareConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "freertos",
  "service": "Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeHardwarePlatform",
  "evaluated": false,
  "allowed": false,
  "prefix": "freertos",
  "service": "Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSoftwareConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "freertos",
  "service": "Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSoftwareURL",
  "evaluated": false,
  "allowed": false,
  "prefix": "freertos",
  "service": "Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSoftwareURLForConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "freertos",
  "service": "Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListFreeRTOSVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "freertos",
  "service": "Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListHardwarePlatforms",
  "evaluated": false,
  "allowed": false,
  "prefix": "freertos",
  "service": "Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListHardwareVendors",
  "evaluated": false,
  "allowed": false,
  "prefix": "freertos",
  "service": "Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSoftwareConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "freertos",
  "service": "Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateSoftwareConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "freertos",
  "service": "Amazon FreeRTOS",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateBackupPlan",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateBackupSelection",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateBackupVault",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteBackupPlan",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteBackupSelection",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteBackupVault",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteBackupVaultAccessPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteBackupVaultNotifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRecoveryPoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeBackupJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeBackupVault",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeProtectedResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeRecoveryPoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeRestoreJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ExportBackupPlanTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBackupPlan",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBackupPlanFromJSON",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBackupPlanFromTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBackupSelection",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBackupVaultAccessPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBackupVaultNotifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRecoveryPointRestoreMetadata",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSupportedResourceTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBackupJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBackupPlanTemplates",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBackupPlanVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBackupPlans",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBackupSelections",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBackupVaults",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListProtectedResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRecoveryPointsByBackupVault",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListRecoveryPointsByResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRestoreJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutBackupVaultAccessPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutBackupVaultNotifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartBackupJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartRestoreJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopBackupJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateBackupPlan",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateRecoveryPointLifecycle",
  "evaluated": false,
  "allowed": false,
  "prefix": "backup",
  "service": "AWS Backup",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backupVault"
  ],
  "supportedResources": [
    {
      "Name": "backupVault",
      "ARN": "arn:aws:backup::${Account}:backup-vault:${BackupVaultName}",
      "RegEx": "^arn:aws:backup:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "evaluation",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:evaluation/${EvaluationId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": false
    },
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": false
    },
    {
      "Name": "mlmodel",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": false
    },
    {
      "Name": "batchprediction",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:batchprediction/${BatchPredictionId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateBatchPrediction",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "batchprediction",
    "mlmodel",
    "datasource"
  ],
  "supportedResources": [
    {
      "Name": "batchprediction",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:batchprediction/${BatchPredictionId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    },
    {
      "Name": "mlmodel",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    },
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDataSourceFromRDS",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "datasource"
  ],
  "supportedResources": [
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDataSourceFromRedshift",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "datasource"
  ],
  "supportedResources": [
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDataSourceFromS3",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "datasource"
  ],
  "supportedResources": [
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateEvaluation",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "evaluation",
    "mlmodel",
    "datasource"
  ],
  "supportedResources": [
    {
      "Name": "evaluation",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:evaluation/${EvaluationId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    },
    {
      "Name": "mlmodel",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    },
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateMLModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "mlmodel",
    "datasource"
  ],
  "supportedResources": [
    {
      "Name": "mlmodel",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    },
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRealtimeEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "mlmodel"
  ],
  "supportedResources": [
    {
      "Name": "mlmodel",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteBatchPrediction",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "batchprediction"
  ],
  "supportedResources": [
    {
      "Name": "batchprediction",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:batchprediction/${BatchPredictionId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDataSource",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "datasource"
  ],
  "supportedResources": [
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteEvaluation",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "evaluation"
  ],
  "supportedResources": [
    {
      "Name": "evaluation",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:evaluation/${EvaluationId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteMLModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "mlmodel"
  ],
  "supportedResources": [
    {
      "Name": "mlmodel",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRealtimeEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "mlmodel"
  ],
  "supportedResources": [
    {
      "Name": "mlmodel",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "evaluation",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:evaluation/${EvaluationId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": false
    },
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": false
    },
    {
      "Name": "mlmodel",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": false
    },
    {
      "Name": "batchprediction",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:batchprediction/${BatchPredictionId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeBatchPredictions",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDataSources",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEvaluations",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeMLModels",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "evaluation",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:evaluation/${EvaluationId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": false
    },
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": false
    },
    {
      "Name": "mlmodel",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": false
    },
    {
      "Name": "batchprediction",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:batchprediction/${BatchPredictionId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBatchPrediction",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "batchprediction"
  ],
  "supportedResources": [
    {
      "Name": "batchprediction",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:batchprediction/${BatchPredictionId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDataSource",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "datasource"
  ],
  "supportedResources": [
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetEvaluation",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "datasource"
  ],
  "supportedResources": [
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetMLModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "mlmodel"
  ],
  "supportedResources": [
    {
      "Name": "mlmodel",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "Predict",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "mlmodel"
  ],
  "supportedResources": [
    {
      "Name": "mlmodel",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateBatchPrediction",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "batchprediction"
  ],
  "supportedResources": [
    {
      "Name": "batchprediction",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:batchprediction/${BatchPredictionId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateDataSource",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "datasource"
  ],
  "supportedResources": [
    {
      "Name": "datasource",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:datasource/${DatasourceId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateEvaluation",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "evaluation"
  ],
  "supportedResources": [
    {
      "Name": "evaluation",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:evaluation/${EvaluationId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateMLModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "machinelearning",
  "service": "Amazon Machine Learning",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "mlmodel"
  ],
  "supportedResources": [
    {
      "Name": "mlmodel",
      "ARN": "arn:aws:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}",
      "RegEx": "^arn:aws:machinelearning:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssignInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssignVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateElasticIp",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachElasticLoadBalancer",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CloneStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDeployment",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateLayer",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateUserProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteLayer",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUserProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeregisterEcsCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterElasticIp",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterRdsDbInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAgentVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeApps",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCommands",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDeployments",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEcsClusters",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeElasticIps",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeElasticLoadBalancers",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeLayers",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeLoadBasedAutoScaling",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeMyUserProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePermissions",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeRaidArrays",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeRdsDbInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeServiceErrors",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStackProvisioningParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStackSummary",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStacks",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeTimeBasedAutoScaling",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeUserProfiles",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVolumes",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachElasticLoadBalancer",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateElasticIp",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetHostnameSuggestion",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GrantAccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RebootInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterEcsCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterElasticIp",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterRdsDbInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetLoadBasedAutoScaling",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetPermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetTimeBasedAutoScaling",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UnassignInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UnassignVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateElasticIp",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateLayer",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateMyUserProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateRdsDbInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateUserProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks",
  "service": "AWS OpsWorks",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:opsworks:${Region}:${Account}:stack/${StackId}/",
      "RegEx": "^arn:aws:opsworks:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetAggregateResourceConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigurationAggregator"
  ],
  "supportedResources": [
    {
      "Name": "ConfigurationAggregator",
      "ARN": "arn:aws:config:${Region}:${Account}:config-aggregator/${AggregatorId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetResourceConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAggregationAuthorization",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "AggregationAuthorization"
  ],
  "supportedResources": [
    {
      "Name": "AggregationAuthorization",
      "ARN": "arn:aws:config:${Region}:${Account}:aggregation-authorization/${AggregatorAccount}/${AggregatorRegion}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteConfigRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigRule"
  ],
  "supportedResources": [
    {
      "Name": "ConfigRule",
      "ARN": "arn:aws:config:${Region}:${Account}:config-rule/${ConfigRuleId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteConfigurationAggregator",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigurationAggregator"
  ],
  "supportedResources": [
    {
      "Name": "ConfigurationAggregator",
      "ARN": "arn:aws:config:${Region}:${Account}:config-aggregator/${AggregatorId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteConfigurationRecorder",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDeliveryChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteEvaluationResults",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigRule"
  ],
  "supportedResources": [
    {
      "Name": "ConfigRule",
      "ARN": "arn:aws:config:${Region}:${Account}:config-rule/${ConfigRuleId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePendingAggregationRequest",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteRetentionConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeliverConfigSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAggregateComplianceByConfigRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigurationAggregator"
  ],
  "supportedResources": [
    {
      "Name": "ConfigurationAggregator",
      "ARN": "arn:aws:config:${Region}:${Account}:config-aggregator/${AggregatorId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAggregationAuthorizations",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeComplianceByConfigRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigRule"
  ],
  "supportedResources": [
    {
      "Name": "ConfigRule",
      "ARN": "arn:aws:config:${Region}:${Account}:config-rule/${ConfigRuleId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeComplianceByResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConfigRuleEvaluationStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigRule"
  ],
  "supportedResources": [
    {
      "Name": "ConfigRule",
      "ARN": "arn:aws:config:${Region}:${Account}:config-rule/${ConfigRuleId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeConfigRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigRule"
  ],
  "supportedResources": [
    {
      "Name": "ConfigRule",
      "ARN": "arn:aws:config:${Region}:${Account}:config-rule/${ConfigRuleId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeConfigurationAggregatorSourcesStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigurationAggregator"
  ],
  "supportedResources": [
    {
      "Name": "ConfigurationAggregator",
      "ARN": "arn:aws:config:${Region}:${Account}:config-aggregator/${AggregatorId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeConfigurationAggregators",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConfigurationRecorderStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConfigurationRecorders",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDeliveryChannelStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDeliveryChannels",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePendingAggregationRequests",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeRetentionConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAggregateComplianceDetailsByConfigRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigurationAggregator"
  ],
  "supportedResources": [
    {
      "Name": "ConfigurationAggregator",
      "ARN": "arn:aws:config:${Region}:${Account}:config-aggregator/${AggregatorId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetAggregateConfigRuleComplianceSummary",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigurationAggregator"
  ],
  "supportedResources": [
    {
      "Name": "ConfigurationAggregator",
      "ARN": "arn:aws:config:${Region}:${Account}:config-aggregator/${AggregatorId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetAggregateDiscoveredResourceCounts",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigurationAggregator"
  ],
  "supportedResources": [
    {
      "Name": "ConfigurationAggregator",
      "ARN": "arn:aws:config:${Region}:${Account}:config-aggregator/${AggregatorId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetAggregateResourceConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigurationAggregator"
  ],
  "supportedResources": [
    {
      "Name": "ConfigurationAggregator",
      "ARN": "arn:aws:config:${Region}:${Account}:config-aggregator/${AggregatorId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetComplianceDetailsByConfigRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigRule"
  ],
  "supportedResources": [
    {
      "Name": "ConfigRule",
      "ARN": "arn:aws:config:${Region}:${Account}:config-rule/${ConfigRuleId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetComplianceDetailsByResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetComplianceSummaryByConfigRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetComplianceSummaryByResourceType",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDiscoveredResourceCounts",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetResourceConfigHistory",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTagKeys",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAggregateDiscoveredResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigurationAggregator"
  ],
  "supportedResources": [
    {
      "Name": "ConfigurationAggregator",
      "ARN": "arn:aws:config:${Region}:${Account}:config-aggregator/${AggregatorId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDiscoveredResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutAggregationAuthorization",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "AggregationAuthorization"
  ],
  "supportedResources": [
    {
      "Name": "AggregationAuthorization",
      "ARN": "arn:aws:config:${Region}:${Account}:aggregation-authorization/${AggregatorAccount}/${AggregatorRegion}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutConfigRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigRule"
  ],
  "supportedResources": [
    {
      "Name": "ConfigRule",
      "ARN": "arn:aws:config:${Region}:${Account}:config-rule/${ConfigRuleId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutConfigurationAggregator",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigurationAggregator"
  ],
  "supportedResources": [
    {
      "Name": "ConfigurationAggregator",
      "ARN": "arn:aws:config:${Region}:${Account}:config-aggregator/${AggregatorId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutConfigurationRecorder",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutDeliveryChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutEvaluations",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutRetentionConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartConfigRulesEvaluation",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ConfigRule"
  ],
  "supportedResources": [
    {
      "Name": "ConfigRule",
      "ARN": "arn:aws:config:${Region}:${Account}:config-rule/${ConfigRuleId}",
      "RegEx": "arn:aws:config:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartConfigurationRecorder",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopConfigurationRecorder",
  "evaluated": false,
  "allowed": false,
  "prefix": "config",
  "service": "AWS Config",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchPutMessage",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "input"
  ],
  "supportedResources": [
    {
      "Name": "input",
      "ARN": "arn:aws:iotevents:${Region}:${Account}:input/${inputName}",
      "RegEx": "^arn:aws:iotevents:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDetectorModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateInput",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDetectorModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detectorModel"
  ],
  "supportedResources": [
    {
      "Name": "detectorModel",
      "ARN": "arn:aws:iotevents:${Region}:${Account}:detectorModel/${DetectorModelName}",
      "RegEx": "^arn:aws:iotevents:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteInput",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "input"
  ],
  "supportedResources": [
    {
      "Name": "input",
      "ARN": "arn:aws:iotevents:${Region}:${Account}:input/${inputName}",
      "RegEx": "^arn:aws:iotevents:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDetector",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detectorModel"
  ],
  "supportedResources": [
    {
      "Name": "detectorModel",
      "ARN": "arn:aws:iotevents:${Region}:${Account}:detectorModel/${DetectorModelName}",
      "RegEx": "^arn:aws:iotevents:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDetectorModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detectorModel"
  ],
  "supportedResources": [
    {
      "Name": "detectorModel",
      "ARN": "arn:aws:iotevents:${Region}:${Account}:detectorModel/${DetectorModelName}",
      "RegEx": "^arn:aws:iotevents:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeInput",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "input"
  ],
  "supportedResources": [
    {
      "Name": "input",
      "ARN": "arn:aws:iotevents:${Region}:${Account}:input/${inputName}",
      "RegEx": "^arn:aws:iotevents:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeLoggingOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDetectorModelVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detectorModel"
  ],
  "supportedResources": [
    {
      "Name": "detectorModel",
      "ARN": "arn:aws:iotevents:${Region}:${Account}:detectorModel/${DetectorModelName}",
      "RegEx": "^arn:aws:iotevents:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDetectorModels",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDetectors",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detectorModel"
  ],
  "supportedResources": [
    {
      "Name": "detectorModel",
      "ARN": "arn:aws:iotevents:${Region}:${Account}:detectorModel/${DetectorModelName}",
      "RegEx": "^arn:aws:iotevents:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "iotevents:KeyValue",
      "Type": "String",
      "DocPageRel": "${DocumentationLink}keyvalue.html",
      "Description": "The value of the key (identifying the device or system) which caused the creation of this detector (instance)."
    }
  ]
}
{
  "name": "ListInputs",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutLoggingOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDetectorModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "detectorModel"
  ],
  "supportedResources": [
    {
      "Name": "detectorModel",
      "ARN": "arn:aws:iotevents:${Region}:${Account}:detectorModel/${DetectorModelName}",
      "RegEx": "^arn:aws:iotevents:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateInput",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotevents",
  "service": "AWS IoT Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "input"
  ],
  "supportedResources": [
    {
      "Name": "input",
      "ARN": "arn:aws:iotevents:${Region}:${Account}:input/${inputName}",
      "RegEx": "^arn:aws:iotevents:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDevicePool",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateNetworkProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateRemoteAccessSession",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateUpload",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDevicePool",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteNetworkProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteRemoteAccessSession",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteRun",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteUpload",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAccountSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDevicePool",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDevicePoolCompatibility",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetNetworkProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetOfferingStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetRemoteAccessSession",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetRun",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSuite",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTest",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetUpload",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "InstallToRemoteAccessSession",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListArtifacts",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDevicePools",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDevices",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListNetworkProfiles",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListOfferingTransactions",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListOfferings",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListProjects",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRemoteAccessSessions",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRuns",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSamples",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSuites",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTests",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListUniqueProblems",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListUploads",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PurchaseOffering",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RenewOffering",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ScheduleRun",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopRemoteAccessSession",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopRun",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDevicePool",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateNetworkProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "devicefarm",
  "service": "AWS Device Farm",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateGatewaySink",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:gateway/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateGatewaySource",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:gateway/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateViewEntities",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group",
    "view"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:group/${GroupId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:group/.+",
      "isRequired": true
    },
    {
      "Name": "view",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:view/${ViewId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:view/.+",
      "isRequired": true
    },
    {
      "Name": "asset",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:asset/${AssetId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:asset/.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateAsset",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateAssetTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateMeasurementDataStore",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateMetricType",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateView",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAsset",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "asset"
  ],
  "supportedResources": [
    {
      "Name": "asset",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:asset/${AssetId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:asset/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteAssetTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "asset-template"
  ],
  "supportedResources": [
    {
      "Name": "asset-template",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:asset-template/${AssetTemplateId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:asset-template/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:gateway/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:group/${GroupId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:group/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteMeasurementDataStore",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "measurement-data-store"
  ],
  "supportedResources": [
    {
      "Name": "measurement-data-store",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:measurement-data-store/${MeasurementDataStoreId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:measurement-data-store/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteMetricType",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "metric-type"
  ],
  "supportedResources": [
    {
      "Name": "metric-type",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:metric-type/${MetricTypeId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:metric-type/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteView",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "view"
  ],
  "supportedResources": [
    {
      "Name": "view",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:view/${ViewId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:view/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterViewEntities",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "view"
  ],
  "supportedResources": [
    {
      "Name": "view",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:view/${ViewId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:view/.+",
      "isRequired": true
    },
    {
      "Name": "asset",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:asset/${AssetId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:asset/.+",
      "isRequired": false
    },
    {
      "Name": "group",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:group/${GroupId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:group/.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAssetTemplates",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "asset-template"
  ],
  "supportedResources": [
    {
      "Name": "asset-template",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:asset-template/${AssetTemplateId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:asset-template/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAssets",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "asset"
  ],
  "supportedResources": [
    {
      "Name": "asset",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:asset/${AssetId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:asset/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeGateways",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:gateway/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:group/${GroupId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:group/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeMeasurementDataStores",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "measurement-data-store"
  ],
  "supportedResources": [
    {
      "Name": "measurement-data-store",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:measurement-data-store/${MeasurementDataStoreId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:measurement-data-store/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeMetricTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "metric-type"
  ],
  "supportedResources": [
    {
      "Name": "metric-type",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:metric-type/${MetricTypeId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:metric-type/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeViews",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "view"
  ],
  "supportedResources": [
    {
      "Name": "view",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:view/${ViewId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:view/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateGatewaySink",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:gateway/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateGatewaySource",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:gateway/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateViewEntities",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group",
    "view"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:group/${GroupId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:group/.+",
      "isRequired": true
    },
    {
      "Name": "view",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:view/${ViewId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:view/.+",
      "isRequired": true
    },
    {
      "Name": "asset",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:asset/${AssetId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:asset/.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetMeasurementData",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "measurement"
  ],
  "supportedResources": [
    {
      "Name": "measurement",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:measurement/${MeasurementId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:measurement/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetMetricData",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "metric"
  ],
  "supportedResources": [
    {
      "Name": "metric",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:metric/${MetricId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:metric/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAssetTemplates",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAssets",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGateways",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListMeasurementDataStores",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListMeasurementDataStreams",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "measurement-data-store"
  ],
  "supportedResources": [
    {
      "Name": "measurement-data-store",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:measurement-data-store/${MeasurementDataStoreId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:measurement-data-store/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListMetricTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListViewEntities",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "view"
  ],
  "supportedResources": [
    {
      "Name": "view",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:view/${ViewId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:view/.+",
      "isRequired": true
    },
    {
      "Name": "asset",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:asset/${AssetId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:asset/.+",
      "isRequired": false
    },
    {
      "Name": "group",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:group/${GroupId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:group/.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListViews",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterViewEntities",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "view"
  ],
  "supportedResources": [
    {
      "Name": "view",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:view/${ViewId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:view/.+",
      "isRequired": true
    },
    {
      "Name": "asset",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:asset/${AssetId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:asset/.+",
      "isRequired": false
    },
    {
      "Name": "group",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:group/${GroupId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:group/.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateAsset",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "asset"
  ],
  "supportedResources": [
    {
      "Name": "asset",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:asset/${AssetId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:asset/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateAssetTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "asset-template"
  ],
  "supportedResources": [
    {
      "Name": "asset-template",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:asset-template/${AssetTemplateId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:asset-template/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:gateway/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "group"
  ],
  "supportedResources": [
    {
      "Name": "group",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:group/${GroupId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:group/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateMeasurementDataStore",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "measurement-data-store"
  ],
  "supportedResources": [
    {
      "Name": "measurement-data-store",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:measurement-data-store/${MeasurementDataStoreId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:measurement-data-store/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateView",
  "evaluated": false,
  "allowed": false,
  "prefix": "iotsitewise",
  "service": "AWS IoT SiteWise",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "view"
  ],
  "supportedResources": [
    {
      "Name": "view",
      "ARN": "arn:aws:iotsitewise:${Region}:${Account}:view/${ViewId}",
      "RegEx": "^arn:aws:iotsitewise:.+-\\d+:\\d{12}:view/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelKeyDeletion",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "CreateAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "CreateGrant",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:GrantOperations",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-grant-operations",
      "Description": "Controls access to the CreateGrant operation based on the operations in the grant."
    },
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:GrantIsForAWSResource",
      "Type": "Bool",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-grant-is-for-aws-resource",
      "Description": "Controls access to the CreateGrant operation when the request comes from a specified AWS service."
    },
    {
      "Name": "kms:EncryptionContextKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-context-keys",
      "Description": "Controls access based on the presence of specified keys in the encryption context. The encryption context is an optional element in a cryptographic operation."
    },
    {
      "Name": "kms:GrantConstraintType",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-grant-constraint-type",
      "Description": "Controls access to the CreateGrant operation based on the grant constraint in the request."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    },
    {
      "Name": "kms:GranteePrincipal",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-grantee-principal",
      "Description": "Controls access to the CreateGrant operation based on the grantee principal in the grant."
    },
    {
      "Name": "kms:RetiringPrincipal",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-retiring-principal",
      "Description": "Controls access to the CreateGrant operation based on the retiring principal in the grant."
    }
  ]
}
{
  "name": "CreateKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Decrypt",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:EncryptionContextKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-context-keys",
      "Description": "Controls access based on the presence of specified keys in the encryption context. The encryption context is an optional element in a cryptographic operation."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "DeleteAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "alias"
  ],
  "supportedResources": [
    {
      "Name": "alias",
      "ARN": "arn:aws:kms:${Region}:${Account}:alias/${Alias}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "DeleteImportedKeyMaterial",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "DescribeKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "DisableKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "DisableKeyRotation",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "EnableKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "EnableKeyRotation",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "Encrypt",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:EncryptionContextKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-context-keys",
      "Description": "Controls access based on the presence of specified keys in the encryption context. The encryption context is an optional element in a cryptographic operation."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "GenerateDataKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:EncryptionContextKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-context-keys",
      "Description": "Controls access based on the presence of specified keys in the encryption context. The encryption context is an optional element in a cryptographic operation."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "GenerateDataKeyWithoutPlaintext",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:EncryptionContextKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-context-keys",
      "Description": "Controls access based on the presence of specified keys in the encryption context. The encryption context is an optional element in a cryptographic operation."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "GenerateRandom",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetKeyPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "GetKeyRotationStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "GetParametersForImport",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:WrappingKeySpec",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-wrapping-key-spec",
      "Description": "Controls access to the GetParametersForImport operation based on the value of the WrappingKeySpec parameter in the request."
    },
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:WrappingAlgorithm",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-wrapping-algorithm",
      "Description": "Controls access to the GetParametersForImport operation based on the value of the WrappingAlgorithm parameter in the request."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "ImportKeyMaterial",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ValidTo",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-valid-to",
      "Description": "Controls access to the ImportKeyMaterial operation based on the value of the ValidTo parameter in the request. You can use this condition key to allow users to import key material only when it expires by the specified date."
    },
    {
      "Name": "kms:ExpirationModel",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-expiration-model",
      "Description": "Controls access to the ImportKeyMaterial operation based on the value of the ExpirationModel parameter in the request."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "ListAliases",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGrants",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "ListKeyPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "ListKeys",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListResourceTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "ListRetirableGrants",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutKeyPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:BypassPolicyLockoutSafetyCheck",
      "Type": "Bool",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-bypass-policy-lockout-safety-check",
      "Description": "Controls access to the CreateKey and PutKeyPolicy operations based on the value of the BypassPolicyLockoutSafetyCheck parameter in the request."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "ReEncryptFrom",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:EncryptionContextKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-context-keys",
      "Description": "Controls access based on the presence of specified keys in the encryption context. The encryption context is an optional element in a cryptographic operation."
    },
    {
      "Name": "kms:ReEncryptOnSameKey",
      "Type": "Bool",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-reencrypt-on-same-key",
      "Description": "Controls access to the ReEncrypt operation when it uses the same customer master key that was used for the Encrypt operation."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "ReEncryptTo",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:EncryptionContextKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-context-keys",
      "Description": "Controls access based on the presence of specified keys in the encryption context. The encryption context is an optional element in a cryptographic operation."
    },
    {
      "Name": "kms:ReEncryptOnSameKey",
      "Type": "Bool",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-reencrypt-on-same-key",
      "Description": "Controls access to the ReEncrypt operation when it uses the same customer master key that was used for the Encrypt operation."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "RetireGrant",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RevokeGrant",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "ScheduleKeyDeletion",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "UpdateAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key",
    "alias"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    },
    {
      "Name": "alias",
      "ARN": "arn:aws:kms:${Region}:${Account}:alias/${Alias}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "UpdateKeyDescription",
  "evaluated": false,
  "allowed": false,
  "prefix": "kms",
  "service": "AWS Key Management Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "key"
  ],
  "supportedResources": [
    {
      "Name": "key",
      "ARN": "arn:aws:kms:${Region}:${Account}:key/${KeyId}",
      "RegEx": "^arn:aws:kms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "kms:CallerAccount",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-caller-account",
      "Description": "Controls access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition to allow or deny access to to all IAM users and roles in an AWS account in a single policy statement."
    },
    {
      "Name": "kms:ViaService",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-via-service",
      "Description": "Controls access when a request made on the principal's behalf comes from a specified AWS service."
    }
  ]
}
{
  "name": "CreateBotVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateIntentVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "intent"
  ],
  "supportedResources": [
    {
      "Name": "intent",
      "ARN": "arn:aws:lex:${Region}:${Account}:intent:${IntentName}:${IntentVersion}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSlotTypeVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "slottype"
  ],
  "supportedResources": [
    {
      "Name": "slottype",
      "ARN": "arn:aws:lex:${Region}:${Account}:slottype:${SlotName}:${SlotVersion}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteBot",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteBotAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteBotChannelAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "channel"
  ],
  "supportedResources": [
    {
      "Name": "channel",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot-channel:${BotName}:${BotAlias}:${ChannelName}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "lex:channelType",
      "Type": "String",
      "Description": "Enables you to control access based on the channel type included in the request."
    }
  ]
}
{
  "name": "DeleteBotVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteIntent",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "intent"
  ],
  "supportedResources": [
    {
      "Name": "intent",
      "ARN": "arn:aws:lex:${Region}:${Account}:intent:${IntentName}:${IntentVersion}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteIntentVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "intent"
  ],
  "supportedResources": [
    {
      "Name": "intent",
      "ARN": "arn:aws:lex:${Region}:${Account}:intent:${IntentName}:${IntentVersion}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSlotType",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "slottype"
  ],
  "supportedResources": [
    {
      "Name": "slottype",
      "ARN": "arn:aws:lex:${Region}:${Account}:slottype:${SlotName}:${SlotVersion}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSlotTypeVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "slottype"
  ],
  "supportedResources": [
    {
      "Name": "slottype",
      "ARN": "arn:aws:lex:${Region}:${Account}:slottype:${SlotName}:${SlotVersion}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUtterances",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBot",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBotAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBotAliases",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBotChannelAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "channel"
  ],
  "supportedResources": [
    {
      "Name": "channel",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot-channel:${BotName}:${BotAlias}:${ChannelName}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "lex:channelType",
      "Type": "String",
      "Description": "Enables you to control access based on the channel type included in the request."
    }
  ]
}
{
  "name": "GetBotChannelAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "channel"
  ],
  "supportedResources": [
    {
      "Name": "channel",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot-channel:${BotName}:${BotAlias}:${ChannelName}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBotVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBots",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBuiltinIntent",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBuiltinIntents",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBuiltinSlotTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetIntent",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "intent"
  ],
  "supportedResources": [
    {
      "Name": "intent",
      "ARN": "arn:aws:lex:${Region}:${Account}:intent:${IntentName}:${IntentVersion}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetIntentVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "intent"
  ],
  "supportedResources": [
    {
      "Name": "intent",
      "ARN": "arn:aws:lex:${Region}:${Account}:intent:${IntentName}:${IntentVersion}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetIntents",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSlotType",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "slottype"
  ],
  "supportedResources": [
    {
      "Name": "slottype",
      "ARN": "arn:aws:lex:${Region}:${Account}:slottype:${SlotName}:${SlotVersion}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSlotTypeVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "slottype"
  ],
  "supportedResources": [
    {
      "Name": "slottype",
      "ARN": "arn:aws:lex:${Region}:${Account}:slottype:${SlotName}:${SlotVersion}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSlotTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetUtterancesView",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PostContent",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PostText",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutBot",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "lex:associatedIntents",
      "Type": "String",
      "Description": "Enables you to control access based on the intents included in the request."
    }
  ]
}
{
  "name": "PutBotAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bot"
  ],
  "supportedResources": [
    {
      "Name": "bot",
      "ARN": "arn:aws:lex:${Region}:${Account}:bot:${BotName}:${BotVersionOrAlias}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutIntent",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "intent"
  ],
  "supportedResources": [
    {
      "Name": "intent",
      "ARN": "arn:aws:lex:${Region}:${Account}:intent:${IntentName}:${IntentVersion}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "lex:associatedSlotTypes",
      "Type": "String",
      "Description": "Enables you to control access based on the slot types included in the request."
    }
  ]
}
{
  "name": "PutSlotType",
  "evaluated": false,
  "allowed": false,
  "prefix": "lex",
  "service": "Amazon Lex",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "slottype"
  ],
  "supportedResources": [
    {
      "Name": "slottype",
      "ARN": "arn:aws:lex:${Region}:${Account}:slottype:${SlotName}:${SlotVersion}",
      "RegEx": "^arn:aws:lex:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "connect",
  "evaluated": false,
  "allowed": false,
  "prefix": "neptune-db",
  "service": "Amazon Neptune",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "database"
  ],
  "supportedResources": [
    {
      "Name": "database",
      "ARN": "arn:aws:neptune-db:${Region}:${Account}:${RelativeId}/database",
      "RegEx": "^arn:aws:neptune-db:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAffectedEntities",
  "evaluated": false,
  "allowed": false,
  "prefix": "health",
  "service": "AWS Health APIs and Notifications",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "event"
  ],
  "supportedResources": [
    {
      "Name": "event",
      "ARN": "arn:aws:health:*::event/${Service}/${EventTypeCode}/*",
      "RegEx": "^arn:aws:health:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "health:service",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/health/latest/ug/controlling-access.html",
      "Description": "The service of the event."
    },
    {
      "Name": "health:eventTypeCode",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/health/latest/ug/controlling-access.html",
      "Description": "The type of event."
    }
  ]
}
{
  "name": "DescribeEntityAggregates",
  "evaluated": false,
  "allowed": false,
  "prefix": "health",
  "service": "AWS Health APIs and Notifications",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEventAggregates",
  "evaluated": false,
  "allowed": false,
  "prefix": "health",
  "service": "AWS Health APIs and Notifications",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEventDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "health",
  "service": "AWS Health APIs and Notifications",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "event"
  ],
  "supportedResources": [
    {
      "Name": "event",
      "ARN": "arn:aws:health:*::event/${Service}/${EventTypeCode}/*",
      "RegEx": "^arn:aws:health:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "health:service",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/health/latest/ug/controlling-access.html",
      "Description": "The service of the event."
    },
    {
      "Name": "health:eventTypeCode",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/health/latest/ug/controlling-access.html",
      "Description": "The type of event."
    }
  ]
}
{
  "name": "DescribeEventTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "health",
  "service": "AWS Health APIs and Notifications",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "health",
  "service": "AWS Health APIs and Notifications",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateBranch",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDomainAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteBranch",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "branches"
  ],
  "supportedResources": [
    {
      "Name": "branches",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}/branches/${BranchName}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDomainAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domains"
  ],
  "supportedResources": [
    {
      "Name": "domains",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}/domains/${DomainName}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "jobs"
  ],
  "supportedResources": [
    {
      "Name": "jobs",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}/branches/${BranchName}/jobs/${JobId}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBranch",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "branches"
  ],
  "supportedResources": [
    {
      "Name": "branches",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}/branches/${BranchName}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDomainAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domains"
  ],
  "supportedResources": [
    {
      "Name": "domains",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}/domains/${DomainName}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "jobs"
  ],
  "supportedResources": [
    {
      "Name": "jobs",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}/branches/${BranchName}/jobs/${JobId}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListApps",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBranches",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDomainAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "branches"
  ],
  "supportedResources": [
    {
      "Name": "branches",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}/branches/${BranchName}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "jobs"
  ],
  "supportedResources": [
    {
      "Name": "jobs",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}/branches/${BranchName}/jobs/${JobId}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "jobs"
  ],
  "supportedResources": [
    {
      "Name": "jobs",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}/branches/${BranchName}/jobs/${JobId}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "apps"
  ],
  "supportedResources": [
    {
      "Name": "apps",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateBranch",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "branches"
  ],
  "supportedResources": [
    {
      "Name": "branches",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}/branches/${BranchName}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateDomainAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "amplify",
  "service": "AWS Amplify",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domains"
  ],
  "supportedResources": [
    {
      "Name": "domains",
      "ARN": "arn:aws:amplify:${Region}:${Account}:apps/${AppId}/domains/${DomainName}",
      "RegEx": "^arn:aws:amplify:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddLayerVersionPermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "layerVersion"
  ],
  "supportedResources": [
    {
      "Name": "layerVersion",
      "ARN": "arn:aws:lambda:${Region}:${Account}:layer:${LayerName}:${LayerVersion}",
      "RegEx": "^arn:aws:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddPermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "lambda:Principal",
      "Type": "String",
      "Description": "The AWS principal."
    }
  ]
}
{
  "name": "CreateAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateEventSourceMapping",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "lambda:Layer",
      "Type": "String",
      "Description": "The ARN of a lambda layer."
    }
  ]
}
{
  "name": "DeleteAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteEventSourceMapping",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "eventSourceMapping"
  ],
  "supportedResources": [
    {
      "Name": "eventSourceMapping",
      "ARN": "arn:aws:lambda:${Region}:${Account}:event-source-mapping:${UUID}",
      "RegEx": "^arn:aws:lambda:[a-zA-Z0-9-]+:\\d{12}:event-source-mapping:[0-9a-fA-F-]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "lambda:FunctionArn",
      "Type": "ARN",
      "Description": "The ARN of a lambda function."
    }
  ]
}
{
  "name": "DeleteFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteFunctionConcurrency",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteLayerVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "layerVersion"
  ],
  "supportedResources": [
    {
      "Name": "layerVersion",
      "ARN": "arn:aws:lambda:${Region}:${Account}:layer:${LayerName}:${LayerVersion}",
      "RegEx": "^arn:aws:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableReplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetAccountSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetEventSourceMapping",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetFunctionConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetLayerVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "layerVersion"
  ],
  "supportedResources": [
    {
      "Name": "layerVersion",
      "ARN": "arn:aws:lambda:${Region}:${Account}:layer:${LayerName}:${LayerVersion}",
      "RegEx": "^arn:aws:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetLayerVersionPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "layerVersion"
  ],
  "supportedResources": [
    {
      "Name": "layerVersion",
      "ARN": "arn:aws:lambda:${Region}:${Account}:layer:${LayerName}:${LayerVersion}",
      "RegEx": "^arn:aws:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "InvokeAsync",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "InvokeFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAliases",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListEventSourceMappings",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListFunctions",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLayerVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLayers",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListVersionsByFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PublishLayerVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "layer"
  ],
  "supportedResources": [
    {
      "Name": "layer",
      "ARN": "arn:aws:lambda:${Region}:${Account}:layer:${LayerName}",
      "RegEx": "^arn:aws:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PublishVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutFunctionConcurrency",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveLayerVersionPermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "layerVersion"
  ],
  "supportedResources": [
    {
      "Name": "layerVersion",
      "ARN": "arn:aws:lambda:${Region}:${Account}:layer:${LayerName}:${LayerVersion}",
      "RegEx": "^arn:aws:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemovePermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "lambda:Principal",
      "Type": "String",
      "Description": "The AWS principal."
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateEventSourceMapping",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateFunctionCode",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateFunctionConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "lambda",
  "service": "AWS Lambda",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "function"
  ],
  "supportedResources": [
    {
      "Name": "function",
      "ARN": "arn:aws:lambda:${Region}:${Account}:function:${FunctionName}",
      "RegEx": "^arn:aws:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "lambda:Layer",
      "Type": "String",
      "Description": "The ARN of a lambda layer."
    }
  ]
}
{
  "name": "DescribeServices",
  "evaluated": false,
  "allowed": false,
  "prefix": "pricing",
  "service": "AWS Price List",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAttributeValues",
  "evaluated": false,
  "allowed": false,
  "prefix": "pricing",
  "service": "AWS Price List",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetProducts",
  "evaluated": false,
  "allowed": false,
  "prefix": "pricing",
  "service": "AWS Price List",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trail"
  ],
  "supportedResources": [
    {
      "Name": "trail",
      "ARN": "arn:aws:cloudtrail:${Region}:${Account}:trail/${TrailName}",
      "RegEx": "^arn:aws:cloudtrail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateTrail",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trail"
  ],
  "supportedResources": [
    {
      "Name": "trail",
      "ARN": "arn:aws:cloudtrail:${Region}:${Account}:trail/${TrailName}",
      "RegEx": "^arn:aws:cloudtrail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTrail",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trail"
  ],
  "supportedResources": [
    {
      "Name": "trail",
      "ARN": "arn:aws:cloudtrail:${Region}:${Account}:trail/${TrailName}",
      "RegEx": "^arn:aws:cloudtrail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeTrails",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetEventSelectors",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTrailStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trail"
  ],
  "supportedResources": [
    {
      "Name": "trail",
      "ARN": "arn:aws:cloudtrail:${Region}:${Account}:trail/${TrailName}",
      "RegEx": "^arn:aws:cloudtrail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListPublicKeys",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trail"
  ],
  "supportedResources": [
    {
      "Name": "trail",
      "ARN": "arn:aws:cloudtrail:${Region}:${Account}:trail/${TrailName}",
      "RegEx": "^arn:aws:cloudtrail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "LookupEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutEventSelectors",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trail"
  ],
  "supportedResources": [
    {
      "Name": "trail",
      "ARN": "arn:aws:cloudtrail:${Region}:${Account}:trail/${TrailName}",
      "RegEx": "^arn:aws:cloudtrail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartLogging",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trail"
  ],
  "supportedResources": [
    {
      "Name": "trail",
      "ARN": "arn:aws:cloudtrail:${Region}:${Account}:trail/${TrailName}",
      "RegEx": "^arn:aws:cloudtrail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopLogging",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trail"
  ],
  "supportedResources": [
    {
      "Name": "trail",
      "ARN": "arn:aws:cloudtrail:${Region}:${Account}:trail/${TrailName}",
      "RegEx": "^arn:aws:cloudtrail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateTrail",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudtrail",
  "service": "AWS CloudTrail",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trail"
  ],
  "supportedResources": [
    {
      "Name": "trail",
      "ARN": "arn:aws:cloudtrail:${Region}:${Account}:trail/${TrailName}",
      "RegEx": "^arn:aws:cloudtrail:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "noResourceARN": "arn:${Partition}:transfer:${region}:${account}:server/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "server"
  ],
  "supportedResources": [
    {
      "Name": "server",
      "ARN": "arn:aws:transfer:${region}:${account}:server/${serverId}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "A key that is present in the request the user makes."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DeleteServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "server"
  ],
  "supportedResources": [
    {
      "Name": "server",
      "ARN": "arn:aws:transfer:${region}:${account}:server/${serverId}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DeleteSshPublicKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:transfer:${region}:${account}:user/${serverId}/${username}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DeleteUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:transfer:${region}:${account}:user/${serverId}/${username}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "server"
  ],
  "supportedResources": [
    {
      "Name": "server",
      "ARN": "arn:aws:transfer:${region}:${account}:server/${serverId}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:transfer:${region}:${account}:user/${serverId}/${username}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "ImportSshPublicKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:transfer:${region}:${account}:user/${serverId}/${username}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "ListServers",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "noResourceARN": "arn:${Partition}:transfer:${region}:${account}:server/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "server",
      "ARN": "arn:aws:transfer:${region}:${account}:server/${serverId}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "user",
      "ARN": "arn:aws:transfer:${region}:${account}:user/${serverId}/${username}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "ListUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "user"
  ],
  "supportedResources": [
    {
      "Name": "user",
      "ARN": "arn:aws:transfer:${region}:${account}:user/${serverId}/${username}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "StartServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "server"
  ],
  "supportedResources": [
    {
      "Name": "server",
      "ARN": "arn:aws:transfer:${region}:${account}:server/${serverId}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "StopServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "server"
  ],
  "supportedResources": [
    {
      "Name": "server",
      "ARN": "arn:aws:transfer:${region}:${account}:server/${serverId}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "server",
      "ARN": "arn:aws:transfer:${region}:${account}:server/${serverId}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "user",
      "ARN": "arn:aws:transfer:${region}:${account}:user/${serverId}/${username}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "A key that is present in the request the user makes."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "TestIdentityProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "server"
  ],
  "supportedResources": [
    {
      "Name": "server",
      "ARN": "arn:aws:transfer:${region}:${account}:server/${serverId}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "server",
      "ARN": "arn:aws:transfer:${region}:${account}:server/${serverId}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "user",
      "ARN": "arn:aws:transfer:${region}:${account}:user/${serverId}/${username}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "A key that is present in the request the user makes."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "UpdateServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "server"
  ],
  "supportedResources": [
    {
      "Name": "server",
      "ARN": "arn:aws:transfer:${region}:${account}:server/${serverId}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "UpdateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "transfer",
  "service": "AWS Transfer for SFTP",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "server",
    "user"
  ],
  "supportedResources": [
    {
      "Name": "server",
      "ARN": "arn:aws:transfer:${region}:${account}:server/${serverId}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    },
    {
      "Name": "user",
      "ARN": "arn:aws:transfer:${region}:${account}:user/${serverId}/${username}",
      "RegEx": "^arn:aws:transfer:.+",
      "ContextKeys": [
        "aws:TagKeys",
        "aws:RequestTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DeleteAlarms",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDashboards",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAlarmHistory",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAlarms",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAlarmsForMetric",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableAlarmActions",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableAlarmActions",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDashboard",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMetricData",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMetricStatistics",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMetricWidgetImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDashboards",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListMetrics",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutDashboard",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutMetricAlarm",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutMetricData",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetAlarmState",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudwatch",
  "service": "Amazon CloudWatch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateAdminAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteNotificationChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeletePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:fms:${Region}:${Account}:policy/${Id}",
      "RegEx": "^arn:aws:fms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateAdminAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAdminAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetComplianceDetail",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:fms:${Region}:${Account}:policy/${Id}",
      "RegEx": "^arn:aws:fms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetNotificationChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:fms:${Region}:${Account}:policy/${Id}",
      "RegEx": "^arn:aws:fms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListComplianceStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:fms:${Region}:${Account}:policy/${Id}",
      "RegEx": "^arn:aws:fms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListMemberAccounts",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutNotificationChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "fms",
  "service": "AWS Firewall Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:fms:${Region}:${Account}:policy/${Id}",
      "RegEx": "^arn:aws:fms:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddAttachmentsToSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddCommunicationToCase",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCase",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAttachment",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCases",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCommunications",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeServices",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSeverityLevels",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTrustedAdvisorCheckRefreshStatuses",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTrustedAdvisorCheckResult",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTrustedAdvisorCheckSummaries",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTrustedAdvisorChecks",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RefreshTrustedAdvisorCheck",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResolveCase",
  "evaluated": false,
  "allowed": false,
  "prefix": "support",
  "service": "AWS Support",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddApplicationInput",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:kinesisanalytics:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:kinesisanalytics:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddApplicationOutput",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:kinesisanalytics:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:kinesisanalytics:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddApplicationReferenceDataSource",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:kinesisanalytics:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:kinesisanalytics:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:kinesisanalytics:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:kinesisanalytics:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteApplicationOutput",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:kinesisanalytics:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:kinesisanalytics:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteApplicationReferenceDataSource",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:kinesisanalytics:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:kinesisanalytics:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:kinesisanalytics:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:kinesisanalytics:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DiscoverInputSchema",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListApplications",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:kinesisanalytics:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:kinesisanalytics:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:kinesisanalytics:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:kinesisanalytics:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisanalytics",
  "service": "Amazon Kinesis Analytics",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:kinesisanalytics:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:kinesisanalytics:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachLoadBalancerTargetGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "autoscaling:TargetGroupARNs",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The ARN of a target group."
    }
  ]
}
{
  "name": "AttachLoadBalancers",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "autoscaling:LoadBalancerNames",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The name of the load balancer."
    }
  ]
}
{
  "name": "BatchDeleteScheduledAction",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchPutScheduledUpdateGroupAction",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CompleteLifecycleAction",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateAutoScalingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The value of a tag associated with the request."
    },
    {
      "Name": "autoscaling:VPCZoneIdentifiers",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The identifier of a VPC zone."
    },
    {
      "Name": "autoscaling:LaunchConfigurationName",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The name of a launch configuration."
    },
    {
      "Name": "autoscaling:LoadBalancerNames",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The name of the load balancer."
    },
    {
      "Name": "autoscaling:MinSize",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The minimum scaling size."
    },
    {
      "Name": "autoscaling:InstanceTypes",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The types of instances, in terms of the hardware resources available."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "Filters create requests based on the presence of mandatory tags in the request."
    },
    {
      "Name": "autoscaling:TargetGroupARNs",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The ARN of a target group."
    },
    {
      "Name": "autoscaling:MaxSize",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The maximum scaling size."
    }
  ]
}
{
  "name": "CreateLaunchConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "launchConfiguration"
  ],
  "supportedResources": [
    {
      "Name": "launchConfiguration",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:launchConfiguration:${Id}:launchConfigurationName/${LaunchConfigurationName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "autoscaling:InstanceType",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The type of instance, in terms of the hardware resources available."
    },
    {
      "Name": "autoscaling:ImageId",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The AMI used to create the instance."
    },
    {
      "Name": "autoscaling:SpotPrice",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The spot price associated with an instance."
    }
  ]
}
{
  "name": "CreateOrUpdateTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The value of a tag associated with the request."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "Filters create requests based on the presence of mandatory tags in the request."
    }
  ]
}
{
  "name": "DeleteAutoScalingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteLaunchConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "launchConfiguration"
  ],
  "supportedResources": [
    {
      "Name": "launchConfiguration",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:launchConfiguration:${Id}:launchConfigurationName/${LaunchConfigurationName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteLifecycleHook",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteNotificationConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteScheduledAction",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The value of a tag associated with the request."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "Filters create requests based on the presence of mandatory tags in the request."
    }
  ]
}
{
  "name": "DescribeAccountLimits",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAdjustmentTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAutoScalingGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAutoScalingInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAutoScalingNotificationTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLaunchConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLifecycleHookTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLifecycleHooks",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLoadBalancerTargetGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLoadBalancers",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeMetricCollectionTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeNotificationConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeScalingActivities",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeScalingProcessTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeScheduledActions",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTerminationPolicyTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetachInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachLoadBalancerTargetGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "autoscaling:TargetGroupARNs",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The ARN of a target group."
    }
  ]
}
{
  "name": "DetachLoadBalancers",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "autoscaling:LoadBalancerNames",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The name of the load balancer."
    }
  ]
}
{
  "name": "DisableMetricsCollection",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableMetricsCollection",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnterStandby",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ExecutePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ExitStandby",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutLifecycleHook",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutNotificationConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutScalingPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutScheduledUpdateGroupAction",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "autoscaling:MinSize",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The minimum scaling size."
    },
    {
      "Name": "autoscaling:MaxSize",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The maximum scaling size."
    }
  ]
}
{
  "name": "RecordLifecycleActionHeartbeat",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ResumeProcesses",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetDesiredCapacity",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetInstanceHealth",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetInstanceProtection",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SuspendProcesses",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TerminateInstanceInAutoScalingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateAutoScalingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling",
  "service": "Amazon EC2 Auto Scaling",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "autoScalingGroup"
  ],
  "supportedResources": [
    {
      "Name": "autoScalingGroup",
      "ARN": "arn:aws:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}",
      "RegEx": "^arn:aws:autoscaling:.+",
      "ContextKeys": [
        "autoscaling:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "autoscaling:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "autoscaling:VPCZoneIdentifiers",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The identifier of a VPC zone."
    },
    {
      "Name": "autoscaling:LaunchConfigurationName",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The name of a launch configuration."
    },
    {
      "Name": "autoscaling:MinSize",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The minimum scaling size."
    },
    {
      "Name": "autoscaling:InstanceTypes",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The types of instances, in terms of the hardware resources available."
    },
    {
      "Name": "autoscaling:MaxSize",
      "Type": "Numeric",
      "DocPageRel": "https://docs.aws.amazon.com/autoscaling/latest/userguide/control-access-using-iam.html#policy-auto-scaling-condition-keys",
      "Description": "The maximum scaling size."
    }
  ]
}
{
  "name": "CreateCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "eks",
  "service": "Amazon Elastic Container Service for Kubernetes",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "eks",
  "service": "Amazon Elastic Container Service for Kubernetes",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:eks:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:eks:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "eks",
  "service": "Amazon Elastic Container Service for Kubernetes",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:eks:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:eks:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeUpdate",
  "evaluated": false,
  "allowed": false,
  "prefix": "eks",
  "service": "Amazon Elastic Container Service for Kubernetes",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:eks:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:eks:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListClusters",
  "evaluated": false,
  "allowed": false,
  "prefix": "eks",
  "service": "Amazon Elastic Container Service for Kubernetes",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListUpdates",
  "evaluated": false,
  "allowed": false,
  "prefix": "eks",
  "service": "Amazon Elastic Container Service for Kubernetes",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:eks:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:eks:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateClusterVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "eks",
  "service": "Amazon Elastic Container Service for Kubernetes",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:eks:${Region}:${Account}:cluster/${ClusterName}",
      "RegEx": "^arn:aws:eks:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateServiceRoleToAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchGetDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:device/${DeviceName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "model"
  ],
  "supportedResources": [
    {
      "Name": "model",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:model/${ModelName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDeviceCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "model"
  ],
  "supportedResources": [
    {
      "Name": "model",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:model/${ModelName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeployProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project",
    "device"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    },
    {
      "Name": "device",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:device/${DeviceName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:device/${DeviceName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetAssociatedResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDeploymentStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:device/${DeviceName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "model"
  ],
  "supportedResources": [
    {
      "Name": "model",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:model/${ModelName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ImportProjectFromTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDeployments",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDevices",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListModels",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListProjects",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:device/${DeviceName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "deeplens",
  "service": "AWS DeepLens",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:deeplens:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:deeplens:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateNode",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateBackup",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteBackup",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAccountAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeBackups",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeNodeAssociationStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeServers",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateNode",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RestoreServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartMaintenance",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateServerEngineAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "opsworks-cm",
  "service": "AWS OpsWorks Configuration Management",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateByteMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bytematchset"
  ],
  "supportedResources": [
    {
      "Name": "bytematchset",
      "ARN": "arn:aws:waf::${Account}:bytematchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateGeoMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "geomatchset"
  ],
  "supportedResources": [
    {
      "Name": "geomatchset",
      "ARN": "arn:aws:waf::${Account}:geomatchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateIPSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ipset"
  ],
  "supportedResources": [
    {
      "Name": "ipset",
      "ARN": "arn:aws:waf::${Account}:ipset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRateBasedRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ratebasedrule"
  ],
  "supportedResources": [
    {
      "Name": "ratebasedrule",
      "ARN": "arn:aws:waf::${Account}:ratebasedrule/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRegexMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexmatchset"
  ],
  "supportedResources": [
    {
      "Name": "regexmatchset",
      "ARN": "arn:aws:waf::${Account}:regexmatch/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRegexPatternSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexpatternset"
  ],
  "supportedResources": [
    {
      "Name": "regexpatternset",
      "ARN": "arn:aws:waf::${Account}:regexpatternset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:waf::${Account}:rule/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRuleGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf::${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSizeConstraintSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sizeconstraintset"
  ],
  "supportedResources": [
    {
      "Name": "sizeconstraintset",
      "ARN": "arn:aws:waf::${Account}:sizeconstraintset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSqlInjectionMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sqlinjectionmatchset"
  ],
  "supportedResources": [
    {
      "Name": "sqlinjectionmatchset",
      "ARN": "arn:aws:waf::${Account}:sqlinjectionmatchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateWebACL",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webacl"
  ],
  "supportedResources": [
    {
      "Name": "webacl",
      "ARN": "arn:aws:waf::${Account}:webacl/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateXssMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "xssmatchset"
  ],
  "supportedResources": [
    {
      "Name": "xssmatchset",
      "ARN": "arn:aws:waf::${Account}:xssmatchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteByteMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bytematchset"
  ],
  "supportedResources": [
    {
      "Name": "bytematchset",
      "ARN": "arn:aws:waf::${Account}:bytematchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteGeoMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "geomatchset"
  ],
  "supportedResources": [
    {
      "Name": "geomatchset",
      "ARN": "arn:aws:waf::${Account}:geomatchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteIPSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ipset"
  ],
  "supportedResources": [
    {
      "Name": "ipset",
      "ARN": "arn:aws:waf::${Account}:ipset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePermissionPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf::${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRateBasedRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ratebasedrule"
  ],
  "supportedResources": [
    {
      "Name": "ratebasedrule",
      "ARN": "arn:aws:waf::${Account}:ratebasedrule/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRegexMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexmatchset"
  ],
  "supportedResources": [
    {
      "Name": "regexmatchset",
      "ARN": "arn:aws:waf::${Account}:regexmatch/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRegexPatternSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexpatternset"
  ],
  "supportedResources": [
    {
      "Name": "regexpatternset",
      "ARN": "arn:aws:waf::${Account}:regexpatternset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:waf::${Account}:rule/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRuleGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf::${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSizeConstraintSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sizeconstraintset"
  ],
  "supportedResources": [
    {
      "Name": "sizeconstraintset",
      "ARN": "arn:aws:waf::${Account}:sizeconstraintset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSqlInjectionMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sqlinjectionmatchset"
  ],
  "supportedResources": [
    {
      "Name": "sqlinjectionmatchset",
      "ARN": "arn:aws:waf::${Account}:sqlinjectionmatchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteWebACL",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webacl"
  ],
  "supportedResources": [
    {
      "Name": "webacl",
      "ARN": "arn:aws:waf::${Account}:webacl/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteXssMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "xssmatchset"
  ],
  "supportedResources": [
    {
      "Name": "xssmatchset",
      "ARN": "arn:aws:waf::${Account}:xssmatchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetByteMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bytematchset"
  ],
  "supportedResources": [
    {
      "Name": "bytematchset",
      "ARN": "arn:aws:waf::${Account}:bytematchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetChangeToken",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetChangeTokenStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGeoMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "geomatchset"
  ],
  "supportedResources": [
    {
      "Name": "geomatchset",
      "ARN": "arn:aws:waf::${Account}:geomatchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetIPSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ipset"
  ],
  "supportedResources": [
    {
      "Name": "ipset",
      "ARN": "arn:aws:waf::${Account}:ipset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPermissionPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf::${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRateBasedRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ratebasedrule"
  ],
  "supportedResources": [
    {
      "Name": "ratebasedrule",
      "ARN": "arn:aws:waf::${Account}:ratebasedrule/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRateBasedRuleManagedKeys",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ratebasedrule"
  ],
  "supportedResources": [
    {
      "Name": "ratebasedrule",
      "ARN": "arn:aws:waf::${Account}:ratebasedrule/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRegexMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexmatchset"
  ],
  "supportedResources": [
    {
      "Name": "regexmatchset",
      "ARN": "arn:aws:waf::${Account}:regexmatch/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRegexPatternSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexpatternset"
  ],
  "supportedResources": [
    {
      "Name": "regexpatternset",
      "ARN": "arn:aws:waf::${Account}:regexpatternset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:waf::${Account}:rule/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRuleGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf::${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSampledRequests",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:waf::${Account}:rule/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": false
    },
    {
      "Name": "webacl",
      "ARN": "arn:aws:waf::${Account}:webacl/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSizeConstraintSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sizeconstraintset"
  ],
  "supportedResources": [
    {
      "Name": "sizeconstraintset",
      "ARN": "arn:aws:waf::${Account}:sizeconstraintset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSqlInjectionMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sqlinjectionmatchset"
  ],
  "supportedResources": [
    {
      "Name": "sqlinjectionmatchset",
      "ARN": "arn:aws:waf::${Account}:sqlinjectionmatchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetWebACL",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webacl"
  ],
  "supportedResources": [
    {
      "Name": "webacl",
      "ARN": "arn:aws:waf::${Account}:webacl/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetXssMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "xssmatchset"
  ],
  "supportedResources": [
    {
      "Name": "xssmatchset",
      "ARN": "arn:aws:waf::${Account}:xssmatchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListActivatedRulesInRuleGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListByteMatchSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGeoMatchSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListIPSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRateBasedRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRegexMatchSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRegexPatternSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRuleGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSizeConstraintSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSqlInjectionMatchSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSubscribedRuleGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListWebACLs",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListXssMatchSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutPermissionPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf::${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateByteMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "bytematchset"
  ],
  "supportedResources": [
    {
      "Name": "bytematchset",
      "ARN": "arn:aws:waf::${Account}:bytematchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateGeoMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "geomatchset"
  ],
  "supportedResources": [
    {
      "Name": "geomatchset",
      "ARN": "arn:aws:waf::${Account}:geomatchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateIPSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ipset"
  ],
  "supportedResources": [
    {
      "Name": "ipset",
      "ARN": "arn:aws:waf::${Account}:ipset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRateBasedRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "ratebasedrule"
  ],
  "supportedResources": [
    {
      "Name": "ratebasedrule",
      "ARN": "arn:aws:waf::${Account}:ratebasedrule/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRegexMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexmatchset"
  ],
  "supportedResources": [
    {
      "Name": "regexmatchset",
      "ARN": "arn:aws:waf::${Account}:regexmatch/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRegexPatternSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "regexpatternset"
  ],
  "supportedResources": [
    {
      "Name": "regexpatternset",
      "ARN": "arn:aws:waf::${Account}:regexpatternset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:waf::${Account}:rule/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRuleGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rulegroup"
  ],
  "supportedResources": [
    {
      "Name": "rulegroup",
      "ARN": "arn:aws:waf::${Account}:rulegroup/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSizeConstraintSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sizeconstraintset"
  ],
  "supportedResources": [
    {
      "Name": "sizeconstraintset",
      "ARN": "arn:aws:waf::${Account}:sizeconstraintset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSqlInjectionMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "sqlinjectionmatchset"
  ],
  "supportedResources": [
    {
      "Name": "sqlinjectionmatchset",
      "ARN": "arn:aws:waf::${Account}:sqlinjectionmatchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateWebACL",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webacl"
  ],
  "supportedResources": [
    {
      "Name": "webacl",
      "ARN": "arn:aws:waf::${Account}:webacl/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateXssMatchSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "waf",
  "service": "AWS WAF",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "xssmatchset"
  ],
  "supportedResources": [
    {
      "Name": "xssmatchset",
      "ARN": "arn:aws:waf::${Account}:xssmatchset/${Id}",
      "RegEx": "^arn:aws:waf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "Subscribe",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Unsubscribe",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ViewSubscriptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ApproveAssignment",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ApproveRejectedAssignment",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssignQualification",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BlockWorker",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ChangeHITTypeOfHIT",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateHIT",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateQualificationType",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableHIT",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisposeHIT",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisposeQualificationType",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ExtendHIT",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ForceExpireHIT",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAccountBalance",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAssignment",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAssignmentsForHIT",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBlockedWorkers",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBonusPayments",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetFileUploadURL",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetHIT",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetHITsForQualificationType",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetQualificationRequests",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetQualificationScore",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetQualificationType",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetQualificationsForQualificationType",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetRequesterStatistic",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetRequesterWorkerStatistic",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetReviewResultsForHIT",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetReviewableHITs",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GrantBonus",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GrantQualification",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "NotifyWorkers",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterHITType",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RejectAssignment",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RejectQualificationRequest",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RevokeQualification",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchHITs",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchQualificationTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendTestEventNotification",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetHITAsReviewing",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetHITTypeNotification",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UnblockWorker",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateQualificationScore",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateQualificationType",
  "evaluated": false,
  "allowed": false,
  "prefix": "mechanicalturk",
  "service": "Amazon Mechanical Turk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "connect",
  "service": "Amazon Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "connect",
  "service": "Amazon Connect",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:connect::${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:connect:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DestroyInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "connect",
  "service": "Amazon Connect",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:connect::${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:connect:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCurrentMetricData",
  "evaluated": false,
  "allowed": false,
  "prefix": "connect",
  "service": "Amazon Connect",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:connect::${Account}:instance/${InstanceId}/queue/${QueueId}",
      "RegEx": "^arn:aws:connect:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetFederationToken",
  "evaluated": false,
  "allowed": false,
  "prefix": "connect",
  "service": "Amazon Connect",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:connect::${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:connect:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetFederationTokens",
  "evaluated": false,
  "allowed": false,
  "prefix": "connect",
  "service": "Amazon Connect",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:connect::${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:connect:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetMetricData",
  "evaluated": false,
  "allowed": false,
  "prefix": "connect",
  "service": "Amazon Connect",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:connect::${Account}:instance/${InstanceId}/queue/${QueueId}",
      "RegEx": "^arn:aws:connect:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "connect",
  "service": "Amazon Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "connect",
  "service": "Amazon Connect",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:connect::${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:connect:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartOutboundVoiceContact",
  "evaluated": false,
  "allowed": false,
  "prefix": "connect",
  "service": "Amazon Connect",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "contact"
  ],
  "supportedResources": [
    {
      "Name": "contact",
      "ARN": "arn:aws:connect::${Account}:instance/${InstanceId}/contact/${ContactId}",
      "RegEx": "^arn:aws:connect:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopContact",
  "evaluated": false,
  "allowed": false,
  "prefix": "connect",
  "service": "Amazon Connect",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "contact"
  ],
  "supportedResources": [
    {
      "Name": "contact",
      "ARN": "arn:aws:connect::${Account}:instance/${InstanceId}/contact/${ContactId}",
      "RegEx": "^arn:aws:connect:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchDeleteBuilds",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codebuild:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:codebuild:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetBuilds",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codebuild:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:codebuild:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetProjects",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codebuild:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:codebuild:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codebuild:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:codebuild:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateWebhook",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codebuild:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:codebuild:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSourceCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteWebhook",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ImportSourceCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "InvalidateProjectCache",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBuilds",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBuildsForProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codebuild:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:codebuild:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListConnectedOAuthAccounts",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCuratedEnvironmentImages",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListProjects",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRepositories",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSourceCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PersistOAuthToken",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartBuild",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codebuild:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:codebuild:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopBuild",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codebuild:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:codebuild:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codebuild:${Region}:${Account}:project/${ProjectName}",
      "RegEx": "^arn:aws:codebuild:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateWebhook",
  "evaluated": false,
  "allowed": false,
  "prefix": "codebuild",
  "service": "AWS CodeBuild",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeletePlaybackConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediatailor",
  "service": "AWS Elemental MediaTailor",
  "serviceAware": false,
  "resourceEnabled": true,
  "deniedByOrganization": false
}
{
  "name": "GetPlaybackConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediatailor",
  "service": "AWS Elemental MediaTailor",
  "serviceAware": false,
  "resourceEnabled": true,
  "deniedByOrganization": false
}
{
  "name": "ListPlaybackConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediatailor",
  "service": "AWS Elemental MediaTailor",
  "serviceAware": false,
  "resourceEnabled": true,
  "deniedByOrganization": false
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediatailor",
  "service": "AWS Elemental MediaTailor",
  "serviceAware": false,
  "resourceEnabled": true,
  "deniedByOrganization": false
}
{
  "name": "PutPlaybackConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediatailor",
  "service": "AWS Elemental MediaTailor",
  "serviceAware": false,
  "resourceEnabled": true,
  "deniedByOrganization": false
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediatailor",
  "service": "AWS Elemental MediaTailor",
  "serviceAware": false,
  "resourceEnabled": true,
  "deniedByOrganization": false
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediatailor",
  "service": "AWS Elemental MediaTailor",
  "serviceAware": false,
  "resourceEnabled": true,
  "deniedByOrganization": false
}
{
  "name": "AcceptCertificateTransfer",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddThingToBillingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "billinggroup",
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "billinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:billinggroup/${BillingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddThingToThingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thinggroup",
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:thinggroup/${ThingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateTargetsWithJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job",
    "thinggroup",
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "job",
      "ARN": "arn:aws:iot:${Region}:${Account}:job/${JobId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "thinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:thinggroup/${ThingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "thinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:thinggroup/${ThingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": false
    },
    {
      "Name": "cert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cert/${Certificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachPrincipalPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "cert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cert/${Certificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachThingPrincipal",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelCertificateTransfer",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job"
  ],
  "supportedResources": [
    {
      "Name": "job",
      "ARN": "arn:aws:iot:${Region}:${Account}:job/${JobId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelJobExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job",
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "job",
      "ARN": "arn:aws:iot:${Region}:${Account}:job/${JobId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ClearDefaultAuthorizer",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Connect",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "client"
  ],
  "supportedResources": [
    {
      "Name": "client",
      "ARN": "arn:aws:iot:${Region}:${Account}:client/${ClientId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateAuthorizer",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "authorizer"
  ],
  "supportedResources": [
    {
      "Name": "authorizer",
      "ARN": "arn:aws:iot:${Region}:${Account}:authorizer/${AuthorizerName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateBillingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "billinggroup"
  ],
  "supportedResources": [
    {
      "Name": "billinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:billinggroup/${BillingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCertificateFromCsr",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thinggroup",
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:thinggroup/${ThingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateKeysAndCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateOTAUpdate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePolicyVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iot:${Region}:${Account}:policy/${PolicyName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRoleAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rolealias",
    "role"
  ],
  "supportedResources": [
    {
      "Name": "rolealias",
      "ARN": "arn:aws:iot:${Region}:${Account}:rolealias/${RoleAlias}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${Role}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateThing",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "billinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:billinggroup/${BillingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateThingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thinggroup"
  ],
  "supportedResources": [
    {
      "Name": "thinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:thinggroup/${ThingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateThingType",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thingtype"
  ],
  "supportedResources": [
    {
      "Name": "thingtype",
      "ARN": "arn:aws:iot:${Region}:${Account}:thingtype/${ThingTypeName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateTopicRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAuthorizer",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "authorizer"
  ],
  "supportedResources": [
    {
      "Name": "authorizer",
      "ARN": "arn:aws:iot:${Region}:${Account}:authorizer/${AuthorizerName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteBillingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "billinggroup"
  ],
  "supportedResources": [
    {
      "Name": "billinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:billinggroup/${BillingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteCACertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cacert"
  ],
  "supportedResources": [
    {
      "Name": "cacert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cacert/${CACertificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cert"
  ],
  "supportedResources": [
    {
      "Name": "cert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cert/${Certificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job"
  ],
  "supportedResources": [
    {
      "Name": "job",
      "ARN": "arn:aws:iot:${Region}:${Account}:job/${JobId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteJobExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job",
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "job",
      "ARN": "arn:aws:iot:${Region}:${Account}:job/${JobId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteOTAUpdate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "otaupdate"
  ],
  "supportedResources": [
    {
      "Name": "otaupdate",
      "ARN": "arn:aws:iot:${Region}:${Account}:otaupdate/${otaUpdateId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iot:${Region}:${Account}:policy/${PolicyName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePolicyVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iot:${Region}:${Account}:policy/${PolicyName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRegistrationCode",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteRoleAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rolealias"
  ],
  "supportedResources": [
    {
      "Name": "rolealias",
      "ARN": "arn:aws:iot:${Region}:${Account}:rolealias/${RoleAlias}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:iot:${Region}:${Account}:stream/${streamId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteThing",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteThingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thinggroup"
  ],
  "supportedResources": [
    {
      "Name": "thinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:thinggroup/${ThingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteThingShadow",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteThingType",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thingtype"
  ],
  "supportedResources": [
    {
      "Name": "thingtype",
      "ARN": "arn:aws:iot:${Region}:${Account}:thingtype/${ThingTypeName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTopicRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteV2LoggingLevel",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeprecateThingType",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thingtype"
  ],
  "supportedResources": [
    {
      "Name": "thingtype",
      "ARN": "arn:aws:iot:${Region}:${Account}:thingtype/${ThingTypeName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAuthorizer",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "authorizer"
  ],
  "supportedResources": [
    {
      "Name": "authorizer",
      "ARN": "arn:aws:iot:${Region}:${Account}:authorizer/${AuthorizerName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeBillingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "billinggroup"
  ],
  "supportedResources": [
    {
      "Name": "billinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:billinggroup/${BillingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCACertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cacert"
  ],
  "supportedResources": [
    {
      "Name": "cacert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cacert/${CACertificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cert"
  ],
  "supportedResources": [
    {
      "Name": "cert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cert/${Certificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDefaultAuthorizer",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEventConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeIndex",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "index"
  ],
  "supportedResources": [
    {
      "Name": "index",
      "ARN": "arn:aws:iot:${Region}:${Account}:index/${IndexName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job"
  ],
  "supportedResources": [
    {
      "Name": "job",
      "ARN": "arn:aws:iot:${Region}:${Account}:job/${JobId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeJobExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "job",
      "ARN": "arn:aws:iot:${Region}:${Account}:job/${JobId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": false
    },
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeRoleAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rolealias"
  ],
  "supportedResources": [
    {
      "Name": "rolealias",
      "ARN": "arn:aws:iot:${Region}:${Account}:rolealias/${RoleAlias}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:iot:${Region}:${Account}:stream/${streamId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeThing",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeThingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thinggroup"
  ],
  "supportedResources": [
    {
      "Name": "thinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:thinggroup/${ThingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeThingRegistrationTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeThingType",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thingtype"
  ],
  "supportedResources": [
    {
      "Name": "thingtype",
      "ARN": "arn:aws:iot:${Region}:${Account}:thingtype/${ThingTypeName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "thinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:thinggroup/${ThingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": false
    },
    {
      "Name": "cert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cert/${Certificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachPrincipalPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "cert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cert/${Certificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachThingPrincipal",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableTopicRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableTopicRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetEffectivePolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "cert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cert/${Certificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetIndexingConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetJobDocument",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job"
  ],
  "supportedResources": [
    {
      "Name": "job",
      "ARN": "arn:aws:iot:${Region}:${Account}:job/${JobId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetLoggingOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetOTAUpdate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "otaupdate"
  ],
  "supportedResources": [
    {
      "Name": "otaupdate",
      "ARN": "arn:aws:iot:${Region}:${Account}:otaupdate/${otaUpdateId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPendingJobExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iot:${Region}:${Account}:policy/${PolicyName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPolicyVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iot:${Region}:${Account}:policy/${PolicyName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRegistrationCode",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetThingShadow",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetTopicRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetV2LoggingOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAttachedPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAuthorizers",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBillingGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCACertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCertificatesByCA",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListIndices",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListJobExecutionsForJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job"
  ],
  "supportedResources": [
    {
      "Name": "job",
      "ARN": "arn:aws:iot:${Region}:${Account}:job/${JobId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListJobExecutionsForThing",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListOTAUpdates",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListOutgoingCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPolicyPrincipals",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPolicyVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPrincipalPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPrincipalThings",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRoleAliases",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListStreams",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTargetsForPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iot:${Region}:${Account}:policy/${PolicyName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListThingGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListThingGroupsForThing",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListThingPrincipals",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListThingRegistrationTaskReports",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListThingRegistrationTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListThingTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListThings",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListThingsInBillingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "billinggroup"
  ],
  "supportedResources": [
    {
      "Name": "billinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:billinggroup/${BillingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListThingsInThingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thinggroup"
  ],
  "supportedResources": [
    {
      "Name": "thinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:thinggroup/${ThingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTopicRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListV2LoggingLevels",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Publish",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topic"
  ],
  "supportedResources": [
    {
      "Name": "topic",
      "ARN": "arn:aws:iot:${Region}:${Account}:topic/${TopicName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "Receive",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topic"
  ],
  "supportedResources": [
    {
      "Name": "topic",
      "ARN": "arn:aws:iot:${Region}:${Account}:topic/${TopicName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterCACertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterThing",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RejectCertificateTransfer",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cert"
  ],
  "supportedResources": [
    {
      "Name": "cert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cert/${Certificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveThingFromBillingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "billinggroup",
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "billinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:billinggroup/${BillingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveThingFromThingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thinggroup",
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:thinggroup/${ThingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ReplaceTopicRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchIndex",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "index"
  ],
  "supportedResources": [
    {
      "Name": "index",
      "ARN": "arn:aws:iot:${Region}:${Account}:index/${IndexName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetDefaultAuthorizer",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "authorizer"
  ],
  "supportedResources": [
    {
      "Name": "authorizer",
      "ARN": "arn:aws:iot:${Region}:${Account}:authorizer/${AuthorizerName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetDefaultPolicyVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:iot:${Region}:${Account}:policy/${PolicyName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetLoggingOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetV2LoggingLevel",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetV2LoggingOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartNextPendingJobExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartThingRegistrationTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopThingRegistrationTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Subscribe",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "topicfilter"
  ],
  "supportedResources": [
    {
      "Name": "topicfilter",
      "ARN": "arn:aws:iot:${Region}:${Account}:topicfilter/${TopicFilter}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TestAuthorization",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "cert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cert/${Certificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TestInvokeAuthorizer",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "authorizer"
  ],
  "supportedResources": [
    {
      "Name": "authorizer",
      "ARN": "arn:aws:iot:${Region}:${Account}:authorizer/${AuthorizerName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TransferCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cert"
  ],
  "supportedResources": [
    {
      "Name": "cert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cert/${Certificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateAuthorizer",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "authorizer"
  ],
  "supportedResources": [
    {
      "Name": "authorizer",
      "ARN": "arn:aws:iot:${Region}:${Account}:authorizer/${AuthorizerName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateBillingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "billinggroup"
  ],
  "supportedResources": [
    {
      "Name": "billinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:billinggroup/${BillingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateCACertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cacert"
  ],
  "supportedResources": [
    {
      "Name": "cacert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cacert/${CACertificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cert"
  ],
  "supportedResources": [
    {
      "Name": "cert",
      "ARN": "arn:aws:iot:${Region}:${Account}:cert/${Certificate}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateEventConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateIndexingConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job"
  ],
  "supportedResources": [
    {
      "Name": "job",
      "ARN": "arn:aws:iot:${Region}:${Account}:job/${JobId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateJobExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRoleAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rolealias"
  ],
  "supportedResources": [
    {
      "Name": "rolealias",
      "ARN": "arn:aws:iot:${Region}:${Account}:rolealias/${RoleAlias}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "role",
      "ARN": "arn:aws:iam::${Account}:role/${Role}",
      "RegEx": "^arn:aws:iam:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:iot:${Region}:${Account}:stream/${streamId}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateThing",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateThingGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thinggroup"
  ],
  "supportedResources": [
    {
      "Name": "thinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:thinggroup/${ThingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateThingGroupsForThing",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    },
    {
      "Name": "thinggroup",
      "ARN": "arn:aws:iot:${Region}:${Account}:thinggroup/${ThingGroupName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateThingShadow",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot",
  "service": "AWS IoT",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "thing"
  ],
  "supportedResources": [
    {
      "Name": "thing",
      "ARN": "arn:aws:iot:${Region}:${Account}:thing/${ThingName}",
      "RegEx": "^arn:aws:iot:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddTagsToCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate"
  ],
  "supportedResources": [
    {
      "Name": "certificate",
      "ARN": "arn:aws:acm:${Region}:${Account}:certificate/${CertificateId}",
      "RegEx": "^arn:aws:acm:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate"
  ],
  "supportedResources": [
    {
      "Name": "certificate",
      "ARN": "arn:aws:acm:${Region}:${Account}:certificate/${CertificateId}",
      "RegEx": "^arn:aws:acm:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate"
  ],
  "supportedResources": [
    {
      "Name": "certificate",
      "ARN": "arn:aws:acm:${Region}:${Account}:certificate/${CertificateId}",
      "RegEx": "^arn:aws:acm:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ExportCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate"
  ],
  "supportedResources": [
    {
      "Name": "certificate",
      "ARN": "arn:aws:acm:${Region}:${Account}:certificate/${CertificateId}",
      "RegEx": "^arn:aws:acm:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate"
  ],
  "supportedResources": [
    {
      "Name": "certificate",
      "ARN": "arn:aws:acm:${Region}:${Account}:certificate/${CertificateId}",
      "RegEx": "^arn:aws:acm:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ImportCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate"
  ],
  "supportedResources": [
    {
      "Name": "certificate",
      "ARN": "arn:aws:acm:${Region}:${Account}:certificate/${CertificateId}",
      "RegEx": "^arn:aws:acm:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveTagsFromCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate"
  ],
  "supportedResources": [
    {
      "Name": "certificate",
      "ARN": "arn:aws:acm:${Region}:${Account}:certificate/${CertificateId}",
      "RegEx": "^arn:aws:acm:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RenewCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RequestCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResendValidationEmail",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate"
  ],
  "supportedResources": [
    {
      "Name": "certificate",
      "ARN": "arn:aws:acm:${Region}:${Account}:certificate/${CertificateId}",
      "RegEx": "^arn:aws:acm:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateCertificateOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm",
  "service": "AWS Certificate Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate"
  ],
  "supportedResources": [
    {
      "Name": "certificate",
      "ARN": "arn:aws:acm:${Region}:${Account}:certificate/${CertificateId}",
      "RegEx": "^arn:aws:acm:.+:[0-9]+:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "InvalidateCache",
  "evaluated": false,
  "allowed": false,
  "prefix": "execute-api",
  "service": "Amazon API Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "execute-api-general"
  ],
  "supportedResources": [
    {
      "Name": "execute-api-general",
      "ARN": "arn:aws:execute-api:${Region}:${Account}:${ApiId}/${Stage}/${Method}/${ApiSpecificResourcePath}",
      "RegEx": "^arn:aws:execute-api:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "Invoke",
  "evaluated": false,
  "allowed": false,
  "prefix": "execute-api",
  "service": "Amazon API Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "execute-api-general"
  ],
  "supportedResources": [
    {
      "Name": "execute-api-general",
      "ARN": "arn:aws:execute-api:${Region}:${Account}:${ApiId}/${Stage}/${Method}/${ApiSpecificResourcePath}",
      "RegEx": "^arn:aws:execute-api:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "kafka",
  "service": "Amazon Managed Streaming for Kafka",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "kafka",
  "service": "Amazon Managed Streaming for Kafka",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "kafka",
  "service": "Amazon Managed Streaming for Kafka",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetBootstrapBrokers",
  "evaluated": false,
  "allowed": false,
  "prefix": "kafka",
  "service": "Amazon Managed Streaming for Kafka",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListClusters",
  "evaluated": false,
  "allowed": false,
  "prefix": "kafka",
  "service": "Amazon Managed Streaming for Kafka",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListNodes",
  "evaluated": false,
  "allowed": false,
  "prefix": "kafka",
  "service": "Amazon Managed Streaming for Kafka",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddTagsToResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateReplicationInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateReplicationSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateReplicationTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteEventSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteReplicationInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteReplicationSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteReplicationTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAccountAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConnections",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEndpointTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEndpoints",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEventCategories",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEventSubscriptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeOrderableReplicationInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeRefreshSchemasStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReplicationInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReplicationSubnetGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReplicationTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSchemas",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTableStatistics",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyEventSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyReplicationInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyReplicationSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyReplicationTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RefreshSchemas",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveTagsFromResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartReplicationTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopReplicationTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TestConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "dms",
  "service": "AWS Database Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateReplicationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAppLaunchConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAppReplicationConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteReplicationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteServerCatalog",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateConnectors",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GenerateChangeSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GenerateTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAppLaunchConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAppReplicationConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetConnectors",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetReplicationJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetReplicationRuns",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetServers",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ImportServerCatalog",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "LaunchApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListApps",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutAppLaunchConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutAppReplicationConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartAppReplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartOnDemandReplicationRun",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopAppReplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TerminateApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApp",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateReplicationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sms",
  "service": "AWS Server Migration Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workteam",
    "endpoint",
    "transform-job",
    "labeling-job",
    "notebook-instance",
    "hyper-parameter-tuning-job",
    "training-job",
    "model",
    "endpoint-config",
    "compilation-job"
  ],
  "supportedResources": [
    {
      "Name": "workteam",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:workteam/${WorkteamName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "endpoint",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint/${EndpointName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "transform-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:transform-job/${TransformJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "labeling-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:labeling-job/${LabelingJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "notebook-instance",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:notebook-instance/${NotebookInstanceName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "hyper-parameter-tuning-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:hyper-parameter-tuning-job/${HyperParameterTuningJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "training-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:training-job/${TrainingJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "model",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:model/${ModelName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "endpoint-config",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint-config/${EndpointConfigName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "compilation-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:compilation-job/${CompilationJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateAlgorithm",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "algorithm"
  ],
  "supportedResources": [
    {
      "Name": "algorithm",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:algorithm/${AlgorithmName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCodeRepository",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "code-repository"
  ],
  "supportedResources": [
    {
      "Name": "code-repository",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:code-repository/${CodeRepositoryName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCompilationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "compilation-job"
  ],
  "supportedResources": [
    {
      "Name": "compilation-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:compilation-job/${CompilationJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "CreateEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpoint"
  ],
  "supportedResources": [
    {
      "Name": "endpoint",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint/${EndpointName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "CreateEndpointConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpoint-config"
  ],
  "supportedResources": [
    {
      "Name": "endpoint-config",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint-config/${EndpointConfigName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "CreateHyperParameterTuningJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hyper-parameter-tuning-job"
  ],
  "supportedResources": [
    {
      "Name": "hyper-parameter-tuning-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:hyper-parameter-tuning-job/${HyperParameterTuningJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "CreateLabelingJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "labeling-job"
  ],
  "supportedResources": [
    {
      "Name": "labeling-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:labeling-job/${LabelingJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "CreateModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "model"
  ],
  "supportedResources": [
    {
      "Name": "model",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:model/${ModelName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "CreateModelPackage",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "model-package"
  ],
  "supportedResources": [
    {
      "Name": "model-package",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:model-package/${ModelPackageName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateNotebookInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "notebook-instance"
  ],
  "supportedResources": [
    {
      "Name": "notebook-instance",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:notebook-instance/${NotebookInstanceName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "CreateNotebookInstanceLifecycleConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "notebook-instance-lifecycle-config"
  ],
  "supportedResources": [
    {
      "Name": "notebook-instance-lifecycle-config",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:notebook-instance-lifecycle-config/${NotebookInstanceLifecycleConfigName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreatePresignedNotebookInstanceUrl",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "notebook-instance"
  ],
  "supportedResources": [
    {
      "Name": "notebook-instance",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:notebook-instance/${NotebookInstanceName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "CreateTrainingJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "training-job"
  ],
  "supportedResources": [
    {
      "Name": "training-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:training-job/${TrainingJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "CreateTransformJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transform-job"
  ],
  "supportedResources": [
    {
      "Name": "transform-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:transform-job/${TransformJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "CreateWorkteam",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workteam"
  ],
  "supportedResources": [
    {
      "Name": "workteam",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:workteam/${WorkteamName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DeleteAlgorithm",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "algorithm"
  ],
  "supportedResources": [
    {
      "Name": "algorithm",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:algorithm/${AlgorithmName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteCodeRepository",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "code-repository"
  ],
  "supportedResources": [
    {
      "Name": "code-repository",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:code-repository/${CodeRepositoryName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpoint"
  ],
  "supportedResources": [
    {
      "Name": "endpoint",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint/${EndpointName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DeleteEndpointConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpoint-config"
  ],
  "supportedResources": [
    {
      "Name": "endpoint-config",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint-config/${EndpointConfigName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DeleteModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "model"
  ],
  "supportedResources": [
    {
      "Name": "model",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:model/${ModelName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DeleteModelPackage",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "model-package"
  ],
  "supportedResources": [
    {
      "Name": "model-package",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:model-package/${ModelPackageName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteNotebookInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "notebook-instance"
  ],
  "supportedResources": [
    {
      "Name": "notebook-instance",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:notebook-instance/${NotebookInstanceName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DeleteNotebookInstanceLifecycleConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "notebook-instance-lifecycle-config"
  ],
  "supportedResources": [
    {
      "Name": "notebook-instance-lifecycle-config",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:notebook-instance-lifecycle-config/${NotebookInstanceLifecycleConfigName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpoint",
    "workteam",
    "transform-job",
    "labeling-job",
    "notebook-instance",
    "hyper-parameter-tuning-job",
    "training-job",
    "model",
    "endpoint-config",
    "compilation-job"
  ],
  "supportedResources": [
    {
      "Name": "endpoint",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint/${EndpointName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "workteam",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:workteam/${WorkteamName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "transform-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:transform-job/${TransformJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "labeling-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:labeling-job/${LabelingJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "notebook-instance",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:notebook-instance/${NotebookInstanceName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "hyper-parameter-tuning-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:hyper-parameter-tuning-job/${HyperParameterTuningJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "training-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:training-job/${TrainingJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "model",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:model/${ModelName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "endpoint-config",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint-config/${EndpointConfigName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    },
    {
      "Name": "compilation-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:compilation-job/${CompilationJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteWorkteam",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workteam"
  ],
  "supportedResources": [
    {
      "Name": "workteam",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:workteam/${WorkteamName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeAlgorithm",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "algorithm"
  ],
  "supportedResources": [
    {
      "Name": "algorithm",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:algorithm/${AlgorithmName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCodeRepository",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "code-repository"
  ],
  "supportedResources": [
    {
      "Name": "code-repository",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:code-repository/${CodeRepositoryName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCompilationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "compilation-job"
  ],
  "supportedResources": [
    {
      "Name": "compilation-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:compilation-job/${CompilationJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpoint"
  ],
  "supportedResources": [
    {
      "Name": "endpoint",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint/${EndpointName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeEndpointConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpoint-config"
  ],
  "supportedResources": [
    {
      "Name": "endpoint-config",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint-config/${EndpointConfigName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeHyperParameterTuningJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hyper-parameter-tuning-job"
  ],
  "supportedResources": [
    {
      "Name": "hyper-parameter-tuning-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:hyper-parameter-tuning-job/${HyperParameterTuningJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeLabelingJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "labeling-job"
  ],
  "supportedResources": [
    {
      "Name": "labeling-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:labeling-job/${LabelingJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeModel",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "model"
  ],
  "supportedResources": [
    {
      "Name": "model",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:model/${ModelName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeModelPackage",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "model-package"
  ],
  "supportedResources": [
    {
      "Name": "model-package",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:model-package/${ModelPackageName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeNotebookInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "notebook-instance"
  ],
  "supportedResources": [
    {
      "Name": "notebook-instance",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:notebook-instance/${NotebookInstanceName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeNotebookInstanceLifecycleConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "notebook-instance-lifecycle-config"
  ],
  "supportedResources": [
    {
      "Name": "notebook-instance-lifecycle-config",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:notebook-instance-lifecycle-config/${NotebookInstanceLifecycleConfigName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeSubscribedWorkteam",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workteam"
  ],
  "supportedResources": [
    {
      "Name": "workteam",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:workteam/${WorkteamName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeTrainingJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "training-job"
  ],
  "supportedResources": [
    {
      "Name": "training-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:training-job/${TrainingJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeTransformJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transform-job"
  ],
  "supportedResources": [
    {
      "Name": "transform-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:transform-job/${TransformJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "DescribeWorkteam",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workteam"
  ],
  "supportedResources": [
    {
      "Name": "workteam",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:workteam/${WorkteamName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "GetSearchSuggestions",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "training-job"
  ],
  "supportedResources": [
    {
      "Name": "training-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:training-job/${TrainingJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "InvokeEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpoint"
  ],
  "supportedResources": [
    {
      "Name": "endpoint",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint/${EndpointName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAlgorithms",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCodeRepositories",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCompilationJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListEndpointConfigs",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListEndpoints",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListHyperParameterTuningJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLabelingJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLabelingJobsForWorkteam",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workteam"
  ],
  "supportedResources": [
    {
      "Name": "workteam",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:workteam/${WorkteamName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListModelPackages",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListModels",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListNotebookInstanceLifecycleConfigs",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListNotebookInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSubscribedWorkteams",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTrainingJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTrainingJobsForHyperParameterTuningJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hyper-parameter-tuning-job"
  ],
  "supportedResources": [
    {
      "Name": "hyper-parameter-tuning-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:hyper-parameter-tuning-job/${HyperParameterTuningJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTransformJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListWorkteams",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RenderUiTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "Search",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "training-job"
  ],
  "supportedResources": [
    {
      "Name": "training-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:training-job/${TrainingJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartNotebookInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "notebook-instance"
  ],
  "supportedResources": [
    {
      "Name": "notebook-instance",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:notebook-instance/${NotebookInstanceName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "StopCompilationJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "compilation-job"
  ],
  "supportedResources": [
    {
      "Name": "compilation-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:compilation-job/${CompilationJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "StopHyperParameterTuningJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hyper-parameter-tuning-job"
  ],
  "supportedResources": [
    {
      "Name": "hyper-parameter-tuning-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:hyper-parameter-tuning-job/${HyperParameterTuningJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "StopLabelingJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "labeling-job"
  ],
  "supportedResources": [
    {
      "Name": "labeling-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:labeling-job/${LabelingJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "StopNotebookInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "notebook-instance"
  ],
  "supportedResources": [
    {
      "Name": "notebook-instance",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:notebook-instance/${NotebookInstanceName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "StopTrainingJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "training-job"
  ],
  "supportedResources": [
    {
      "Name": "training-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:training-job/${TrainingJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "StopTransformJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "transform-job"
  ],
  "supportedResources": [
    {
      "Name": "transform-job",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:transform-job/${TransformJobName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "UpdateCodeRepository",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "code-repository"
  ],
  "supportedResources": [
    {
      "Name": "code-repository",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:code-repository/${CodeRepositoryName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpoint"
  ],
  "supportedResources": [
    {
      "Name": "endpoint",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint/${EndpointName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "UpdateEndpointWeightsAndCapacities",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpoint"
  ],
  "supportedResources": [
    {
      "Name": "endpoint",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:endpoint/${EndpointName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "UpdateNotebookInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "notebook-instance"
  ],
  "supportedResources": [
    {
      "Name": "notebook-instance",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:notebook-instance/${NotebookInstanceName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "UpdateNotebookInstanceLifecycleConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateWorkteam",
  "evaluated": false,
  "allowed": false,
  "prefix": "sagemaker",
  "service": "Amazon SageMaker",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workteam"
  ],
  "supportedResources": [
    {
      "Name": "workteam",
      "ARN": "arn:aws:sagemaker:${Region}:${Account}:workteam/${WorkteamName}",
      "RegEx": "^arn:aws:sagemaker:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "sagemaker:ResourceTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A tag key and value pair."
    },
    {
      "Name": "aws:RequestTag/tag-key",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "A key that is present in the request the user makes to the SageMaker service."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonsagemaker.html#amazonsagemaker-policy-keys",
      "Description": "The list of all the tag key names associated with the resource in the request."
    }
  ]
}
{
  "name": "ActivateGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddCache",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddTagsToResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "tape",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${TapeBarcode}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": false
    },
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": false
    },
    {
      "Name": "volume",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddUploadBuffer",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddWorkingStorage",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelArchival",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "tape"
  ],
  "supportedResources": [
    {
      "Name": "tape",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${TapeBarcode}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelRetrieval",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "tape"
  ],
  "supportedResources": [
    {
      "Name": "tape",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${TapeBarcode}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCachediSCSIVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateNFSFileShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSMBFileShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSnapshotFromVolumeRecoveryPoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateStorediSCSIVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateTapeWithBarcode",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTapes",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteBandwidthRateLimit",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteChapCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "target"
  ],
  "supportedResources": [
    {
      "Name": "target",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/target/${IscsiTarget}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteFileShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "share"
  ],
  "supportedResources": [
    {
      "Name": "share",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:share/${ShareId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSnapshotSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTape",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTapeArchive",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeBandwidthRateLimit",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCache",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCachediSCSIVolumes",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeChapCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "target"
  ],
  "supportedResources": [
    {
      "Name": "target",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/target/${IscsiTarget}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeGatewayInformation",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeMaintenanceStartTime",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeNFSFileShares",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "share"
  ],
  "supportedResources": [
    {
      "Name": "share",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:share/${ShareId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeSMBFileShares",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "share"
  ],
  "supportedResources": [
    {
      "Name": "share",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:share/${ShareId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeSMBSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeSnapshotSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStorediSCSIVolumes",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeTapeArchives",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTapeRecoveryPoints",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeTapes",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeUploadBuffer",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeVTLDevices",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeWorkingStorage",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachVolume",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "JoinDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListFileShares",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListGateways",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLocalDisks",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "tape",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${TapeBarcode}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": false
    },
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": false
    },
    {
      "Name": "volume",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTapes",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "tape"
  ],
  "supportedResources": [
    {
      "Name": "tape",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${TapeBarcode}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListVolumeInitiators",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListVolumeRecoveryPoints",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListVolumes",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "NotifyWhenUploaded",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "share"
  ],
  "supportedResources": [
    {
      "Name": "share",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:share/${ShareId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RefreshCache",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "share"
  ],
  "supportedResources": [
    {
      "Name": "share",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:share/${ShareId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveTagsFromResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "tape",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${TapeBarcode}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": false
    },
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": false
    },
    {
      "Name": "volume",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ResetCache",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RetrieveTapeArchive",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RetrieveTapeRecoveryPoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetLocalConsolePassword",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetSMBGuestPassword",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ShutdownGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateBandwidthRateLimit",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateChapCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "target"
  ],
  "supportedResources": [
    {
      "Name": "target",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/target/${IscsiTarget}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateGatewayInformation",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateGatewaySoftwareNow",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateMaintenanceStartTime",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "gateway"
  ],
  "supportedResources": [
    {
      "Name": "gateway",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateNFSFileShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "share"
  ],
  "supportedResources": [
    {
      "Name": "share",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:share/${ShareId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSMBFileShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "share"
  ],
  "supportedResources": [
    {
      "Name": "share",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:share/${ShareId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSnapshotSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "volume"
  ],
  "supportedResources": [
    {
      "Name": "volume",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateVTLDeviceType",
  "evaluated": false,
  "allowed": false,
  "prefix": "storagegateway",
  "service": "Amazon Storage Gateway",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:storagegateway:${Region}:${Account}:gateway/${GatewayId}/device/${Vtldevice}",
      "RegEx": "^arn:aws:storagegateway:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateVPCWithHostedZone",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ChangeResourceRecordSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ChangeTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone",
    "healthcheck"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    },
    {
      "Name": "healthcheck",
      "ARN": "arn:aws:route53:::healthcheck/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateHealthCheck",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "healthcheck"
  ],
  "supportedResources": [
    {
      "Name": "healthcheck",
      "ARN": "arn:aws:route53:::healthcheck/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateHostedZone",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "noResourceARN": "arn:aws:route53::$account:hostedzone/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateQueryLoggingConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateReusableDelegationSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "noResourceARN": "arn:aws:route53::$account:delegationset/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTrafficPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "noResourceARN": "arn:aws:route53::$account:trafficpolicy/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTrafficPolicyInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trafficpolicy",
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "trafficpolicy",
      "ARN": "arn:aws:route53:::trafficpolicy/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    },
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateTrafficPolicyVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trafficpolicy"
  ],
  "supportedResources": [
    {
      "Name": "trafficpolicy",
      "ARN": "arn:aws:route53:::trafficpolicy/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateVPCAssociationAuthorization",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteHealthCheck",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "healthcheck"
  ],
  "supportedResources": [
    {
      "Name": "healthcheck",
      "ARN": "arn:aws:route53:::healthcheck/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteHostedZone",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteQueryLoggingConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queryloggingconfig"
  ],
  "supportedResources": [
    {
      "Name": "queryloggingconfig",
      "ARN": "arn:aws:route53:::queryloggingconfig/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteReusableDelegationSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "delegationset"
  ],
  "supportedResources": [
    {
      "Name": "delegationset",
      "ARN": "arn:aws:route53:::delegationset/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTrafficPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trafficpolicy"
  ],
  "supportedResources": [
    {
      "Name": "trafficpolicy",
      "ARN": "arn:aws:route53:::trafficpolicy/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTrafficPolicyInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trafficpolicyinstance"
  ],
  "supportedResources": [
    {
      "Name": "trafficpolicyinstance",
      "ARN": "arn:aws:route53:::trafficpolicyinstance/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteVPCAssociationAuthorization",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateVPCFromHostedZone",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAccountLimit",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetChange",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "change"
  ],
  "supportedResources": [
    {
      "Name": "change",
      "ARN": "arn:aws:route53:::change/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCheckerIpRanges",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGeoLocation",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetHealthCheck",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "healthcheck"
  ],
  "supportedResources": [
    {
      "Name": "healthcheck",
      "ARN": "arn:aws:route53:::healthcheck/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetHealthCheckCount",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetHealthCheckLastFailureReason",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "healthcheck"
  ],
  "supportedResources": [
    {
      "Name": "healthcheck",
      "ARN": "arn:aws:route53:::healthcheck/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetHealthCheckStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "healthcheck"
  ],
  "supportedResources": [
    {
      "Name": "healthcheck",
      "ARN": "arn:aws:route53:::healthcheck/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetHostedZone",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetHostedZoneCount",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetHostedZoneLimit",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetQueryLoggingConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queryloggingconfig"
  ],
  "supportedResources": [
    {
      "Name": "queryloggingconfig",
      "ARN": "arn:aws:route53:::queryloggingconfig/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetReusableDelegationSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "delegationset"
  ],
  "supportedResources": [
    {
      "Name": "delegationset",
      "ARN": "arn:aws:route53:::delegationset/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetReusableDelegationSetLimit",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "delegationset"
  ],
  "supportedResources": [
    {
      "Name": "delegationset",
      "ARN": "arn:aws:route53:::delegationset/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetTrafficPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trafficpolicy"
  ],
  "supportedResources": [
    {
      "Name": "trafficpolicy",
      "ARN": "arn:aws:route53:::trafficpolicy/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetTrafficPolicyInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trafficpolicyinstance"
  ],
  "supportedResources": [
    {
      "Name": "trafficpolicyinstance",
      "ARN": "arn:aws:route53:::trafficpolicyinstance/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetTrafficPolicyInstanceCount",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGeoLocations",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListHealthChecks",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListHostedZones",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "noResourceARN": "arn:aws:route53::$account:hostedzone/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListHostedZonesByName",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "noResourceARN": "arn:aws:route53::$account:hostedzone/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListQueryLoggingConfigs",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queryloggingconfig"
  ],
  "supportedResources": [
    {
      "Name": "queryloggingconfig",
      "ARN": "arn:aws:route53:::queryloggingconfig/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListResourceRecordSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListReusableDelegationSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "noResourceARN": "arn:aws:route53::$account:delegationset/*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": false
    },
    {
      "Name": "healthcheck",
      "ARN": "arn:aws:route53:::healthcheck/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTagsForResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": false
    },
    {
      "Name": "healthcheck",
      "ARN": "arn:aws:route53:::healthcheck/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTrafficPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTrafficPolicyInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTrafficPolicyInstancesByHostedZone",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTrafficPolicyInstancesByPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trafficpolicy"
  ],
  "supportedResources": [
    {
      "Name": "trafficpolicy",
      "ARN": "arn:aws:route53:::trafficpolicy/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTrafficPolicyVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trafficpolicy"
  ],
  "supportedResources": [
    {
      "Name": "trafficpolicy",
      "ARN": "arn:aws:route53:::trafficpolicy/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListVPCAssociationAuthorizations",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TestDNSAnswer",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateHealthCheck",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "healthcheck"
  ],
  "supportedResources": [
    {
      "Name": "healthcheck",
      "ARN": "arn:aws:route53:::healthcheck/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateHostedZoneComment",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hostedzone"
  ],
  "supportedResources": [
    {
      "Name": "hostedzone",
      "ARN": "arn:aws:route53:::hostedzone/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateTrafficPolicyComment",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trafficpolicy"
  ],
  "supportedResources": [
    {
      "Name": "trafficpolicy",
      "ARN": "arn:aws:route53:::trafficpolicy/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateTrafficPolicyInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53",
  "service": "Amazon Route 53",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "trafficpolicyinstance"
  ],
  "supportedResources": [
    {
      "Name": "trafficpolicyinstance",
      "ARN": "arn:aws:route53:::trafficpolicyinstance/${Id}",
      "RegEx": "^arn:aws:route53:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ActivatePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeactivatePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeletePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeObjects",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePipelines",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EvaluateExpression",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAccountLimits",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPipelineDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPipelines",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PollForTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutAccountLimits",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutPipelineDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "QueryObjects",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ReportTaskProgress",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ReportTaskRunnerHeartbeat",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetTaskStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ValidatePipelineDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "datapipeline",
  "service": "Data Pipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchGetItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchWriteItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ConditionCheckItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DecreaseReplicationFactor",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dax:EnclosingOperation",
      "Type": "String",
      "DocPageRel": "specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Used to block Transactions APIs calls and allow the non-Transaction APIs calls and vice-versa."
    }
  ]
}
{
  "name": "DeleteParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClusters",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDefaultParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeParameterGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSubnetGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dax:EnclosingOperation",
      "Type": "String",
      "DocPageRel": "specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Used to block Transactions APIs calls and allow the non-Transaction APIs calls and vice-versa."
    }
  ]
}
{
  "name": "IncreaseReplicationFactor",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dax:EnclosingOperation",
      "Type": "String",
      "DocPageRel": "specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Used to block Transactions APIs calls and allow the non-Transaction APIs calls and vice-versa."
    }
  ]
}
{
  "name": "Query",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RebootNode",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "Scan",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:dax:${Region}:${Account}:cache/${ClusterName}",
      "RegEx": "^arn:aws:dax:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dax:EnclosingOperation",
      "Type": "String",
      "DocPageRel": "specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Used to block Transactions APIs calls and allow the non-Transaction APIs calls and vice-versa."
    }
  ]
}
{
  "name": "UpdateParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dax",
  "service": "Amazon DynamoDB Accelerator (DAX)",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchUpdateSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateInput",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateInputSecurityGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteInput",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteInputSecurityGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteReservation",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInput",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInputSecurityGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeOffering",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservation",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListChannels",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListInputSecurityGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListInputs",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListOfferings",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListReservations",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PurchaseOffering",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateChannel",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateInput",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateInputSecurityGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "medialive",
  "service": "AWS Elemental MediaLive",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AbortEnvironmentUpdate",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ApplyEnvironmentManagedAction",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CheckDNSAvailability",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ComposeEnvironments",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application",
    "applicationversion"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "isRequired": true
    },
    {
      "Name": "applicationversion",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:applicationversion/${ApplicationName}/${VersionLabel}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateApplicationVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application",
    "applicationversion"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "isRequired": true
    },
    {
      "Name": "applicationversion",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:applicationversion/${ApplicationName}/${VersionLabel}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateConfigurationTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "configurationtemplate"
  ],
  "supportedResources": [
    {
      "Name": "configurationtemplate",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:configurationtemplate/${ApplicationName}/${TemplateName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "elasticbeanstalk:FromConfigurationTemplate",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.policies.actions.html#AWSHowTo.iam.policies.conditions",
      "Description": "A configuration template as a dependency or a constraint on an input parameter."
    },
    {
      "Name": "elasticbeanstalk:FromEnvironment",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.policies.actions.html#AWSHowTo.iam.policies.conditions",
      "Description": "An environment as a dependency or a constraint on an input parameter."
    },
    {
      "Name": "elasticbeanstalk:FromSolutionStack",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.policies.actions.html#AWSHowTo.iam.policies.conditions",
      "Description": "A solution stack as a dependency or a constraint on an input parameter."
    },
    {
      "Name": "elasticbeanstalk:FromApplication",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.policies.actions.html#AWSHowTo.iam.policies.conditions",
      "Description": "An application as a dependency or a constraint on an input parameter."
    },
    {
      "Name": "elasticbeanstalk:FromApplicationVersion",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.policies.actions.html#AWSHowTo.iam.policies.conditions",
      "Description": "An application version as a dependency or a constraint on an input parameter."
    }
  ]
}
{
  "name": "CreateEnvironment",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "elasticbeanstalk:FromConfigurationTemplate",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.policies.actions.html#AWSHowTo.iam.policies.conditions",
      "Description": "A configuration template as a dependency or a constraint on an input parameter."
    },
    {
      "Name": "elasticbeanstalk:FromSolutionStack",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.policies.actions.html#AWSHowTo.iam.policies.conditions",
      "Description": "A solution stack as a dependency or a constraint on an input parameter."
    },
    {
      "Name": "elasticbeanstalk:FromApplicationVersion",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.policies.actions.html#AWSHowTo.iam.policies.conditions",
      "Description": "An application version as a dependency or a constraint on an input parameter."
    }
  ]
}
{
  "name": "CreatePlatformVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateStorageLocation",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteApplicationVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applicationversion"
  ],
  "supportedResources": [
    {
      "Name": "applicationversion",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:applicationversion/${ApplicationName}/${VersionLabel}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteConfigurationTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "configurationtemplate"
  ],
  "supportedResources": [
    {
      "Name": "configurationtemplate",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:configurationtemplate/${ApplicationName}/${TemplateName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteEnvironmentConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePlatformVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAccountAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeApplicationVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "applicationversion",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:applicationversion/${ApplicationName}/${VersionLabel}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeApplications",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeConfigurationOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "configurationtemplate",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:configurationtemplate/${ApplicationName}/${TemplateName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    },
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    },
    {
      "Name": "solutionstack",
      "ARN": "arn:aws:elasticbeanstalk:${Region}::solutionstack/${SolutionStackName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeConfigurationSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "configurationtemplate",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:configurationtemplate/${ApplicationName}/${TemplateName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    },
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEnvironmentHealth",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEnvironmentManagedActionHistory",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEnvironmentManagedActions",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEnvironmentResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEnvironments",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "isRequired": false
    },
    {
      "Name": "configurationtemplate",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:configurationtemplate/${ApplicationName}/${TemplateName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    },
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    },
    {
      "Name": "applicationversion",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:applicationversion/${ApplicationName}/${VersionLabel}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeInstancesHealth",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribePlatformVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAvailableSolutionStacks",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "solutionstack",
      "ARN": "arn:aws:elasticbeanstalk:${Region}::solutionstack/${SolutionStackName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListPlatformVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RebuildEnvironment",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RequestEnvironmentInfo",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RestartAppServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RetrieveEnvironmentInfo",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SwapEnvironmentCNAMEs",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "elasticbeanstalk:FromEnvironment",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.policies.actions.html#AWSHowTo.iam.policies.conditions",
      "Description": "An environment as a dependency or a constraint on an input parameter."
    }
  ]
}
{
  "name": "TerminateEnvironment",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:application/${ApplicationName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateApplicationResourceLifecycle",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApplicationVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applicationversion"
  ],
  "supportedResources": [
    {
      "Name": "applicationversion",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:applicationversion/${ApplicationName}/${VersionLabel}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateConfigurationTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "configurationtemplate"
  ],
  "supportedResources": [
    {
      "Name": "configurationtemplate",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:configurationtemplate/${ApplicationName}/${TemplateName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateEnvironment",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "environment"
  ],
  "supportedResources": [
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "elasticbeanstalk:FromConfigurationTemplate",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.policies.actions.html#AWSHowTo.iam.policies.conditions",
      "Description": "A configuration template as a dependency or a constraint on an input parameter."
    },
    {
      "Name": "elasticbeanstalk:FromApplicationVersion",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.policies.actions.html#AWSHowTo.iam.policies.conditions",
      "Description": "An application version as a dependency or a constraint on an input parameter."
    }
  ]
}
{
  "name": "ValidateConfigurationSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticbeanstalk",
  "service": "AWS Elastic Beanstalk",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "configurationtemplate",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:configurationtemplate/${ApplicationName}/${TemplateName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    },
    {
      "Name": "environment",
      "ARN": "arn:aws:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}",
      "RegEx": "^arn:aws:elasticbeanstalk:.+",
      "ContextKeys": [
        "elasticbeanstalk:InApplication"
      ],
      "ContextKeyStrings": [
        "elasticbeanstalk:inapplication"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateDeviceWithPlacement",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:projects/${ProjectName}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ClaimDevicesByClaimCode",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePlacement",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:projects/${ProjectName}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:projects/${ProjectName}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePlacement",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:projects/${ProjectName}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:projects/${ProjectName}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:devices/${DeviceId}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribePlacement",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:projects/${ProjectName}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:projects/${ProjectName}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateDeviceFromPlacement",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:projects/${ProjectName}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "FinalizeDeviceClaim",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:devices/${DeviceId}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDeviceMethods",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:devices/${DeviceId}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDevicesInPlacement",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:projects/${ProjectName}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "InitiateDeviceClaim",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "InvokeDeviceMethod",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:devices/${DeviceId}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDeviceEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:devices/${DeviceId}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDevices",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPlacements",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:projects/${ProjectName}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListProjects",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UnclaimDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:devices/${DeviceId}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDeviceState",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "device"
  ],
  "supportedResources": [
    {
      "Name": "device",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:devices/${DeviceId}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdatePlacement",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:projects/${ProjectName}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "iot1click",
  "service": "AWS IoT 1-Click",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:iot1click:${Region}:${Account}:projects/${ProjectName}",
      "RegEx": "^arn:aws:iot1click:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetPullRequests",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetRepositories",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelUploadArchive",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateBranch",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCommit",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePullRequest",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateRepository",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteBranch",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteCommentContent",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteFile",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteRepository",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribePullRequestEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBlob",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetBranch",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetComment",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCommentsForComparedCommit",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCommentsForPullRequest",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCommit",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCommitHistory",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCommitsFromMergeBase",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDifferences",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetFile",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetFolder",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetMergeConflicts",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetObjectIdentifier",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPullRequest",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetReferences",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRepository",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetRepositoryTriggers",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetTree",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetUploadArchiveStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GitPull",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GitPush",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListBranches",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListPullRequests",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListRepositories",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "MergePullRequestByFastForward",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PostCommentForComparedCommit",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PostCommentForPullRequest",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PostCommentReply",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutFile",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutRepositoryTriggers",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TestRepositoryTriggers",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateComment",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateDefaultBranch",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdatePullRequestDescription",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdatePullRequestStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdatePullRequestTitle",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRepositoryDescription",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRepositoryName",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UploadArchive",
  "evaluated": false,
  "allowed": false,
  "prefix": "codecommit",
  "service": "AWS CodeCommit",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:codecommit:${Region}:${Account}:${RepositoryName}",
      "RegEx": "^arn:aws:codecommit:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AcceptPortfolioShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociatePrincipalWithPortfolio",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateProductWithPortfolio",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateConstraint",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePortfolio",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePortfolioShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateProduct",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateProvisionedProductPlan",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateProvisioningArtifact",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteConstraint",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeletePortfolio",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeletePortfolioShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteProduct",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteProvisionedProductPlan",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteProvisioningArtifact",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConstraint",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePortfolio",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeProduct",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeProductAsAdmin",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeProductView",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeProvisionedProduct",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeProvisionedProductPlan",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeProvisioningArtifact",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeProvisioningParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeRecord",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociatePrincipalFromPortfolio",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateProductFromPortfolio",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ExecuteProvisionedProductPlan",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ExecuteProvisionedProductServiceAction",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAcceptedPortfolioShares",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListConstraintsForPortfolio",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLaunchPaths",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPortfolioAccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPortfolios",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPortfoliosForProduct",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPrincipalsForPortfolio",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListProvisionedProductPlans",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListProvisioningArtifacts",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListRecordHistory",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListServiceActionsForProvisioningArtifact",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ProvisionProduct",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RejectPortfolioShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ScanProvisionedProducts",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchProducts",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchProductsAsAdmin",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchProvisionedProducts",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TerminateProvisionedProduct",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateConstraint",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdatePortfolio",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateProduct",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateProvisionedProduct",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateProvisioningArtifact",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicecatalog",
  "service": "AWS Service Catalog",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AllocateConnectionOnInterconnect",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AllocateHostedConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AllocatePrivateVirtualInterface",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AllocatePublicVirtualInterface",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateConnectionWithLag",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateHostedConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateVirtualInterface",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ConfirmConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ConfirmPrivateVirtualInterface",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ConfirmPublicVirtualInterface",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateBGPPeer",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDirectConnectGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDirectConnectGatewayAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateInterconnect",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLag",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePrivateVirtualInterface",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePublicVirtualInterface",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteBGPPeer",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteConnection",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDirectConnectGateway",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDirectConnectGatewayAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteInterconnect",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteLag",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVirtualInterface",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConnectionLoa",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConnections",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConnectionsOnInterconnect",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDirectConnectGatewayAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDirectConnectGatewayAttachments",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDirectConnectGateways",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeHostedConnections",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInterconnectLoa",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInterconnects",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLags",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLoa",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLocations",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVirtualGateways",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeVirtualInterfaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateConnectionFromLag",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateLag",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateVirtualInterfaceAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "directconnect",
  "service": "AWS Direct Connect",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddMemberToGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateApplicationInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateApplicationInstanceCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePermissionSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTrust",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApplicationInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApplicationInstanceCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeletePermissionSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeletePermissionsPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePermissionsPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetApplicationInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetApplicationTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPermissionSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPermissionsPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSSOConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSSOStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTrust",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetUserPoolInfo",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ImportApplicationInstanceServiceProviderMetadata",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListApplicationInstanceCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListApplicationInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListApplicationTemplates",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListApplications",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDirectoryAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGroupsForUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListMembersInGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPermissionSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListProfileAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListProfiles",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutPermissionsPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveMemberFromGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetTemporaryPassword",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartSSO",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApplicationInstanceActiveCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApplicationInstanceDisplayData",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApplicationInstanceResponseConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApplicationInstanceResponseSchemaConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApplicationInstanceSecurityConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApplicationInstanceServiceProviderConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApplicationInstanceStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDirectoryAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateSSOConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateTrust",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "sso",
  "service": "AWS SSO",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateIdentityPool",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteIdentities",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteIdentityPool",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-identity:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeIdentityPool",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-identity:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCredentialsForIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetId",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetIdentityPoolRoles",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-identity:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetOpenIdToken",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetOpenIdTokenForDeveloperIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-identity:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListIdentities",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-identity:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListIdentityPools",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "LookupDeveloperIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-identity:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "MergeDeveloperIdentities",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-identity:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetIdentityPoolRoles",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UnlinkDeveloperIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-identity:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UnlinkIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateIdentityPool",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-identity",
  "service": "Amazon Cognito Identity",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "identitypool"
  ],
  "supportedResources": [
    {
      "Name": "identitypool",
      "ARN": "arn:aws:cognito-identity:${Region}:${Account}:identitypool/${IdentityPoolId}",
      "RegEx": "^arn:aws:cognito-identity:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateBuild",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateGameSession",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePlayerSession",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePlayerSessions",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteBuild",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteScalingPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeBuild",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEC2InstanceLimits",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFleetAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFleetCapacity",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFleetEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFleetPortSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeFleetUtilization",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeGameSessionDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeGameSessions",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePlayerSessions",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeRuntimeConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeScalingPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGameSessionLogUrl",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetInstanceAccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAliases",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBuilds",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListFleets",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutScalingPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RequestUploadCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResolveAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchGameSessions",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateAlias",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateBuild",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateFleetAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateFleetCapacity",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateFleetPortSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateGameSession",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateRuntimeConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "gamelift",
  "service": "Amazon GameLift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddTagsToStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DecreaseStreamRetentionPeriod",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterStreamConsumer",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream",
    "consumer"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    },
    {
      "Name": "consumer",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:${StreamType}/${StreamName}/consumer/${ConsumerName}:${ConsumerCreationTimpstamp}",
      "RegEx": "^(arn):aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeLimits",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStreamConsumer",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream",
    "consumer"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    },
    {
      "Name": "consumer",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:${StreamType}/${StreamName}/consumer/${ConsumerName}:${ConsumerCreationTimpstamp}",
      "RegEx": "^(arn):aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStreamSummary",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisableEnhancedMonitoring",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableEnhancedMonitoring",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetRecords",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetShardIterator",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "IncreaseStreamRetentionPeriod",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListShards",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListStreamConsumers",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListStreams",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "MergeShards",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutRecord",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutRecords",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterStreamConsumer",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream",
    "consumer"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    },
    {
      "Name": "consumer",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:${StreamType}/${StreamName}/consumer/${ConsumerName}:${ConsumerCreationTimpstamp}",
      "RegEx": "^(arn):aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveTagsFromStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SplitShard",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SubscribeToShard",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream",
    "consumer"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:stream/${StreamName}",
      "RegEx": "^arn:aws:kinesis:.+",
      "isRequired": true
    },
    {
      "Name": "consumer",
      "ARN": "arn:aws:kinesis:${Region}:${Account}:${StreamType}/${StreamName}/consumer/${ConsumerName}:${ConsumerCreationTimpstamp}",
      "RegEx": "^(arn):aws:kinesis:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateShardCount",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesis",
  "service": "Amazon Kinesis",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CheckDomainAvailability",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteTagsForDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableDomainAutoRenew",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableDomainTransferLock",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableDomainAutoRenew",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableDomainTransferLock",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetContactReachabilityStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDomainDetail",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDomainSuggestions",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetOperationDetail",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDomains",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListOperations",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RenewDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResendContactReachabilityEmail",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RetrieveDomainAuthCode",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TransferDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDomainContact",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDomainContactPrivacy",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDomainNameservers",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateTagsForDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ViewBilling",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53domains",
  "service": "Amazon Route53 Domains",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddMembersToGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateMailDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateMailUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateOrganization",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteMailDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteMobileDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteOrganization",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDirectories",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeKmsKeys",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeMailDomains",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeMailGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeMailUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeOrganizations",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableMailGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableMailUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableMailDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableMailGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableMailUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMailDomainDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMailGroupDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMailUserDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMobileDeviceDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMobileDevicesForUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMobilePolicyDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListMembersInMailGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveMembersFromGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResetUserPassword",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetAdmin",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetDefaultMailDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetMailGroupDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetMailUserDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetMobilePolicyDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "WipeMobileDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "workmail",
  "service": "Amazon WorkMail",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchCheckLayerAvailability",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "BatchDeleteImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "BatchGetImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "CompleteLayerUpload",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "CreateRepository",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteLifecyclePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "DeleteRepository",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "DeleteRepositoryPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "DescribeImages",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "DescribeRepositories",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "GetAuthorizationToken",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDownloadUrlForLayer",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "GetLifecyclePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "GetLifecyclePolicyPreview",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "GetRepositoryPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "InitiateLayerUpload",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "ListImages",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "PutImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "PutLifecyclePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "SetRepositoryPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "StartLifecyclePolicyPreview",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "Filters create requests based on the presence of mandatory tags in the request."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "Filters create requests based on the allowed set of values for each of the tags."
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "UploadLayerPart",
  "evaluated": false,
  "allowed": false,
  "prefix": "ecr",
  "service": "Amazon Elastic Container Registry",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "repository"
  ],
  "supportedResources": [
    {
      "Name": "repository",
      "ARN": "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}",
      "RegEx": "arn:aws:ecr+:.+",
      "ContextKeys": [
        "ecr:ResourceTag/${TagKey}",
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}",
        "ecr:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "ecr:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    },
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "AssociateTeamMember",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codestar:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:codestar:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateUserProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteExtendedAccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codestar:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:codestar:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codestar:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:codestar:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUserProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codestar:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:codestar:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeUserProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateTeamMember",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codestar:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:codestar:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetExtendedAccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codestar:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:codestar:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListProjects",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codestar:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:codestar:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTeamMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codestar:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:codestar:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListUserProfiles",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutExtendedAccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codestar:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:codestar:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codestar:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:codestar:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateTeamMember",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:codestar:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:codestar:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateUserProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "VerifyServiceRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "codestar",
  "service": "AWS CodeStar",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddFacetToObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ApplySchema",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory",
    "publishedSchema"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "publishedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/published/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachToIndex",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachTypedLink",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchRead",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchWrite",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "publishedSchema"
  ],
  "supportedResources": [
    {
      "Name": "publishedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/published/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateFacet",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "appliedSchema",
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "appliedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}/schema/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateIndex",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSchema",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTypedLinkFacet",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "appliedSchema",
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "appliedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}/schema/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteFacet",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSchema",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "publishedSchema",
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "publishedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/published/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTypedLinkFacet",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachFromIndex",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachTypedLink",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisableDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetFacet",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "appliedSchema",
    "publishedSchema",
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "appliedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}/schema/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "publishedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/published/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetLinkAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetObjectAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetObjectInformation",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSchemaAsJson",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "appliedSchema",
    "publishedSchema",
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "appliedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}/schema/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "publishedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/published/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetTypedLinkFacetInformation",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "appliedSchema",
    "publishedSchema",
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "appliedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}/schema/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "publishedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/published/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAppliedSchemaArns",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAttachedIndices",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDevelopmentSchemaArns",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDirectories",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListFacetAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "appliedSchema",
    "publishedSchema",
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "appliedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}/schema/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "publishedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/published/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListFacetNames",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "appliedSchema",
    "publishedSchema",
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "appliedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}/schema/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "publishedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/published/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListIncomingTypedLinks",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListIndex",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListObjectAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListObjectChildren",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListObjectParentPaths",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListObjectParents",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListObjectPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListOutgoingTypedLinks",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListPolicyAttachments",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListPublishedSchemaArns",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTypedLinkFacetAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "appliedSchema",
    "publishedSchema",
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "appliedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}/schema/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "publishedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/published/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTypedLinkFacetNames",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "appliedSchema",
    "publishedSchema",
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "appliedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}/schema/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "publishedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/published/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "LookupPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PublishSchema",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutSchemaFromJson",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveFacetFromObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateFacet",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "appliedSchema",
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "appliedSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}/schema/${SchemaName}/${Version}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    },
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateLinkAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateObjectAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "directory"
  ],
  "supportedResources": [
    {
      "Name": "directory",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:directory/${DirectoryId}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateSchema",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateTypedLinkFacet",
  "evaluated": false,
  "allowed": false,
  "prefix": "clouddirectory",
  "service": "Amazon Cloud Directory",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "developmentSchema"
  ],
  "supportedResources": [
    {
      "Name": "developmentSchema",
      "ARN": "arn:aws:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}",
      "RegEx": "^arn:aws:clouddirectory:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteTerminology",
  "evaluated": false,
  "allowed": false,
  "prefix": "translate",
  "service": "Amazon Translate",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTerminology",
  "evaluated": false,
  "allowed": false,
  "prefix": "translate",
  "service": "Amazon Translate",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ImportTerminology",
  "evaluated": false,
  "allowed": false,
  "prefix": "translate",
  "service": "Amazon Translate",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTerminologies",
  "evaluated": false,
  "allowed": false,
  "prefix": "translate",
  "service": "Amazon Translate",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TranslateText",
  "evaluated": false,
  "allowed": false,
  "prefix": "translate",
  "service": "Amazon Translate",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:events:${Region}:${Account}:rule/${RuleName}",
      "RegEx": "^arn:aws:events:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEventBus",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:events:${Region}:${Account}:rule/${RuleName}",
      "RegEx": "^arn:aws:events:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisableRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:events:${Region}:${Account}:rule/${RuleName}",
      "RegEx": "^arn:aws:events:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:events:${Region}:${Account}:rule/${RuleName}",
      "RegEx": "^arn:aws:events:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListRuleNamesByTarget",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:events:${Region}:${Account}:rule/${RuleName}",
      "RegEx": "^arn:aws:events:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:events:${Region}:${Account}:rule/${RuleName}",
      "RegEx": "^arn:aws:events:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTargetsByRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:events:${Region}:${Account}:rule/${RuleName}",
      "RegEx": "^arn:aws:events:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutPermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:events:${Region}:${Account}:rule/${RuleName}",
      "RegEx": "^arn:aws:events:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "events:detail.eventTypeCode",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/policy-keys-cwe.html#LimitRuleByTypeCode",
      "Description": "Matches the literal string for the detail.eventTypeCode field of the event."
    },
    {
      "Name": "events:detail.userIdentity.principalId",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/policy-keys-cwe.html#ConsumeSpecificEvents",
      "Description": "Matches the literal string for the detail.useridentity.principalid field of the event."
    },
    {
      "Name": "events:detail-type",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/policy-keys-cwe.html#EventsPatternDetailType",
      "Description": "Matches the literal string of the detail-type filed of the event."
    },
    {
      "Name": "events:source",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/policy-keys-cwe.html#EventsLimitAccessControl",
      "Description": "The AWS service that generated the event. Matches the literal string of the source field of the event."
    },
    {
      "Name": "events:detail.service",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/policy-keys-cwe.html#LimitRuleByService",
      "Description": "Matches the literal string for the detail.service field of the event."
    }
  ]
}
{
  "name": "PutTargets",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:events:${Region}:${Account}:rule/${RuleName}",
      "RegEx": "^arn:aws:events:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "events:TargetArn",
      "Type": "ARN",
      "DocPageRel": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/policy-keys-cwe.html#LimitingAccessToTargets",
      "Description": "The ARN of a target that can be put to a rule."
    }
  ]
}
{
  "name": "RemovePermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveTargets",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "rule"
  ],
  "supportedResources": [
    {
      "Name": "rule",
      "ARN": "arn:aws:events:${Region}:${Account}:rule/${RuleName}",
      "RegEx": "^arn:aws:events:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TestEventPattern",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "events",
  "service": "Amazon CloudWatch Events",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateApplicationVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applications"
  ],
  "supportedResources": [
    {
      "Name": "applications",
      "ARN": "arn:aws:serverlessrepo:${Region}:${Account}:applications/${ResourceId}",
      "RegEx": "^arn:aws:serverlessrepo:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCloudFormationChangeSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applications"
  ],
  "supportedResources": [
    {
      "Name": "applications",
      "ARN": "arn:aws:serverlessrepo:${Region}:${Account}:applications/${ResourceId}",
      "RegEx": "^arn:aws:serverlessrepo:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCloudFormationTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applications"
  ],
  "supportedResources": [
    {
      "Name": "applications",
      "ARN": "arn:aws:serverlessrepo:${Region}:${Account}:applications/${ResourceId}",
      "RegEx": "^arn:aws:serverlessrepo:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applications"
  ],
  "supportedResources": [
    {
      "Name": "applications",
      "ARN": "arn:aws:serverlessrepo:${Region}:${Account}:applications/${ResourceId}",
      "RegEx": "^arn:aws:serverlessrepo:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applications"
  ],
  "supportedResources": [
    {
      "Name": "applications",
      "ARN": "arn:aws:serverlessrepo:${Region}:${Account}:applications/${ResourceId}",
      "RegEx": "^arn:aws:serverlessrepo:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetApplicationPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applications"
  ],
  "supportedResources": [
    {
      "Name": "applications",
      "ARN": "arn:aws:serverlessrepo:${Region}:${Account}:applications/${ResourceId}",
      "RegEx": "^arn:aws:serverlessrepo:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCloudFormationTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applications"
  ],
  "supportedResources": [
    {
      "Name": "applications",
      "ARN": "arn:aws:serverlessrepo:${Region}:${Account}:applications/${ResourceId}",
      "RegEx": "^arn:aws:serverlessrepo:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListApplicationDependencies",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applications"
  ],
  "supportedResources": [
    {
      "Name": "applications",
      "ARN": "arn:aws:serverlessrepo:${Region}:${Account}:applications/${ResourceId}",
      "RegEx": "^arn:aws:serverlessrepo:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListApplicationVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applications"
  ],
  "supportedResources": [
    {
      "Name": "applications",
      "ARN": "arn:aws:serverlessrepo:${Region}:${Account}:applications/${ResourceId}",
      "RegEx": "^arn:aws:serverlessrepo:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListApplications",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutApplicationPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applications"
  ],
  "supportedResources": [
    {
      "Name": "applications",
      "ARN": "arn:aws:serverlessrepo:${Region}:${Account}:applications/${ResourceId}",
      "RegEx": "^arn:aws:serverlessrepo:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SearchApplications",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "serverlessrepo",
  "service": "AWS Serverless Application Repository",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "applications"
  ],
  "supportedResources": [
    {
      "Name": "applications",
      "ARN": "arn:aws:serverlessrepo:${Region}:${Account}:applications/${ResourceId}",
      "RegEx": "^arn:aws:serverlessrepo:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDimensionKeys",
  "evaluated": false,
  "allowed": false,
  "prefix": "pi",
  "service": "AWS Performance Insights",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "metric-resource"
  ],
  "supportedResources": [
    {
      "Name": "metric-resource",
      "ARN": "arn:aws:pi:${Region}:${Account}:metrics/${ServiceType}/${Identifier}",
      "RegEx": "^arn:aws:pi:.+:.+:metrics/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetResourceMetrics",
  "evaluated": false,
  "allowed": false,
  "prefix": "pi",
  "service": "AWS Performance Insights",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "metric-resource"
  ],
  "supportedResources": [
    {
      "Name": "metric-resource",
      "ARN": "arn:aws:pi:${Region}:${Account}:metrics/${ServiceType}/${Identifier}",
      "RegEx": "^arn:aws:pi:.+:.+:metrics/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateApiKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDataSource",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateGraphqlApi",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateResolver",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateType",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApiKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDataSource",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteGraphqlApi",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteResolver",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteType",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDataSource",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGraphqlApi",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetIntrospectionSchema",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetResolver",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSchemaCreationStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetType",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GraphQL",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "field",
    "graphqlapi"
  ],
  "supportedResources": [
    {
      "Name": "field",
      "ARN": "arn:aws:appsync:${Region}:${Account}:apis/${GraphQLAPIId}/types/${TypeName}/fields/${FieldName}",
      "RegEx": "^arn:aws:appsync:.+",
      "isRequired": true
    },
    {
      "Name": "graphqlapi",
      "ARN": "arn:aws:appsync:${Region}:${Account}:apis/${GraphQLAPIId}",
      "RegEx": "^arn:aws:appsync:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListApiKeys",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDataSources",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListFunctions",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGraphqlApis",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListResolvers",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartSchemaCreation",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApiKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDataSource",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateFunction",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateGraphqlApi",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateResolver",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateType",
  "evaluated": false,
  "allowed": false,
  "prefix": "appsync",
  "service": "AWS AppSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BuildSuggesters",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DefineAnalysisScheme",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DefineExpression",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DefineIndexField",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DefineSuggester",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteAnalysisScheme",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteExpression",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteIndexField",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSuggester",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAnalysisSchemes",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAvailabilityOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDomains",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeExpressions",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeIndexFields",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeScalingParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeServiceAccessPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeSuggesters",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "IndexDocuments",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDomainNames",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateAvailabilityOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateScalingParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateServiceAccessPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "document",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "search",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "suggest",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudsearch",
  "service": "Amazon CloudSearch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:cloudsearch:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:cloudsearch:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AcceptInvitation",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDisableStandards",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "standards-subscription"
  ],
  "supportedResources": [
    {
      "Name": "standards-subscription",
      "ARN": "arn:aws:securityhub:${Region}:${Account}:subscription/${StandardsName}/v/${StandardsVersion}",
      "RegEx": "^arn:aws:securityhub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchEnableStandards",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "standard"
  ],
  "supportedResources": [
    {
      "Name": "standard",
      "ARN": "arn:aws:securityhub:::ruleset/${StandardsName}/v/${StandardsVersion}",
      "RegEx": "^arn:aws:securityhub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchImportFindings",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateInsight",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeclineInvitations",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteInsight",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "insight"
  ],
  "supportedResources": [
    {
      "Name": "insight",
      "ARN": "arn:aws:securityhub:${Region}:${Account}:insight/${CompanyId}/${ProductId}/${UniqueId}",
      "RegEx": "^arn:aws:securityhub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteInvitations",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableImportFindingsForProduct",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "product"
  ],
  "supportedResources": [
    {
      "Name": "product",
      "ARN": "arn:aws:securityhub:${Region}:${Account}:product/${Company}/${ProductId}",
      "RegEx": "^arn:aws:securityhub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisableSecurityHub",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateFromMasterAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableImportFindingsForProduct",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "product"
  ],
  "supportedResources": [
    {
      "Name": "product",
      "ARN": "arn:aws:securityhub:${Region}:${Account}:product/${Company}/${ProductId}",
      "RegEx": "^arn:aws:securityhub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableSecurityHub",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetEnabledStandards",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetFindings",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetInsightResults",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "insight"
  ],
  "supportedResources": [
    {
      "Name": "insight",
      "ARN": "arn:aws:securityhub:${Region}:${Account}:insight/${CompanyId}/${ProductId}/${UniqueId}",
      "RegEx": "^arn:aws:securityhub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInsights",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "insight"
  ],
  "supportedResources": [
    {
      "Name": "insight",
      "ARN": "arn:aws:securityhub:${Region}:${Account}:insight/${CompanyId}/${ProductId}/${UniqueId}",
      "RegEx": "^arn:aws:securityhub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInvitationsCount",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMasterAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "InviteMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListEnabledProductsForImport",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListInvitations",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListMembers",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateFindings",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateInsight",
  "evaluated": false,
  "allowed": false,
  "prefix": "securityhub",
  "service": "AWS Security Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "insight"
  ],
  "supportedResources": [
    {
      "Name": "insight",
      "ARN": "arn:aws:securityhub:${Region}:${Account}:insight/${CompanyId}/${ProductId}/${UniqueId}",
      "RegEx": "^arn:aws:securityhub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCostAndUsage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ce",
  "service": "AWS Cost Explorer Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCostForecast",
  "evaluated": false,
  "allowed": false,
  "prefix": "ce",
  "service": "AWS Cost Explorer Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDimensionValues",
  "evaluated": false,
  "allowed": false,
  "prefix": "ce",
  "service": "AWS Cost Explorer Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetReservationCoverage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ce",
  "service": "AWS Cost Explorer Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetReservationPurchaseRecommendation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ce",
  "service": "AWS Cost Explorer Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetReservationUtilization",
  "evaluated": false,
  "allowed": false,
  "prefix": "ce",
  "service": "AWS Cost Explorer Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "ce",
  "service": "AWS Cost Explorer Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateJobTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePreset",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateQueue",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteJobTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeletePreset",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteQueue",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEndpoints",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetJobTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPreset",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetQueue",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListJobTemplates",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPresets",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListQueues",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateJobTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdatePreset",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateQueue",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediaconvert",
  "service": "AWS Elemental MediaConvert",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateScalingPlan",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling-plans",
  "service": "AWS Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteScalingPlan",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling-plans",
  "service": "AWS Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeScalingPlanResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling-plans",
  "service": "AWS Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeScalingPlans",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling-plans",
  "service": "AWS Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetScalingPlanResourceForecastData",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling-plans",
  "service": "AWS Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateScalingPlan",
  "evaluated": false,
  "allowed": false,
  "prefix": "autoscaling-plans",
  "service": "AWS Auto Scaling",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateKmsKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelExportTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateExportTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateLogDelivery",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLogGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLogStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDestination",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteLogDelivery",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteLogGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteLogStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group",
    "log-stream"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    },
    {
      "Name": "log-stream",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}:${LogStream}:${LogStreamName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteMetricFilter",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteResourcePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteRetentionPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSubscriptionFilter",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDestinations",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeExportTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLogGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeLogStreams",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeMetricFilters",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeQueries",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeResourcePolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSubscriptionFilters",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateKmsKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "FilterLogEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetLogDelivery",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetLogEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group",
    "log-stream"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    },
    {
      "Name": "log-stream",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}:${LogStream}:${LogStreamName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetLogGroupFields",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetLogRecord",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetQueryResults",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLogDeliveries",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsLogGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutDestination",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutDestinationPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutLogEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group",
    "log-stream"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    },
    {
      "Name": "log-stream",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}:${LogStream}:${LogStreamName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutMetricFilter",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutResourcePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutRetentionPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutSubscriptionFilter",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagLogGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TestMetricFilter",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagLogGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "log-group"
  ],
  "supportedResources": [
    {
      "Name": "log-group",
      "ARN": "arn:aws:logs:${Region}:${Account}:log-group:${LogGroupName}",
      "RegEx": "^arn:aws:logs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateLogDelivery",
  "evaluated": false,
  "allowed": false,
  "prefix": "logs",
  "service": "Amazon CloudWatch Logs",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateActivity",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateStateMachine",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteActivity",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "activity"
  ],
  "supportedResources": [
    {
      "Name": "activity",
      "ARN": "arn:aws:states:${Region}:${Account}:activity:${ActivityName}",
      "RegEx": "^arn:aws:states:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteStateMachine",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "statemachine"
  ],
  "supportedResources": [
    {
      "Name": "statemachine",
      "ARN": "arn:aws:states:${Region}:${Account}:stateMachine:${StateMachineName}",
      "RegEx": "^arn:aws:states:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeActivity",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "activity"
  ],
  "supportedResources": [
    {
      "Name": "activity",
      "ARN": "arn:aws:states:${Region}:${Account}:activity:${ActivityName}",
      "RegEx": "^arn:aws:states:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "execution"
  ],
  "supportedResources": [
    {
      "Name": "execution",
      "ARN": "arn:aws:states:${Region}:${Account}:execution:${StateMachineName}:${ExecutionId}",
      "RegEx": "^arn:aws:states:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStateMachine",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "statemachine"
  ],
  "supportedResources": [
    {
      "Name": "statemachine",
      "ARN": "arn:aws:states:${Region}:${Account}:stateMachine:${StateMachineName}",
      "RegEx": "^arn:aws:states:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStateMachineForExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "execution"
  ],
  "supportedResources": [
    {
      "Name": "execution",
      "ARN": "arn:aws:states:${Region}:${Account}:execution:${StateMachineName}:${ExecutionId}",
      "RegEx": "^arn:aws:states:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetActivityTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "activity"
  ],
  "supportedResources": [
    {
      "Name": "activity",
      "ARN": "arn:aws:states:${Region}:${Account}:activity:${ActivityName}",
      "RegEx": "^arn:aws:states:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetExecutionHistory",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "execution"
  ],
  "supportedResources": [
    {
      "Name": "execution",
      "ARN": "arn:aws:states:${Region}:${Account}:execution:${StateMachineName}:${ExecutionId}",
      "RegEx": "^arn:aws:states:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListActivities",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "statemachine"
  ],
  "supportedResources": [
    {
      "Name": "statemachine",
      "ARN": "arn:aws:states:${Region}:${Account}:stateMachine:${StateMachineName}",
      "RegEx": "^arn:aws:states:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListStateMachines",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendTaskFailure",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendTaskHeartbeat",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendTaskSuccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "statemachine"
  ],
  "supportedResources": [
    {
      "Name": "statemachine",
      "ARN": "arn:aws:states:${Region}:${Account}:stateMachine:${StateMachineName}",
      "RegEx": "^arn:aws:states:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateStateMachine",
  "evaluated": false,
  "allowed": false,
  "prefix": "states",
  "service": "AWS Step Functions",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "statemachine"
  ],
  "supportedResources": [
    {
      "Name": "statemachine",
      "ARN": "arn:aws:states:${Region}:${Account}:stateMachine:${StateMachineName}",
      "RegEx": "^arn:aws:states:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCertificateAuthority",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCertificateAuthorityAuditReport",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreatePermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCertificateAuthority",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCertificateAuthority",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCertificateAuthorityAuditReport",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCertificateAuthorityCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCertificateAuthorityCsr",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ImportCertificateAuthorityCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "IssueCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListCertificateAuthorities",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPermissions",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RestoreCertificateAuthority",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RevokeCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagCertificateAuthority",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagCertificateAuthority",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateCertificateAuthority",
  "evaluated": false,
  "allowed": false,
  "prefix": "acm-pca",
  "service": "AWS Certificate Manager Private Certificate Authority",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "certificate-authority"
  ],
  "supportedResources": [
    {
      "Name": "certificate-authority",
      "ARN": "arn:aws:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}",
      "RegEx": "^arn:aws:acm-pca:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateHttpNamespace",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "namespace"
  ],
  "supportedResources": [
    {
      "Name": "namespace",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:stack/${NamespaceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreatePrivateDnsNamespace",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "namespace"
  ],
  "supportedResources": [
    {
      "Name": "namespace",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:stack/${NamespaceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreatePublicDnsNamespace",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "namespace"
  ],
  "supportedResources": [
    {
      "Name": "namespace",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:stack/${NamespaceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateService",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "service"
  ],
  "supportedResources": [
    {
      "Name": "service",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:service/${ServiceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteNamespace",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "service",
    "namespace"
  ],
  "supportedResources": [
    {
      "Name": "service",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:service/${ServiceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    },
    {
      "Name": "namespace",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:stack/${NamespaceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteService",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "service"
  ],
  "supportedResources": [
    {
      "Name": "service",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:service/${ServiceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "service"
  ],
  "supportedResources": [
    {
      "Name": "service",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:service/${ServiceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DiscoverInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetInstancesHealthStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetNamespace",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "namespace"
  ],
  "supportedResources": [
    {
      "Name": "namespace",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:stack/${NamespaceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetOperation",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetService",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "service"
  ],
  "supportedResources": [
    {
      "Name": "service",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:service/${ServiceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListNamespaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "namespace"
  ],
  "supportedResources": [
    {
      "Name": "namespace",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:stack/${NamespaceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListOperations",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListServices",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "service"
  ],
  "supportedResources": [
    {
      "Name": "service",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:service/${ServiceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "service"
  ],
  "supportedResources": [
    {
      "Name": "service",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:service/${ServiceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateInstanceHeartbeatStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "service"
  ],
  "supportedResources": [
    {
      "Name": "service",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:service/${ServiceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateService",
  "evaluated": false,
  "allowed": false,
  "prefix": "servicediscovery",
  "service": "AWS Cloud Map",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "service"
  ],
  "supportedResources": [
    {
      "Name": "service",
      "ARN": "arn:aws:servicediscovery:${Region}:${Account}:service/${ServiceName}",
      "RegEx": "^arn:aws:servicediscovery:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelUpdateStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ContinueUpdateRollback",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "cloudformation:RoleArn",
      "Type": "ARN",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "The ARN of an IAM service role. Use to control which service role IAM users can use to work with stacks or change sets."
    }
  ]
}
{
  "name": "CreateChangeSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "cloudformation:RoleArn",
      "Type": "ARN",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "The ARN of an IAM service role. Use to control which service role IAM users can use to work with stacks or change sets."
    },
    {
      "Name": "cloudformation:StackPolicyUrl",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An Amazon S3 stack policy URL. Use to control which stack policies IAM users can associate with a stack during a create or update stack action."
    },
    {
      "Name": "cloudformation:TemplateUrl",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An Amazon S3 template URL. Use to control which templates IAM users can use when they create or update stacks."
    },
    {
      "Name": "cloudformation:ResourceTypes",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "The template resource types, such as <code>AWS::EC2::Instance</code>. Use to control which resource types IAM users can work with when they create or update a stack"
    },
    {
      "Name": "cloudformation:ChangeSetName",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An AWS CloudFormation change set name. Use to control which change sets IAM users can execute or delete."
    }
  ]
}
{
  "name": "CreateStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "cloudformation:RoleArn",
      "Type": "ARN",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "The ARN of an IAM service role. Use to control which service role IAM users can use to work with stacks or change sets."
    },
    {
      "Name": "cloudformation:StackPolicyUrl",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An Amazon S3 stack policy URL. Use to control which stack policies IAM users can associate with a stack during a create or update stack action."
    },
    {
      "Name": "cloudformation:TemplateUrl",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An Amazon S3 template URL. Use to control which templates IAM users can use when they create or update stacks."
    },
    {
      "Name": "cloudformation:ResourceTypes",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "The template resource types, such as <code>AWS::EC2::Instance</code>. Use to control which resource types IAM users can work with when they create or update a stack"
    }
  ]
}
{
  "name": "CreateStackInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateStackSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "cloudformation:RoleArn",
      "Type": "ARN",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "The ARN of an IAM service role. Use to control which service role IAM users can use to work with stacks or change sets."
    },
    {
      "Name": "cloudformation:TemplateUrl",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An Amazon S3 template URL. Use to control which templates IAM users can use when they create or update stacks."
    }
  ]
}
{
  "name": "CreateUploadBucket",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteChangeSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "cloudformation:ChangeSetName",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An AWS CloudFormation change set name. Use to control which change sets IAM users can execute or delete."
    }
  ]
}
{
  "name": "DeleteStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "cloudformation:RoleArn",
      "Type": "ARN",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "The ARN of an IAM service role. Use to control which service role IAM users can use to work with stacks or change sets."
    }
  ]
}
{
  "name": "DeleteStackInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteStackSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAccountLimits",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeChangeSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "cloudformation:ChangeSetName",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An AWS CloudFormation change set name. Use to control which change sets IAM users can execute or delete."
    }
  ]
}
{
  "name": "DescribeStackDriftDetectionStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeStackEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStackInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStackResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStackResourceDrifts",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStackResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStackSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStackSetOperation",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStacks",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetectStackDrift",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetectStackResourceDrift",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EstimateTemplateCost",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ExecuteChangeSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "cloudformation:ChangeSetName",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An AWS CloudFormation change set name. Use to control which change sets IAM users can execute or delete."
    }
  ]
}
{
  "name": "GetStackPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetTemplateSummary",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListChangeSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListExports",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListImports",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListStackInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListStackResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListStackSetOperationResults",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListStackSetOperations",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListStackSets",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListStacks",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetStackPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "cloudformation:StackPolicyUrl",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An Amazon S3 stack policy URL. Use to control which stack policies IAM users can associate with a stack during a create or update stack action."
    }
  ]
}
{
  "name": "SignalResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopStackSetOperation",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateStack",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "cloudformation:RoleArn",
      "Type": "ARN",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "The ARN of an IAM service role. Use to control which service role IAM users can use to work with stacks or change sets."
    },
    {
      "Name": "cloudformation:StackPolicyUrl",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An Amazon S3 stack policy URL. Use to control which stack policies IAM users can associate with a stack during a create or update stack action."
    },
    {
      "Name": "cloudformation:TemplateUrl",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An Amazon S3 template URL. Use to control which templates IAM users can use when they create or update stacks."
    },
    {
      "Name": "cloudformation:ResourceTypes",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "The template resource types, such as <code>AWS::EC2::Instance</code>. Use to control which resource types IAM users can work with when they create or update a stack"
    }
  ]
}
{
  "name": "UpdateStackInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateStackSet",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stackset"
  ],
  "supportedResources": [
    {
      "Name": "stackset",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "cloudformation:RoleArn",
      "Type": "ARN",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "The ARN of an IAM service role. Use to control which service role IAM users can use to work with stacks or change sets."
    },
    {
      "Name": "cloudformation:TemplateUrl",
      "Type": "String",
      "DocPageRel": "${DocumenationLink}using-iam-template.html#using-iam-template-conditions",
      "Description": "An Amazon S3 template URL. Use to control which templates IAM users can use when they create or update stacks."
    }
  ]
}
{
  "name": "UpdateTerminationProtection",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stack"
  ],
  "supportedResources": [
    {
      "Name": "stack",
      "ARN": "arn:aws:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}",
      "RegEx": "^arn:aws:cloudformation:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ValidateTemplate",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudformation",
  "service": "AWS CloudFormation",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCheckItems",
  "evaluated": false,
  "allowed": false,
  "prefix": "trustedadvisor",
  "service": "AWS Trusted Advisor",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "checks"
  ],
  "supportedResources": [
    {
      "Name": "checks",
      "ARN": "arn:aws:trustedadvisor:${Region}:${Account}:checks/${CategoryCode}/${CheckId}",
      "RegEx": "arn:aws:trustedadvisor:*",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCheckRefreshStatuses",
  "evaluated": false,
  "allowed": false,
  "prefix": "trustedadvisor",
  "service": "AWS Trusted Advisor",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "checks"
  ],
  "supportedResources": [
    {
      "Name": "checks",
      "ARN": "arn:aws:trustedadvisor:${Region}:${Account}:checks/${CategoryCode}/${CheckId}",
      "RegEx": "arn:aws:trustedadvisor:*",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCheckSummaries",
  "evaluated": false,
  "allowed": false,
  "prefix": "trustedadvisor",
  "service": "AWS Trusted Advisor",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "checks"
  ],
  "supportedResources": [
    {
      "Name": "checks",
      "ARN": "arn:aws:trustedadvisor:${Region}:${Account}:checks/${CategoryCode}/${CheckId}",
      "RegEx": "arn:aws:trustedadvisor:*",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeNotificationPreferences",
  "evaluated": false,
  "allowed": false,
  "prefix": "trustedadvisor",
  "service": "AWS Trusted Advisor",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ExcludeCheckItems",
  "evaluated": false,
  "allowed": false,
  "prefix": "trustedadvisor",
  "service": "AWS Trusted Advisor",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "checks"
  ],
  "supportedResources": [
    {
      "Name": "checks",
      "ARN": "arn:aws:trustedadvisor:${Region}:${Account}:checks/${CategoryCode}/${CheckId}",
      "RegEx": "arn:aws:trustedadvisor:*",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "IncludeCheckItems",
  "evaluated": false,
  "allowed": false,
  "prefix": "trustedadvisor",
  "service": "AWS Trusted Advisor",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "checks"
  ],
  "supportedResources": [
    {
      "Name": "checks",
      "ARN": "arn:aws:trustedadvisor:${Region}:${Account}:checks/${CategoryCode}/${CheckId}",
      "RegEx": "arn:aws:trustedadvisor:*",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RefreshCheck",
  "evaluated": false,
  "allowed": false,
  "prefix": "trustedadvisor",
  "service": "AWS Trusted Advisor",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "checks"
  ],
  "supportedResources": [
    {
      "Name": "checks",
      "ARN": "arn:aws:trustedadvisor:${Region}:${Account}:checks/${CategoryCode}/${CheckId}",
      "RegEx": "arn:aws:trustedadvisor:*",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateNotificationPreferences",
  "evaluated": false,
  "allowed": false,
  "prefix": "trustedadvisor",
  "service": "AWS Trusted Advisor",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDeleteAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sdb",
  "service": "Amazon SimpleDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:sdb:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:sdb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchPutAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sdb",
  "service": "Amazon SimpleDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:sdb:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:sdb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "sdb",
  "service": "Amazon SimpleDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:sdb:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:sdb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sdb",
  "service": "Amazon SimpleDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:sdb:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:sdb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "sdb",
  "service": "Amazon SimpleDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:sdb:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:sdb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DomainMetadata",
  "evaluated": false,
  "allowed": false,
  "prefix": "sdb",
  "service": "Amazon SimpleDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:sdb:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:sdb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sdb",
  "service": "Amazon SimpleDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:sdb:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:sdb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDomains",
  "evaluated": false,
  "allowed": false,
  "prefix": "sdb",
  "service": "Amazon SimpleDB",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sdb",
  "service": "Amazon SimpleDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:sdb:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:sdb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "Select",
  "evaluated": false,
  "allowed": false,
  "prefix": "sdb",
  "service": "Amazon SimpleDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:sdb:${Region}:${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:sdb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ApplySecurityGroupsToLoadBalancer",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachLoadBalancerToSubnets",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ConfigureHealthCheck",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateAppCookieStickinessPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateLBCookieStickinessPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateLoadBalancer",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateLoadBalancerListeners",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateLoadBalancerPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteLoadBalancer",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteLoadBalancerListeners",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteLoadBalancerPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterInstancesFromLoadBalancer",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeInstanceHealth",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLoadBalancerAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLoadBalancerPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLoadBalancerPolicyTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLoadBalancers",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetachLoadBalancerFromSubnets",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisableAvailabilityZonesForLoadBalancer",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableAvailabilityZonesForLoadBalancer",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyLoadBalancerAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterInstancesWithLoadBalancer",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetLoadBalancerListenerSSLCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetLoadBalancerPoliciesForBackendServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetLoadBalancerPoliciesOfListener",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticloadbalancing",
  "service": "Elastic Load Balancing",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "loadbalancer"
  ],
  "supportedResources": [
    {
      "Name": "loadbalancer",
      "ARN": "arn:aws:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}",
      "RegEx": "^arn:aws:elasticloadbalancing:.+",
      "ContextKeys": [
        "aws:RequestTag/tag-key",
        "aws:TagKeys",
        "elasticloadbalancing:ResourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "aws:tagkeys",
        "aws:requesttag/tag-key",
        "elasticloadbalancing:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteLexicon",
  "evaluated": false,
  "allowed": false,
  "prefix": "polly",
  "service": "Amazon Polly",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "lexicon"
  ],
  "supportedResources": [
    {
      "Name": "lexicon",
      "ARN": "arn:aws:polly:${Region}:${Account}:lexicon/${LexiconName}",
      "RegEx": "^arn:aws:polly:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeVoices",
  "evaluated": false,
  "allowed": false,
  "prefix": "polly",
  "service": "Amazon Polly",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetLexicon",
  "evaluated": false,
  "allowed": false,
  "prefix": "polly",
  "service": "Amazon Polly",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "lexicon"
  ],
  "supportedResources": [
    {
      "Name": "lexicon",
      "ARN": "arn:aws:polly:${Region}:${Account}:lexicon/${LexiconName}",
      "RegEx": "^arn:aws:polly:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSpeechSynthesisTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "polly",
  "service": "Amazon Polly",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLexicons",
  "evaluated": false,
  "allowed": false,
  "prefix": "polly",
  "service": "Amazon Polly",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSpeechSynthesisTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "polly",
  "service": "Amazon Polly",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutLexicon",
  "evaluated": false,
  "allowed": false,
  "prefix": "polly",
  "service": "Amazon Polly",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "lexicon"
  ],
  "supportedResources": [
    {
      "Name": "lexicon",
      "ARN": "arn:aws:polly:${Region}:${Account}:lexicon/${LexiconName}",
      "RegEx": "^arn:aws:polly:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartSpeechSynthesisTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "polly",
  "service": "Amazon Polly",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "lexicon",
      "ARN": "arn:aws:polly:${Region}:${Account}:lexicon/${LexiconName}",
      "RegEx": "^arn:aws:polly:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SynthesizeSpeech",
  "evaluated": false,
  "allowed": false,
  "prefix": "polly",
  "service": "Amazon Polly",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "lexicon",
      "ARN": "arn:aws:polly:${Region}:${Account}:lexicon/${LexiconName}",
      "RegEx": "^arn:aws:polly:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job"
  ],
  "supportedResources": [
    {
      "Name": "job",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:job/${JobId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "preset",
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "preset",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:preset/${PresetId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    },
    {
      "Name": "pipeline",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:pipeline/${PipelineId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreatePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:pipeline/${PipelineId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreatePreset",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "preset"
  ],
  "supportedResources": [
    {
      "Name": "preset",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:preset/${PresetId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:pipeline/${PipelineId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePreset",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "preset"
  ],
  "supportedResources": [
    {
      "Name": "preset",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:preset/${PresetId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListJobsByPipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:pipeline/${PipelineId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListJobsByStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPipelines",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPresets",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ReadJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job"
  ],
  "supportedResources": [
    {
      "Name": "job",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:job/${JobId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ReadPipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:pipeline/${PipelineId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ReadPreset",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "preset"
  ],
  "supportedResources": [
    {
      "Name": "preset",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:preset/${PresetId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TestRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdatePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:pipeline/${PipelineId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdatePipelineNotifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:pipeline/${PipelineId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdatePipelineStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "elastictranscoder",
  "service": "Amazon Elastic Transcoder",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:elastictranscoder:${Region}:${Account}:pipeline/${PipelineId}",
      "RegEx": "^arn:aws:elastictranscoder:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateServiceRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:mobilehub:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:mobilehub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteProjectSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeployToStage",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeBundle",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ExportBundle",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ExportProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:mobilehub:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:mobilehub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GenerateProjectParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:mobilehub:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:mobilehub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:mobilehub:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:mobilehub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetProjectSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ImportProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "InstallBundle",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAvailableConnectors",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAvailableFeatures",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAvailableRegions",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBundles",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListProjectSnapshots",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListProjects",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SynchronizeProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:mobilehub:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:mobilehub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateProject",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "project"
  ],
  "supportedResources": [
    {
      "Name": "project",
      "ARN": "arn:aws:mobilehub:${Region}:${Account}:project/${ProjectId}",
      "RegEx": "^arn:aws:mobilehub:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "VerifyServiceRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobilehub",
  "service": "AWS Mobile Hub",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteReportDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "cur",
  "service": "AWS Cost and Usage Report",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cur"
  ],
  "supportedResources": [
    {
      "Name": "cur",
      "ARN": "arn:aws:cur:${Region}:${Account}:definition/${ReportName}",
      "RegEx": "^arn:aws:cur:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeReportDefinitions",
  "evaluated": false,
  "allowed": false,
  "prefix": "cur",
  "service": "AWS Cost and Usage Report",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutReportDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "cur",
  "service": "AWS Cost and Usage Report",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cur"
  ],
  "supportedResources": [
    {
      "Name": "cur",
      "ARN": "arn:aws:cur:${Region}:${Account}:definition/${ReportName}",
      "RegEx": "^arn:aws:cur:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateIpGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AuthorizeIpRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateIpGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateWorkspaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workspaceid",
    "workspacebundle"
  ],
  "supportedResources": [
    {
      "Name": "workspaceid",
      "ARN": "arn:aws:sky:${Region}:${Account}:workspace/${WorkspaceId}",
      "RegEx": "^arn:aws:sky:.+",
      "isRequired": true
    },
    {
      "Name": "workspacebundle",
      "ARN": "arn:aws:sky:${Region}:${Account}:workspacebundle/${BundleId}",
      "RegEx": "^arn:aws:sky:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteIpGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteWorkspaceImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAccountModifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClientProperties",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeIpGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeWorkspaceBundles",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workspacebundle"
  ],
  "supportedResources": [
    {
      "Name": "workspacebundle",
      "ARN": "arn:aws:sky:${Region}:${Account}:workspacebundle/${BundleId}",
      "RegEx": "^arn:aws:sky:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeWorkspaceDirectories",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeWorkspaceImages",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeWorkspaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeWorkspacesConnectionStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateIpGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ImportWorkspaceImage",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAvailableManagementCidrRanges",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyClientProperties",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyWorkspaceProperties",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workspaceid"
  ],
  "supportedResources": [
    {
      "Name": "workspaceid",
      "ARN": "arn:aws:sky:${Region}:${Account}:workspace/${WorkspaceId}",
      "RegEx": "^arn:aws:sky:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyWorkspaceState",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RebootWorkspaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workspaceid"
  ],
  "supportedResources": [
    {
      "Name": "workspaceid",
      "ARN": "arn:aws:sky:${Region}:${Account}:workspace/${WorkspaceId}",
      "RegEx": "^arn:aws:sky:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RebuildWorkspaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workspaceid"
  ],
  "supportedResources": [
    {
      "Name": "workspaceid",
      "ARN": "arn:aws:sky:${Region}:${Account}:workspace/${WorkspaceId}",
      "RegEx": "^arn:aws:sky:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RevokeIpRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartWorkspaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workspaceid"
  ],
  "supportedResources": [
    {
      "Name": "workspaceid",
      "ARN": "arn:aws:sky:${Region}:${Account}:workspace/${WorkspaceId}",
      "RegEx": "^arn:aws:sky:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopWorkspaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workspaceid"
  ],
  "supportedResources": [
    {
      "Name": "workspaceid",
      "ARN": "arn:aws:sky:${Region}:${Account}:workspace/${WorkspaceId}",
      "RegEx": "^arn:aws:sky:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TerminateWorkspaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workspaceid"
  ],
  "supportedResources": [
    {
      "Name": "workspaceid",
      "ARN": "arn:aws:sky:${Region}:${Account}:workspace/${WorkspaceId}",
      "RegEx": "^arn:aws:sky:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateRulesOfIpGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "workspaces",
  "service": "Amazon WorkSpaces",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AcceptDelegate",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ActivateUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddOrUpdateGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociatePhoneNumberWithUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociatePhoneNumbersWithVoiceConnector",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AuthorizeDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchDeletePhoneNumber",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchSuspendUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchUnsuspendUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchUpdatePhoneNumber",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchUpdateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ConnectDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateApiKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCDRBucket",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePhoneNumberOrder",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateVoiceConnector",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAccountOpenIdConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteApiKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCDRBucket",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDelegate",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeletePhoneNumber",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVoiceConnector",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVoiceConnectorOrigination",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVoiceConnectorTermination",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteVoiceConnectorTerminationCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociatePhoneNumberFromUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociatePhoneNumbersFromVoiceConnector",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisconnectDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAccountResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAccountSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAccountWithOpenIdConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCDRBucket",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGlobalSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMeetingDetail",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPhoneNumber",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPhoneNumberOrder",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTelephonyLimits",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetUserActivityReportData",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetUserByEmail",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetUserSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetVoiceConnector",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetVoiceConnectorOrigination",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetVoiceConnectorTermination",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetVoiceConnectorTerminationHealth",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "InviteDelegate",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "InviteUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAccountUsageReportData",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAccounts",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListApiKeys",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCDRBucket",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCallingRegions",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDelegates",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDirectories",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDomains",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListMeetingEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListMeetingsReportData",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPhoneNumberOrders",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPhoneNumbers",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListVoiceConnectorTerminationCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListVoiceConnectors",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "LogoutUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutVoiceConnectorOrigination",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutVoiceConnectorTermination",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutVoiceConnectorTerminationCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RenameAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RenewDelegate",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResetAccountResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResetPersonalPIN",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RestorePhoneNumber",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RetrieveDataExports",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SearchAvailablePhoneNumbers",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartDataExport",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SubmitSupportRequest",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SuspendUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UnauthorizeDirectory",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateAccountOpenIdConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateAccountResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateAccountSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateCDRSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateGlobalSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdatePhoneNumber",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateSupportedLicenses",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateUserLicenses",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateUserSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateVoiceConnector",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ValidateAccountResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "chime",
  "service": "Amazon Chime",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelTimer",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelWorkflowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CompleteWorkflowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ContinueAsNewWorkflowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CountClosedWorkflowExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:typeFilter.version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a type filter with the specified version."
    },
    {
      "Name": "swf:typeFilter.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a type filter with the specified name."
    },
    {
      "Name": "swf:tagFilter.tag",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a matching tagFilter.tag value."
    }
  ]
}
{
  "name": "CountOpenWorkflowExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:typeFilter.version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a type filter with the specified version."
    },
    {
      "Name": "swf:typeFilter.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a type filter with the specified name."
    },
    {
      "Name": "swf:tagFilter.tag",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a matching tagFilter.tag value."
    }
  ]
}
{
  "name": "CountPendingActivityTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:taskList.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a tasklist with the specified name."
    }
  ]
}
{
  "name": "CountPendingDecisionTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:taskList.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a tasklist with the specified name."
    }
  ]
}
{
  "name": "DeprecateActivityType",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:activityType.version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Contstrains the policy statement to only an activity type of the specified version."
    },
    {
      "Name": "swf:activityType.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only an activity type of the specified name."
    }
  ]
}
{
  "name": "DeprecateDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeprecateWorkflowType",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:workflowType.version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a workflow type of the specified version."
    },
    {
      "Name": "swf:workflowType.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a workflow type of the specified name."
    }
  ]
}
{
  "name": "DescribeActivityType",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:activityType.version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Contstrains the policy statement to only an activity type of the specified version."
    },
    {
      "Name": "swf:activityType.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only an activity type of the specified name."
    }
  ]
}
{
  "name": "DescribeDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeWorkflowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeWorkflowType",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:workflowType.version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a workflow type of the specified version."
    },
    {
      "Name": " swf:workflowType.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only a workflow of the specified type."
    }
  ]
}
{
  "name": "FailWorkflowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetWorkflowExecutionHistory",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListActivityTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListClosedWorkflowExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:typeFilter.version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a type filter with the specified version."
    },
    {
      "Name": "swf:typeFilter.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a type filter with the specified name."
    },
    {
      "Name": "swf:tagFilter.tag",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a matching tagFilter.tag value."
    }
  ]
}
{
  "name": "ListDomains",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListOpenWorkflowExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:typeFilter.version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a type filter with the specified version."
    },
    {
      "Name": "swf:typeFilter.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a type filter with the specified name."
    },
    {
      "Name": "swf:tagFilter.tag",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a matching tagFilter.tag value."
    }
  ]
}
{
  "name": "ListWorkflowTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PollForActivityTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:taskList.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a tasklist with the specified name."
    }
  ]
}
{
  "name": "PollForDecisionTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:taskList.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a tasklist with the specified name."
    }
  ]
}
{
  "name": "RecordActivityTaskHeartbeat",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RecordMarker",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterActivityType",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:defaultTaskList.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a matching defaultTaskList name."
    },
    {
      "Name": "swf:version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only activities or workflows with the specified version."
    },
    {
      "Name": "swf:name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only activities or workflows with the specified name."
    }
  ]
}
{
  "name": "RegisterDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterWorkflowType",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:defaultTaskList.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a matching defaultTaskList name."
    },
    {
      "Name": "swf:version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only activities or workflows with the specified version."
    },
    {
      "Name": "swf:name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only activities or workflows with the specified name."
    }
  ]
}
{
  "name": "RequestCancelActivityTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RequestCancelExternalWorkflowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RequestCancelWorkflowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RespondActivityTaskCanceled",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RespondActivityTaskCompleted",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:activityType.version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Contstrains the policy statement to only an activity type of the specified version."
    },
    {
      "Name": "swf:activityType.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only an activity type of the specified name."
    },
    {
      "Name": "swf:workflowType.version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a workflow type of the specified version."
    },
    {
      "Name": "swf:tagList.member.0",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that contain the specified tag."
    },
    {
      "Name": "swf:tagList.member.1",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that contain the specified tag."
    },
    {
      "Name": "swf:tagList.member.3",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that contain the specified tag."
    },
    {
      "Name": "swf:workflowType.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a workflow type of the specified name."
    },
    {
      "Name": "swf:tagList.member.2",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that contain the specified tag."
    },
    {
      "Name": "swf:tagList.member.4",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that contain the specified tag."
    },
    {
      "Name": "swf:taskList.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a tasklist with the specified name."
    }
  ]
}
{
  "name": "RespondActivityTaskFailed",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RespondDecisionTaskCompleted",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ScheduleActivityTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SignalExternalWorkflowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SignalWorkflowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartChildWorkflowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartTimer",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartWorkflowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "swf:workflowType.version",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a workflow type of the specified version."
    },
    {
      "Name": "swf:tagList.member.0",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that contain the specified tag."
    },
    {
      "Name": "swf:tagList.member.1",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that contain the specified tag."
    },
    {
      "Name": "swf:tagList.member.3",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that contain the specified tag."
    },
    {
      "Name": "swf:workflowType.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a workflow type of the specified name."
    },
    {
      "Name": "swf:tagList.member.2",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that contain the specified tag."
    },
    {
      "Name": "swf:tagList.member.4",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that contain the specified tag."
    },
    {
      "Name": "swf:taskList.name",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonswf/latest/APIReference/swf-dev-iam.html#swf-dev-iam.api",
      "Description": "Constrains the policy statement to only requests that specify a tasklist with the specified name."
    }
  ]
}
{
  "name": "TerminateWorkflowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "swf",
  "service": "Amazon Simple Workflow Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "domain"
  ],
  "supportedResources": [
    {
      "Name": "domain",
      "ARN": "arn:aws:swf::${Account}:domain/${DomainName}",
      "RegEx": "^arn:aws:swf:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AcknowledgeJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AcknowledgeThirdPartyJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCustomActionType",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "actiontype"
  ],
  "supportedResources": [
    {
      "Name": "actiontype",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:actiontype:${Owner}/${Category}/${Provider}/${Version}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreatePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteCustomActionType",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "actiontype"
  ],
  "supportedResources": [
    {
      "Name": "actiontype",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:actiontype:${Owner}/${Category}/${Provider}/${Version}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteWebhook",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webhook"
  ],
  "supportedResources": [
    {
      "Name": "webhook",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:webhook:${WebhookName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterWebhookWithThirdParty",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webhook"
  ],
  "supportedResources": [
    {
      "Name": "webhook",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:webhook:${WebhookName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisableStageTransition",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stage"
  ],
  "supportedResources": [
    {
      "Name": "stage",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}/${StageName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableStageTransition",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stage"
  ],
  "supportedResources": [
    {
      "Name": "stage",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}/${StageName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetJobDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetPipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPipelineExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPipelineState",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetThirdPartyJobDetails",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListActionTypes",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "actiontype"
  ],
  "supportedResources": [
    {
      "Name": "actiontype",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:actiontype:${Owner}/${Category}/${Provider}/${Version}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListPipelineExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListPipelines",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListWebhooks",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webhook"
  ],
  "supportedResources": [
    {
      "Name": "webhook",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:webhook:${WebhookName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PollForJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "actiontype"
  ],
  "supportedResources": [
    {
      "Name": "actiontype",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:actiontype:${Owner}/${Category}/${Provider}/${Version}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PollForThirdPartyJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutActionRevision",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "action"
  ],
  "supportedResources": [
    {
      "Name": "action",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}/${StageName}/${ActionName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutApprovalResult",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutJobFailureResult",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutJobSuccessResult",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutThirdPartyJobFailureResult",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutThirdPartyJobSuccessResult",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutWebhook",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webhook",
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "webhook",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:webhook:${WebhookName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    },
    {
      "Name": "pipeline",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterWebhookWithThirdParty",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "webhook"
  ],
  "supportedResources": [
    {
      "Name": "webhook",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:webhook:${WebhookName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RetryStageExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stage"
  ],
  "supportedResources": [
    {
      "Name": "stage",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}/${StageName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartPipelineExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdatePipeline",
  "evaluated": false,
  "allowed": false,
  "prefix": "codepipeline",
  "service": "AWS CodePipeline",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "pipeline"
  ],
  "supportedResources": [
    {
      "Name": "pipeline",
      "ARN": "arn:aws:codepipeline:${Region}:${Account}:${PipelineName}",
      "RegEx": "arn:aws:codepipeline:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateBroker",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteBroker",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeBroker",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeConfigurationRevision",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListBrokers",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListConfigurationRevisions",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RebootBroker",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateBroker",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "mq",
  "service": "Amazon MQ",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchGetItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dynamodb:ReturnConsumedCapacity",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnConsumedCapacity parameter of a request. Contains either \"TOTAL\" or \"NONE\"."
    },
    {
      "Name": "dynamodb:Attributes",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the attribute (field or column) names of the table."
    },
    {
      "Name": "dynamodb:LeadingKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filters based on the partition key of the table."
    },
    {
      "Name": "dynamodb:Select",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the Select parameter of a Query or Scan request."
    }
  ]
}
{
  "name": "BatchWriteItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dynamodb:ReturnConsumedCapacity",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnConsumedCapacity parameter of a request. Contains either \"TOTAL\" or \"NONE\"."
    },
    {
      "Name": "dynamodb:Attributes",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the attribute (field or column) names of the table."
    },
    {
      "Name": "dynamodb:LeadingKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filters based on the partition key of the table."
    }
  ]
}
{
  "name": "ConditionCheckItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dynamodb:ReturnConsumedCapacity",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnConsumedCapacity parameter of a request. Contains either \"TOTAL\" or \"NONE\"."
    },
    {
      "Name": "dynamodb:ReturnValues",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnValues parameter of request. Contains one of the following: \"ALL_OLD\", \"UPDATED_OLD\",\"ALL_NEW\",\"UPDATED_NEW\", or \"NONE\"."
    },
    {
      "Name": "dynamodb:Attributes",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the attribute (field or column) names of the table."
    },
    {
      "Name": "dynamodb:LeadingKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filters based on the partition key of the table."
    }
  ]
}
{
  "name": "CreateBackup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateGlobalTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "global-table",
    "table"
  ],
  "supportedResources": [
    {
      "Name": "global-table",
      "ARN": "arn:aws:dynamodb::${Account}:global-table/${GlobalTableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    },
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteBackup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backup"
  ],
  "supportedResources": [
    {
      "Name": "backup",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}/backup/${BackupName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dynamodb:ReturnConsumedCapacity",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnConsumedCapacity parameter of a request. Contains either \"TOTAL\" or \"NONE\"."
    },
    {
      "Name": "dynamodb:ReturnValues",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnValues parameter of request. Contains one of the following: \"ALL_OLD\", \"UPDATED_OLD\",\"ALL_NEW\",\"UPDATED_NEW\", or \"NONE\"."
    },
    {
      "Name": "dynamodb:Attributes",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the attribute (field or column) names of the table."
    },
    {
      "Name": "dynamodb:EnclosingOperation",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Used to block Transactions APIs calls and allow the non-Transaction APIs calls and vice-versa."
    },
    {
      "Name": "dynamodb:LeadingKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filters based on the partition key of the table."
    }
  ]
}
{
  "name": "DeleteTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeBackup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backup"
  ],
  "supportedResources": [
    {
      "Name": "backup",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}/backup/${BackupName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeContinuousBackups",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeGlobalTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "global-table"
  ],
  "supportedResources": [
    {
      "Name": "global-table",
      "ARN": "arn:aws:dynamodb::${Account}:global-table/${GlobalTableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeGlobalTableSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "global-table"
  ],
  "supportedResources": [
    {
      "Name": "global-table",
      "ARN": "arn:aws:dynamodb::${Account}:global-table/${GlobalTableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeLimits",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservedCapacity",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservedCapacityOfferings",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}/stream/${StreamLabel}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeTimeToLive",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dynamodb:ReturnConsumedCapacity",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnConsumedCapacity parameter of a request. Contains either \"TOTAL\" or \"NONE\"."
    },
    {
      "Name": "dynamodb:Attributes",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the attribute (field or column) names of the table."
    },
    {
      "Name": "dynamodb:EnclosingOperation",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Used to block Transactions APIs calls and allow the non-Transaction APIs calls and vice-versa."
    },
    {
      "Name": "dynamodb:LeadingKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filters based on the partition key of the table."
    },
    {
      "Name": "dynamodb:Select",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the Select parameter of a Query or Scan request."
    }
  ]
}
{
  "name": "GetRecords",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}/stream/${StreamLabel}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetShardIterator",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}/stream/${StreamLabel}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListBackups",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGlobalTables",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListStreams",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTables",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsOfResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PurchaseReservedCapacityOfferings",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dynamodb:ReturnConsumedCapacity",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnConsumedCapacity parameter of a request. Contains either \"TOTAL\" or \"NONE\"."
    },
    {
      "Name": "dynamodb:ReturnValues",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnValues parameter of request. Contains one of the following: \"ALL_OLD\", \"UPDATED_OLD\",\"ALL_NEW\",\"UPDATED_NEW\", or \"NONE\"."
    },
    {
      "Name": "dynamodb:Attributes",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the attribute (field or column) names of the table."
    },
    {
      "Name": "dynamodb:EnclosingOperation",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Used to block Transactions APIs calls and allow the non-Transaction APIs calls and vice-versa."
    },
    {
      "Name": "dynamodb:LeadingKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filters based on the partition key of the table."
    }
  ]
}
{
  "name": "Query",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    },
    {
      "Name": "index",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}/index/${IndexName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dynamodb:ReturnConsumedCapacity",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnConsumedCapacity parameter of a request. Contains either \"TOTAL\" or \"NONE\"."
    },
    {
      "Name": "dynamodb:ReturnValues",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnValues parameter of request. Contains one of the following: \"ALL_OLD\", \"UPDATED_OLD\",\"ALL_NEW\",\"UPDATED_NEW\", or \"NONE\"."
    },
    {
      "Name": "dynamodb:Attributes",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the attribute (field or column) names of the table."
    },
    {
      "Name": "dynamodb:LeadingKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filters based on the partition key of the table."
    },
    {
      "Name": "dynamodb:Select",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the Select parameter of a Query or Scan request."
    }
  ]
}
{
  "name": "RestoreTableFromBackup",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "backup",
    "table"
  ],
  "supportedResources": [
    {
      "Name": "backup",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}/backup/${BackupName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    },
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RestoreTableToPointInTime",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "Scan",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    },
    {
      "Name": "index",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}/index/${IndexName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dynamodb:ReturnConsumedCapacity",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnConsumedCapacity parameter of a request. Contains either \"TOTAL\" or \"NONE\"."
    },
    {
      "Name": "dynamodb:ReturnValues",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnValues parameter of request. Contains one of the following: \"ALL_OLD\", \"UPDATED_OLD\",\"ALL_NEW\",\"UPDATED_NEW\", or \"NONE\"."
    },
    {
      "Name": "dynamodb:Attributes",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the attribute (field or column) names of the table."
    },
    {
      "Name": "dynamodb:LeadingKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filters based on the partition key of the table."
    },
    {
      "Name": "dynamodb:Select",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the Select parameter of a Query or Scan request."
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateContinuousBackups",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateGlobalTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "global-table",
    "table"
  ],
  "supportedResources": [
    {
      "Name": "global-table",
      "ARN": "arn:aws:dynamodb::${Account}:global-table/${GlobalTableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    },
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateGlobalTableSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "global-table",
    "table"
  ],
  "supportedResources": [
    {
      "Name": "global-table",
      "ARN": "arn:aws:dynamodb::${Account}:global-table/${GlobalTableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    },
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateItem",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "dynamodb:ReturnConsumedCapacity",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnConsumedCapacity parameter of a request. Contains either \"TOTAL\" or \"NONE\"."
    },
    {
      "Name": "dynamodb:ReturnValues",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the ReturnValues parameter of request. Contains one of the following: \"ALL_OLD\", \"UPDATED_OLD\",\"ALL_NEW\",\"UPDATED_NEW\", or \"NONE\"."
    },
    {
      "Name": "dynamodb:Attributes",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filter based on the attribute (field or column) names of the table."
    },
    {
      "Name": "dynamodb:EnclosingOperation",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Used to block Transactions APIs calls and allow the non-Transaction APIs calls and vice-versa."
    },
    {
      "Name": "dynamodb:LeadingKeys",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html#FGAC_DDB.ConditionKeys",
      "Description": "Filters based on the partition key of the table."
    }
  ]
}
{
  "name": "UpdateTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateTimeToLive",
  "evaluated": false,
  "allowed": false,
  "prefix": "dynamodb",
  "service": "Amazon DynamoDB",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "table"
  ],
  "supportedResources": [
    {
      "Name": "table",
      "ARN": "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}",
      "RegEx": "^arn:aws:dynamodb:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateComputeEnvironment",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateJobQueue",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteComputeEnvironment",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteJobQueue",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeregisterJobDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job-definition"
  ],
  "supportedResources": [
    {
      "Name": "job-definition",
      "ARN": "arn:aws:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision}",
      "RegEx": "^arn:aws:batch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeComputeEnvironments",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeJobDefinitions",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeJobQueues",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterJobDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job-definition"
  ],
  "supportedResources": [
    {
      "Name": "job-definition",
      "ARN": "arn:aws:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision}",
      "RegEx": "^arn:aws:batch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "batch:User",
      "Type": "String",
      "Description": "The user name or numeric uid to use inside the container."
    },
    {
      "Name": "batch:Image",
      "Type": "String",
      "Description": "The image used to start a container."
    },
    {
      "Name": "batch:Privileged",
      "Type": "Boolean",
      "Description": "When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user)."
    }
  ]
}
{
  "name": "SubmitJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "job-definition",
    "job-queue"
  ],
  "supportedResources": [
    {
      "Name": "job-definition",
      "ARN": "arn:aws:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision}",
      "RegEx": "^arn:aws:batch:.+",
      "isRequired": true
    },
    {
      "Name": "job-queue",
      "ARN": "arn:aws:batch:${Region}:${Account}:job-queue/${JobQueueName}",
      "RegEx": "^arn:aws:batch:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TerminateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateComputeEnvironment",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateJobQueue",
  "evaluated": false,
  "allowed": false,
  "prefix": "batch",
  "service": "AWS Batch",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddPermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ChangeMessageVisibility",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ChangeMessageVisibilityBatch",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateQueue",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteMessage",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteMessageBatch",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteQueue",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetQueueAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetQueueUrl",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDeadLetterSourceQueues",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListQueueTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListQueues",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PurgeQueue",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ReceiveMessage",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemovePermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SendMessage",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SendMessageBatch",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetQueueAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagQueue",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagQueue",
  "evaluated": false,
  "allowed": false,
  "prefix": "sqs",
  "service": "Amazon SQS",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "queue"
  ],
  "supportedResources": [
    {
      "Name": "queue",
      "ARN": "arn:aws:sqs:${Region}:${Account}:${QueueName}",
      "RegEx": "^arn:aws:sqs:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetectEntities",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehendmedical",
  "service": "Comprehend Medical",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetectPHI",
  "evaluated": false,
  "allowed": false,
  "prefix": "comprehendmedical",
  "service": "Comprehend Medical",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "Filters requests based on the allowed set of values for each of the tags"
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "Filters requests based on the presence of mandatory tag keys in the request"
    }
  ]
}
{
  "name": "DeleteStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDataEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetHLSStreamingSessionURL",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetMedia",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetMediaForFragmentList",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListFragments",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListStreams",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutMedia",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "Filters requests based on the allowed set of values for each of the tags"
    },
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "Filters requests based on the presence of mandatory tag keys in the request"
    }
  ]
}
{
  "name": "UntagStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "Filters requests based on the presence of mandatory tag keys in the request"
    }
  ]
}
{
  "name": "UpdateDataRetention",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "kinesisvideo",
  "service": "Amazon Kinesis Video Streams",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "stream"
  ],
  "supportedResources": [
    {
      "Name": "stream",
      "ARN": "arn:aws:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}",
      "RegEx": "^arn:aws:kinesisvideo:.+",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCloudFrontOriginAccessIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDistribution",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDistributionWithTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateInvalidation",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateStreamingDistribution",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateStreamingDistributionWithTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCloudFrontOriginAccessIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDistribution",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteStreamingDistribution",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCloudFrontOriginAccessIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCloudFrontOriginAccessIdentityConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDistribution",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDistributionConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetInvalidation",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetStreamingDistribution",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetStreamingDistributionConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCloudFrontOriginAccessIdentities",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDistributions",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDistributionsByWebACLId",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListInvalidations",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListStreamingDistributions",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateCloudFrontOriginAccessIdentity",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDistribution",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateStreamingDistribution",
  "evaluated": false,
  "allowed": false,
  "prefix": "cloudfront",
  "service": "Amazon CloudFront",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AcknowledgeMessage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2messages",
  "service": "Amazon Message Delivery Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteMessage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2messages",
  "service": "Amazon Message Delivery Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "FailMessage",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2messages",
  "service": "Amazon Message Delivery Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2messages",
  "service": "Amazon Message Delivery Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMessages",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2messages",
  "service": "Amazon Message Delivery Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendReply",
  "evaluated": false,
  "allowed": false,
  "prefix": "ec2messages",
  "service": "Amazon Message Delivery Service",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AbortMultipartUpload",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AbortVaultLock",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddTagsToVault",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CompleteMultipartUpload",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CompleteVaultLock",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateVault",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteArchive",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "glacier:ArchiveAgeInDays",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonglacier/latest/dev/access-control-overview.html#specifying-conditions",
      "Description": "How long an archive has been stored in the vault, in days."
    }
  ]
}
{
  "name": "DeleteVault",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteVaultAccessPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteVaultNotifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeVault",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDataRetrievalPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetJobOutput",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetVaultAccessPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetVaultLock",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetVaultNotifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "InitiateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "glacier:ArchiveAgeInDays",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/amazonglacier/latest/dev/access-control-overview.html#specifying-conditions",
      "Description": "How long an archive has been stored in the vault, in days."
    }
  ]
}
{
  "name": "InitiateMultipartUpload",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "InitiateVaultLock",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListMultipartUploads",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListParts",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListProvisionedCapacity",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForVault",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListVaults",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PurchaseProvisionedCapacity",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RemoveTagsFromVault",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetDataRetrievalPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetVaultAccessPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetVaultNotifications",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UploadArchive",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UploadMultipartPart",
  "evaluated": false,
  "allowed": false,
  "prefix": "glacier",
  "service": "Amazon Glacier",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "vault"
  ],
  "supportedResources": [
    {
      "Name": "vault",
      "ARN": "arn:aws:glacier:${Region}:${Account}:vaults/${VaultName}",
      "RegEx": "^arn:aws:glacier:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateWebsiteCertificateAuthority",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCompanyNetworkConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDevicePolicyConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeFleetMetadata",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeIdentityProviderConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeWebsiteCertificateAuthority",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateWebsiteCertificateAuthority",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDevices",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListFleets",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListWebsiteCertificateAuthorities",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SignOutUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateCompanyNetworkConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateDevicePolicyConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateFleetMetadata",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateIdentityProviderConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "worklink",
  "service": "Amazon WorkLink",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "fleet"
  ],
  "supportedResources": [
    {
      "Name": "fleet",
      "ARN": "arn:aws:worklink::${Account}:fleet/${fleetName}",
      "RegEx": "^arn:aws:worklink::.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateResolverEndpointIpAddress",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-endpoint"
  ],
  "supportedResources": [
    {
      "Name": "resolver-endpoint",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-endpoint/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateResolverRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-rule"
  ],
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateResolverEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-endpoint"
  ],
  "supportedResources": [
    {
      "Name": "resolver-endpoint",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-endpoint/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateResolverRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-rule"
  ],
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteResolverEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-endpoint"
  ],
  "supportedResources": [
    {
      "Name": "resolver-endpoint",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-endpoint/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteResolverRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-rule"
  ],
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateResolverEndpointIpAddress",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-endpoint"
  ],
  "supportedResources": [
    {
      "Name": "resolver-endpoint",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-endpoint/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateResolverRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-rule"
  ],
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetResolverEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-endpoint"
  ],
  "supportedResources": [
    {
      "Name": "resolver-endpoint",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-endpoint/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetResolverRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-rule"
  ],
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetResolverRuleAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-rule"
  ],
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetResolverRulePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-rule"
  ],
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListResolverEndpointIpAddresses",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-endpoint"
  ],
  "supportedResources": [
    {
      "Name": "resolver-endpoint",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-endpoint/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListResolverEndpoints",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-endpoint"
  ],
  "supportedResources": [
    {
      "Name": "resolver-endpoint",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-endpoint/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListResolverRuleAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-rule"
  ],
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListResolverRules",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-rule"
  ],
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": false
    },
    {
      "Name": "resolver-endpoint",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-endpoint/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutResolverRulePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-rule"
  ],
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": false
    },
    {
      "Name": "resolver-endpoint",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-endpoint/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": false
    },
    {
      "Name": "resolver-endpoint",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-endpoint/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateResolverEndpoint",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-endpoint"
  ],
  "supportedResources": [
    {
      "Name": "resolver-endpoint",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-endpoint/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateResolverRule",
  "evaluated": false,
  "allowed": false,
  "prefix": "route53resolver",
  "service": "Amazon Route 53 Resolver",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resolver-rule"
  ],
  "supportedResources": [
    {
      "Name": "resolver-rule",
      "ARN": "arn:aws:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}",
      "RegEx": "^arn:aws:route53resolver:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AnalyzeDocument",
  "evaluated": false,
  "allowed": false,
  "prefix": "textract",
  "service": "Amazon Textract",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DetectDocumentText",
  "evaluated": false,
  "allowed": false,
  "prefix": "textract",
  "service": "Amazon Textract",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDocumentAnalysis",
  "evaluated": false,
  "allowed": false,
  "prefix": "textract",
  "service": "Amazon Textract",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDocumentTextDetection",
  "evaluated": false,
  "allowed": false,
  "prefix": "textract",
  "service": "Amazon Textract",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartDocumentAnalysis",
  "evaluated": false,
  "allowed": false,
  "prefix": "textract",
  "service": "Amazon Textract",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartDocumentTextDetection",
  "evaluated": false,
  "allowed": false,
  "prefix": "textract",
  "service": "Amazon Textract",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddInstanceFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddInstanceGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddJobFlowSteps",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "editor",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:editor/${EditorId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "elasticmapreduce:RequestTag/${TagKey}",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-access-iam.html#emr-fine-grained-cluster-access",
      "Description": "Filters access to actions based on whether the tag and value pair is created for an Amazon EMR resource along with the action."
    }
  ]
}
{
  "name": "CancelSteps",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateEditor",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "elasticmapreduce:RequestTag/${TagKey}",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-access-iam.html#emr-fine-grained-cluster-access",
      "Description": "Filters access to actions based on whether the tag and value pair is created for an Amazon EMR resource along with the action."
    }
  ]
}
{
  "name": "CreateSecurityConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteEditor",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "editor"
  ],
  "supportedResources": [
    {
      "Name": "editor",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:editor/${EditorId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSecurityConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEditor",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "editor"
  ],
  "supportedResources": [
    {
      "Name": "editor",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:editor/${EditorId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeSecurityConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeStep",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListBootstrapActions",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListClusters",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListEditors",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListInstanceFleets",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListInstanceGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListSecurityConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSteps",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyInstanceFleet",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyInstanceGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "OpenEditorInConsole",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "editor",
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "editor",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:editor/${EditorId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    },
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutAutoScalingPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveAutoScalingPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "editor",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:editor/${EditorId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RunJobFlow",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SetTerminationProtection",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartEditor",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "editor",
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "editor",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:editor/${EditorId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    },
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopEditor",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "editor"
  ],
  "supportedResources": [
    {
      "Name": "editor",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:editor/${EditorId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TerminateJobFlows",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}",
      "RegEx": "^arn:aws:elasticmapreduce:.+",
      "ContextKeys": [
        "elasticmapreduce:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "elasticmapreduce:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ViewEventsFromAllClustersInConsole",
  "evaluated": false,
  "allowed": false,
  "prefix": "elasticmapreduce",
  "service": "Amazon Elastic MapReduce",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyBudget",
  "evaluated": false,
  "allowed": false,
  "prefix": "budgets",
  "service": "AWS Budget Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "budget"
  ],
  "supportedResources": [
    {
      "Name": "budget",
      "ARN": "arn:aws:budgets::${Account}:budget/${BudgetName}",
      "RegEx": "^arn:aws:budgets:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ViewBudget",
  "evaluated": false,
  "allowed": false,
  "prefix": "budgets",
  "service": "AWS Budget Service",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "budget"
  ],
  "supportedResources": [
    {
      "Name": "budget",
      "ARN": "arn:aws:budgets::${Account}:budget/${BudgetName}",
      "RegEx": "^arn:aws:budgets:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateWorkload",
  "evaluated": false,
  "allowed": false,
  "prefix": "wellarchitected",
  "service": "AWS Well-Architected Tool",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetWorkload",
  "evaluated": false,
  "allowed": false,
  "prefix": "wellarchitected",
  "service": "AWS Well-Architected Tool",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "workload"
  ],
  "supportedResources": [
    {
      "Name": "workload",
      "ARN": "arn:aws:wellarchitected:${Region}:${Account}:workload/${ResourceId}",
      "RegEx": "^arn:aws:wellarchitected:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListWorkloads",
  "evaluated": false,
  "allowed": false,
  "prefix": "wellarchitected",
  "service": "AWS Well-Architected Tool",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AddTagsToResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelCommand",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateActivation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document"
  ],
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateAssociationBatch",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document"
  ],
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDocument",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateMaintenanceWindow",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePatchBaseline",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateResourceDataSync",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteActivation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document"
  ],
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDocument",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document"
  ],
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteMaintenanceWindow",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteParameter",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "parameter"
  ],
  "supportedResources": [
    {
      "Name": "parameter",
      "ARN": "arn:aws:ssm:${Region}:${Account}:parameter/${FullyQualifiedParameterName}",
      "RegEx": "^arn:aws:ssm:.+",
      "ContextKeys": [
        "ssm:resourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "ssm:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "parameter"
  ],
  "supportedResources": [
    {
      "Name": "parameter",
      "ARN": "arn:aws:ssm:${Region}:${Account}:parameter/${FullyQualifiedParameterName}",
      "RegEx": "^arn:aws:ssm:.+",
      "ContextKeys": [
        "ssm:resourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "ssm:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePatchBaseline",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "patchbaseline"
  ],
  "supportedResources": [
    {
      "Name": "patchbaseline",
      "ARN": "arn:aws:ssm:${Region}:${Account}:patchbaseline/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteResourceDataSync",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeregisterManagedInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "managed-instance"
  ],
  "supportedResources": [
    {
      "Name": "managed-instance",
      "ARN": "arn:aws:ssm:${Region}:${Account}:managed-instance/${ManagedInstanceName}",
      "RegEx": "^arn:aws:ssm:.+:",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterPatchBaselineForPatchGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "patchbaseline"
  ],
  "supportedResources": [
    {
      "Name": "patchbaseline",
      "ARN": "arn:aws:ssm:${Region}:${Account}:patchbaseline/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterTargetFromMaintenanceWindow",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterTaskFromMaintenanceWindow",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeActivations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document"
  ],
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAssociationExecutionTargets",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAssociationExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAutomationExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAutomationStepExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAvailablePatches",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDocument",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document"
  ],
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDocumentParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document"
  ],
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeDocumentPermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document"
  ],
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEffectiveInstanceAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEffectivePatchesForPatchBaseline",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "patchbaseline"
  ],
  "supportedResources": [
    {
      "Name": "patchbaseline",
      "ARN": "arn:aws:ssm:${Region}:${Account}:patchbaseline/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeInstanceAssociationsStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInstanceInformation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeInstancePatchStates",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInstancePatchStatesForPatchGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInstancePatches",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeInstanceProperties",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeMaintenanceWindowExecutionTaskInvocations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeMaintenanceWindowExecutionTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeMaintenanceWindowExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeMaintenanceWindowTargets",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeMaintenanceWindowTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeMaintenanceWindows",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePatchBaselines",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePatchGroupState",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePatchGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSessions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAutomationExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCommandInvocation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetConnectionStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDefaultPatchBaseline",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "patchbaseline"
  ],
  "supportedResources": [
    {
      "Name": "patchbaseline",
      "ARN": "arn:aws:ssm:${Region}:${Account}:patchbaseline/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDeployablePatchSnapshotForInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDocument",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document"
  ],
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetInventory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetInventorySchema",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMaintenanceWindow",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetMaintenanceWindowExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMaintenanceWindowExecutionTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMaintenanceWindowExecutionTaskInvocation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetMaintenanceWindowTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "windowtask",
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "windowtask",
      "ARN": "arn:aws:ssm:${Region}:${Account}:windowtask/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    },
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetManifest",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetParameter",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "parameter"
  ],
  "supportedResources": [
    {
      "Name": "parameter",
      "ARN": "arn:aws:ssm:${Region}:${Account}:parameter/${FullyQualifiedParameterName}",
      "RegEx": "^arn:aws:ssm:.+",
      "ContextKeys": [
        "ssm:resourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "ssm:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetParameterHistory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "parameter"
  ],
  "supportedResources": [
    {
      "Name": "parameter",
      "ARN": "arn:aws:ssm:${Region}:${Account}:parameter/${FullyQualifiedParameterName}",
      "RegEx": "^arn:aws:ssm:.+",
      "ContextKeys": [
        "ssm:resourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "ssm:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "parameter"
  ],
  "supportedResources": [
    {
      "Name": "parameter",
      "ARN": "arn:aws:ssm:${Region}:${Account}:parameter/${FullyQualifiedParameterName}",
      "RegEx": "^arn:aws:ssm:.+",
      "ContextKeys": [
        "ssm:resourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "ssm:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetParametersByPath",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "parameter"
  ],
  "supportedResources": [
    {
      "Name": "parameter",
      "ARN": "arn:aws:ssm:${Region}:${Account}:parameter/${FullyQualifiedParameterName}",
      "RegEx": "^arn:aws:ssm:.+",
      "ContextKeys": [
        "ssm:resourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "ssm:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPatchBaseline",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "patchbaseline"
  ],
  "supportedResources": [
    {
      "Name": "patchbaseline",
      "ARN": "arn:aws:ssm:${Region}:${Account}:patchbaseline/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetPatchBaselineForPatchGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "patchbaseline"
  ],
  "supportedResources": [
    {
      "Name": "patchbaseline",
      "ARN": "arn:aws:ssm:${Region}:${Account}:patchbaseline/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAssociationVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCommandInvocations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCommands",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListComplianceItems",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListComplianceSummaries",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDocumentVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDocuments",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListInstanceAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListInventoryEntries",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListResourceComplianceSummaries",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListResourceDataSync",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyDocumentPermission",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "document"
  ],
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "PutComplianceItems",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutConfigurePackageResult",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutInventory",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutParameter",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "parameter"
  ],
  "supportedResources": [
    {
      "Name": "parameter",
      "ARN": "arn:aws:ssm:${Region}:${Account}:parameter/${FullyQualifiedParameterName}",
      "RegEx": "^arn:aws:ssm:.+",
      "ContextKeys": [
        "ssm:resourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "ssm:resourcetag/tag-key"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterDefaultPatchBaseline",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "patchbaseline"
  ],
  "supportedResources": [
    {
      "Name": "patchbaseline",
      "ARN": "arn:aws:ssm:${Region}:${Account}:patchbaseline/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterPatchBaselineForPatchGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "patchbaseline"
  ],
  "supportedResources": [
    {
      "Name": "patchbaseline",
      "ARN": "arn:aws:ssm:${Region}:${Account}:patchbaseline/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterTargetWithMaintenanceWindow",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterTaskWithMaintenanceWindow",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveTagsFromResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ResumeSession",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "session"
  ],
  "supportedResources": [
    {
      "Name": "session",
      "ARN": "arn:aws:ssm:${Region}:${Account}:session/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SendAutomationSignal",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "SendCommand",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "ContextKeys": [
        "ssm:resourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "ssm:resourcetag/tag-key"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartAssociationsOnce",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartAutomationExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartSession",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:ec2:${Region}:${Account}:instance/${InstanceId}",
      "RegEx": "^arn:aws:ec2:.+",
      "ContextKeys": [
        "ssm:resourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "ssm:resourcetag/tag-key"
      ],
      "isRequired": true
    },
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "ContextKeys": [
        "ssm:resourceTag/tag-key"
      ],
      "ContextKeyStrings": [
        "ssm:resourcetag/tag-key"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopAutomationExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TerminateSession",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "session"
  ],
  "supportedResources": [
    {
      "Name": "session",
      "ARN": "arn:aws:ssm:${Region}:${Account}:session/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateAssociation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateAssociationStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateDocument",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDocumentDefaultVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateInstanceAssociationStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateInstanceInformation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "document",
      "ARN": "arn:aws:ssm:${Region}:${Account}:document/${DocumentName}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateMaintenanceWindow",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateMaintenanceWindowTarget",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "windowtarget",
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "windowtarget",
      "ARN": "arn:aws:ssm:${Region}:${Account}:windowtarget/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    },
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateMaintenanceWindowTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "windowtask",
    "maintenancewindow"
  ],
  "supportedResources": [
    {
      "Name": "windowtask",
      "ARN": "arn:aws:ssm:${Region}:${Account}:windowtask/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    },
    {
      "Name": "maintenancewindow",
      "ARN": "arn:aws:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateManagedInstanceRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "managed-instance"
  ],
  "supportedResources": [
    {
      "Name": "managed-instance",
      "ARN": "arn:aws:ssm:${Region}:${Account}:managed-instance/${ManagedInstanceName}",
      "RegEx": "^arn:aws:ssm:.+:",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdatePatchBaseline",
  "evaluated": false,
  "allowed": false,
  "prefix": "ssm",
  "service": "AWS Systems Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "patchbaseline"
  ],
  "supportedResources": [
    {
      "Name": "patchbaseline",
      "ARN": "arn:aws:ssm:${Region}:${Account}:patchbaseline/${ResourceId}",
      "RegEx": "^arn:aws:ssm:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AddTagsToOnPremisesInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:instance:${InstanceName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetApplicationRevisions",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:application:${ApplicationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetApplications",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:application:${ApplicationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetDeploymentGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentgroup"
  ],
  "supportedResources": [
    {
      "Name": "deploymentgroup",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetDeploymentInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentgroup"
  ],
  "supportedResources": [
    {
      "Name": "deploymentgroup",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetDeployments",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentgroup"
  ],
  "supportedResources": [
    {
      "Name": "deploymentgroup",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetOnPremisesInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:instance:${InstanceName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ContinueDeployment",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:application:${ApplicationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDeployment",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentgroup"
  ],
  "supportedResources": [
    {
      "Name": "deploymentgroup",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDeploymentConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentconfig"
  ],
  "supportedResources": [
    {
      "Name": "deploymentconfig",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentconfig:${DeploymentConfigurationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateDeploymentGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentgroup"
  ],
  "supportedResources": [
    {
      "Name": "deploymentgroup",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:application:${ApplicationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDeploymentConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentconfig"
  ],
  "supportedResources": [
    {
      "Name": "deploymentconfig",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentconfig:${DeploymentConfigurationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteDeploymentGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentgroup"
  ],
  "supportedResources": [
    {
      "Name": "deploymentgroup",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeregisterOnPremisesInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:instance:${InstanceName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:application:${ApplicationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetApplicationRevision",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:application:${ApplicationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDeployment",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentgroup"
  ],
  "supportedResources": [
    {
      "Name": "deploymentgroup",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDeploymentConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentconfig"
  ],
  "supportedResources": [
    {
      "Name": "deploymentconfig",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentconfig:${DeploymentConfigurationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDeploymentGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentgroup"
  ],
  "supportedResources": [
    {
      "Name": "deploymentgroup",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDeploymentInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentgroup"
  ],
  "supportedResources": [
    {
      "Name": "deploymentgroup",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetOnPremisesInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:instance:${InstanceName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListApplicationRevisions",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:application:${ApplicationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListApplications",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDeploymentConfigs",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDeploymentGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:application:${ApplicationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDeploymentInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentgroup"
  ],
  "supportedResources": [
    {
      "Name": "deploymentgroup",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDeployments",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentgroup"
  ],
  "supportedResources": [
    {
      "Name": "deploymentgroup",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListOnPremisesInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutLifecycleEventHookExecutionStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RegisterApplicationRevision",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:application:${ApplicationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RegisterOnPremisesInstance",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:instance:${InstanceName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveTagsFromOnPremisesInstances",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "instance"
  ],
  "supportedResources": [
    {
      "Name": "instance",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:instance:${InstanceName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopDeployment",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateApplication",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "application"
  ],
  "supportedResources": [
    {
      "Name": "application",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:application:${ApplicationName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateDeploymentGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "codedeploy",
  "service": "AWS CodeDeploy",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "deploymentgroup"
  ],
  "supportedResources": [
    {
      "Name": "deploymentgroup",
      "ARN": "arn:aws:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}",
      "RegEx": "^arn:aws:codedeploy:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AcceptHandshake",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "handshake"
  ],
  "supportedResources": [
    {
      "Name": "handshake",
      "ARN": "arn:aws:organizations::${MasterAccountId}:handshake/o-${OrganizationId}/${HandshakeType}/h-${HandshakeId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AttachPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:organizations::${MasterAccountId}:policy/o-${OrganizationId}/${PolicyType}/p-${PolicyId}",
      "RegEx": "^(arn:aws:organizations:.+",
      "isRequired": true
    },
    {
      "Name": "organizationalunit",
      "ARN": "arn:aws:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    },
    {
      "Name": "root",
      "ARN": "arn:aws:organizations::${MasterAccountId}:root/o-${OrganizationId}/r-${RootId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    },
    {
      "Name": "account",
      "ARN": "arn:aws:organizations::${MasterAccountId}:account/o-${OrganizationId}/${AccountId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelHandshake",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "handshake"
  ],
  "supportedResources": [
    {
      "Name": "handshake",
      "ARN": "arn:aws:organizations::${MasterAccountId}:handshake/o-${OrganizationId}/${HandshakeType}/h-${HandshakeId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateOrganization",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateOrganizationalUnit",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "organizationalunit",
      "ARN": "arn:aws:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    },
    {
      "Name": "root",
      "ARN": "arn:aws:organizations::${MasterAccountId}:root/o-${OrganizationId}/r-${RootId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreatePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeclineHandshake",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "handshake"
  ],
  "supportedResources": [
    {
      "Name": "handshake",
      "ARN": "arn:aws:organizations::${MasterAccountId}:handshake/o-${OrganizationId}/${HandshakeType}/h-${HandshakeId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteOrganization",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteOrganizationalUnit",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "organizationalunit"
  ],
  "supportedResources": [
    {
      "Name": "organizationalunit",
      "ARN": "arn:aws:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeletePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:organizations::${MasterAccountId}:policy/o-${OrganizationId}/${PolicyType}/p-${PolicyId}",
      "RegEx": "^(arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "account"
  ],
  "supportedResources": [
    {
      "Name": "account",
      "ARN": "arn:aws:organizations::${MasterAccountId}:account/o-${OrganizationId}/${AccountId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeCreateAccountStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeHandshake",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "handshake"
  ],
  "supportedResources": [
    {
      "Name": "handshake",
      "ARN": "arn:aws:organizations::${MasterAccountId}:handshake/o-${OrganizationId}/${HandshakeType}/h-${HandshakeId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeOrganization",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeOrganizationalUnit",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "organizationalunit"
  ],
  "supportedResources": [
    {
      "Name": "organizationalunit",
      "ARN": "arn:aws:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:organizations::${MasterAccountId}:policy/o-${OrganizationId}/${PolicyType}/p-${PolicyId}",
      "RegEx": "^(arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DetachPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:organizations::${MasterAccountId}:policy/o-${OrganizationId}/${PolicyType}/p-${PolicyId}",
      "RegEx": "^(arn:aws:organizations:.+",
      "isRequired": true
    },
    {
      "Name": "organizationalunit",
      "ARN": "arn:aws:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    },
    {
      "Name": "root",
      "ARN": "arn:aws:organizations::${MasterAccountId}:root/o-${OrganizationId}/r-${RootId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    },
    {
      "Name": "account",
      "ARN": "arn:aws:organizations::${MasterAccountId}:account/o-${OrganizationId}/${AccountId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisableAWSServiceAccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisablePolicyType",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "root"
  ],
  "supportedResources": [
    {
      "Name": "root",
      "ARN": "arn:aws:organizations::${MasterAccountId}:root/o-${OrganizationId}/r-${RootId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableAWSServiceAccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnableAllFeatures",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "EnablePolicyType",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "root"
  ],
  "supportedResources": [
    {
      "Name": "root",
      "ARN": "arn:aws:organizations::${MasterAccountId}:root/o-${OrganizationId}/r-${RootId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "InviteAccountToOrganization",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "account",
      "ARN": "arn:aws:organizations::${MasterAccountId}:account/o-${OrganizationId}/${AccountId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "LeaveOrganization",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAWSServiceAccessForOrganization",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAccounts",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListAccountsForParent",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "organizationalunit",
      "ARN": "arn:aws:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    },
    {
      "Name": "root",
      "ARN": "arn:aws:organizations::${MasterAccountId}:root/o-${OrganizationId}/r-${RootId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListChildren",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "organizationalunit",
      "ARN": "arn:aws:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    },
    {
      "Name": "root",
      "ARN": "arn:aws:organizations::${MasterAccountId}:root/o-${OrganizationId}/r-${RootId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListCreateAccountStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListHandshakesForAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListHandshakesForOrganization",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListOrganizationalUnitsForParent",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "organizationalunit",
      "ARN": "arn:aws:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    },
    {
      "Name": "root",
      "ARN": "arn:aws:organizations::${MasterAccountId}:root/o-${OrganizationId}/r-${RootId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListParents",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "organizationalunit",
      "ARN": "arn:aws:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    },
    {
      "Name": "account",
      "ARN": "arn:aws:organizations::${MasterAccountId}:account/o-${OrganizationId}/${AccountId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListPolicies",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPoliciesForTarget",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "organizationalunit",
      "ARN": "arn:aws:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    },
    {
      "Name": "root",
      "ARN": "arn:aws:organizations::${MasterAccountId}:root/o-${OrganizationId}/r-${RootId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    },
    {
      "Name": "account",
      "ARN": "arn:aws:organizations::${MasterAccountId}:account/o-${OrganizationId}/${AccountId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListRoots",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTargetsForPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:organizations::${MasterAccountId}:policy/o-${OrganizationId}/${PolicyType}/p-${PolicyId}",
      "RegEx": "^(arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "MoveAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "account"
  ],
  "supportedResources": [
    {
      "Name": "account",
      "ARN": "arn:aws:organizations::${MasterAccountId}:account/o-${OrganizationId}/${AccountId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": true
    },
    {
      "Name": "organizationalunit",
      "ARN": "arn:aws:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    },
    {
      "Name": "root",
      "ARN": "arn:aws:organizations::${MasterAccountId}:root/o-${OrganizationId}/r-${RootId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RemoveAccountFromOrganization",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "account"
  ],
  "supportedResources": [
    {
      "Name": "account",
      "ARN": "arn:aws:organizations::${MasterAccountId}:account/o-${OrganizationId}/${AccountId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateOrganizationalUnit",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "organizationalunit"
  ],
  "supportedResources": [
    {
      "Name": "organizationalunit",
      "ARN": "arn:aws:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}",
      "RegEx": "^arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdatePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "organizations",
  "service": "AWS Organizations",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "policy"
  ],
  "supportedResources": [
    {
      "Name": "policy",
      "ARN": "arn:aws:organizations::${MasterAccountId}:policy/o-${OrganizationId}/${PolicyType}/p-${PolicyId}",
      "RegEx": "^(arn:aws:organizations:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AcceptReservedNodeExchange",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AuthorizeClusterSecurityGroupIngress",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "securitygroup",
    "securitygroupingress-ec2securitygroup"
  ],
  "supportedResources": [
    {
      "Name": "securitygroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:securitygroup:${SecurityGroupName}/ec2securitygroup/${Owner}/${Ec2SecurityGroupId}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    },
    {
      "Name": "securitygroupingress-ec2securitygroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:securitygroupingress:${SecurityGroupName}/ec2securitygroup/${Owner}/${Ece2SecuritygroupId}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AuthorizeSnapshotAccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:redshift:${Region}:${Account}:snapshot:${ClusterName}/${SnapshotName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchDeleteClusterSnapshots",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchModifyClusterSnapshots",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelQuerySession",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelResize",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CopyClusterSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:redshift:${Region}:${Account}:snapshot:${ClusterName}/${SnapshotName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateClusterParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "parametergroup"
  ],
  "supportedResources": [
    {
      "Name": "parametergroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:parametergroup:${ParameterGroupName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateClusterSecurityGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "securitygroup"
  ],
  "supportedResources": [
    {
      "Name": "securitygroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:securitygroup:${SecurityGroupName}/ec2securitygroup/${Owner}/${Ec2SecurityGroupId}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateClusterSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:redshift:${Region}:${Account}:snapshot:${ClusterName}/${SnapshotName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateClusterSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "subnetgroup"
  ],
  "supportedResources": [
    {
      "Name": "subnetgroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:subnetgroup:${SubnetGroupName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateClusterUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dbuser"
  ],
  "supportedResources": [
    {
      "Name": "dbuser",
      "ARN": "arn:aws:redshift:${Region}:${Account}:dbuser:${ClusterName}/${DbUser}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "redshift:DbUser",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/redshift/latest/mgmt/mgmt/redshift-iam-access-control-overview.html#redshift-policy-resources.conditions",
      "Description": "Control access based on the database user name."
    }
  ]
}
{
  "name": "CreateEventSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "eventsubscription"
  ],
  "supportedResources": [
    {
      "Name": "eventsubscription",
      "ARN": "arn:aws:redshift:${Region}:${Account}:eventsubscription:${EventSubscriptionName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateHsmClientCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hsmclientcertificate"
  ],
  "supportedResources": [
    {
      "Name": "hsmclientcertificate",
      "ARN": "arn:aws:redshift:${Region}:${Account}:hsmclientcertificate:${HSMClientCertificateId}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateHsmConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hsmconfiguration"
  ],
  "supportedResources": [
    {
      "Name": "hsmconfiguration",
      "ARN": "arn:aws:redshift:${Region}:${Account}:hsmconfiguration:${HSMConfigurationId}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSavedQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSnapshotCopyGrant",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshotcopygrant"
  ],
  "supportedResources": [
    {
      "Name": "snapshotcopygrant",
      "ARN": "arn:aws:redshift:${Region}:${Account}:snapshotcopygrant:${SnapshotCopyGrantName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateSnapshotSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteClusterParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "parametergroup"
  ],
  "supportedResources": [
    {
      "Name": "parametergroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:parametergroup:${ParameterGroupName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteClusterSecurityGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "securitygroup"
  ],
  "supportedResources": [
    {
      "Name": "securitygroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:securitygroup:${SecurityGroupName}/ec2securitygroup/${Owner}/${Ec2SecurityGroupId}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteClusterSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:redshift:${Region}:${Account}:snapshot:${ClusterName}/${SnapshotName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteClusterSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "subnetgroup"
  ],
  "supportedResources": [
    {
      "Name": "subnetgroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:subnetgroup:${SubnetGroupName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteEventSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "eventsubscription"
  ],
  "supportedResources": [
    {
      "Name": "eventsubscription",
      "ARN": "arn:aws:redshift:${Region}:${Account}:eventsubscription:${EventSubscriptionName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteHsmClientCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hsmclientcertificate"
  ],
  "supportedResources": [
    {
      "Name": "hsmclientcertificate",
      "ARN": "arn:aws:redshift:${Region}:${Account}:hsmclientcertificate:${HSMClientCertificateId}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteHsmConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "hsmconfiguration"
  ],
  "supportedResources": [
    {
      "Name": "hsmconfiguration",
      "ARN": "arn:aws:redshift:${Region}:${Account}:hsmconfiguration:${HSMConfigurationId}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSavedQueries",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteSnapshotCopyGrant",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshotcopygrant"
  ],
  "supportedResources": [
    {
      "Name": "snapshotcopygrant",
      "ARN": "arn:aws:redshift:${Region}:${Account}:snapshotcopygrant:${SnapshotCopyGrantName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteSnapshotSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeAccountAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClusterDbRevisions",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClusterParameterGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClusterParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "parametergroup"
  ],
  "supportedResources": [
    {
      "Name": "parametergroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:parametergroup:${ParameterGroupName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeClusterSecurityGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClusterSnapshots",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClusterSubnetGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClusterTracks",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClusterVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeClusters",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeDefaultClusterParameters",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEventCategories",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEventSubscriptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeHsmClientCertificates",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeHsmConfigurations",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeLoggingStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeOrderableClusterOptions",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservedNodeOfferings",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeReservedNodes",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeResize",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeSnapshotCopyGrants",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeSnapshotSchedules",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeStorage",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTableRestoreStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeTags",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisableLogging",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisableSnapshotCopy",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableLogging",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableSnapshotCopy",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ExecuteQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "FetchResults",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetClusterCredentials",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dbuser"
  ],
  "supportedResources": [
    {
      "Name": "dbuser",
      "ARN": "arn:aws:redshift:${Region}:${Account}:dbuser:${ClusterName}/${DbUser}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    },
    {
      "Name": "dbname",
      "ARN": "arn:aws:redshift:${Region}:${Account}:dbname:${ClusterName}/${DbName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": false
    },
    {
      "Name": "dbgroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:dbgroup:${ClusterName}/${DbGroup}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "redshift:DbUser",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/redshift/latest/mgmt/mgmt/redshift-iam-access-control-overview.html#redshift-policy-resources.conditions",
      "Description": "Control access based on the database user name."
    },
    {
      "Name": "redshift:DurationSeconds",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/redshift/latest/mgmt/mgmt/redshift-iam-access-control-overview.html#redshift-policy-resources.conditions",
      "Description": "Control access based on the number of seconds until a temporary credential set expires."
    },
    {
      "Name": "redshift:DbName",
      "Type": "String",
      "DocPageRel": "https://docs.aws.amazon.com/redshift/latest/mgmt/mgmt/redshift-iam-access-control-overview.html#redshift-policy-resources.conditions",
      "Description": "Control access based on the database name."
    }
  ]
}
{
  "name": "GetReservedNodeExchangeOfferings",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "JoinGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "dbgroup"
  ],
  "supportedResources": [
    {
      "Name": "dbgroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:dbgroup:${ClusterName}/${DbGroup}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDatabases",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSavedQueries",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSchemas",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTables",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyClusterDbRevision",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyClusterIamRoles",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyClusterMaintenance",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyClusterParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "parametergroup"
  ],
  "supportedResources": [
    {
      "Name": "parametergroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:parametergroup:${ParameterGroupName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyClusterSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyClusterSnapshotSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifyClusterSubnetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "subnetgroup"
  ],
  "supportedResources": [
    {
      "Name": "subnetgroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:subnetgroup:${SubnetGroupName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifyEventSubscription",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "eventsubscription"
  ],
  "supportedResources": [
    {
      "Name": "eventsubscription",
      "ARN": "arn:aws:redshift:${Region}:${Account}:eventsubscription:${EventSubscriptionName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifySavedQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ModifySnapshotCopyRetentionPeriod",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ModifySnapshotSchedule",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PurchaseReservedNodeOffering",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RebootCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ResetClusterParameterGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "parametergroup"
  ],
  "supportedResources": [
    {
      "Name": "parametergroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:parametergroup:${ParameterGroupName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ResizeCluster",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RestoreFromClusterSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:redshift:${Region}:${Account}:snapshot:${ClusterName}/${SnapshotName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RestoreTableFromClusterSnapshot",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster",
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    },
    {
      "Name": "snapshot",
      "ARN": "arn:aws:redshift:${Region}:${Account}:snapshot:${ClusterName}/${SnapshotName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RevokeClusterSecurityGroupIngress",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "securitygroup",
    "securitygroupingress-ec2securitygroup"
  ],
  "supportedResources": [
    {
      "Name": "securitygroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:securitygroup:${SecurityGroupName}/ec2securitygroup/${Owner}/${Ec2SecurityGroupId}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    },
    {
      "Name": "securitygroupingress-ec2securitygroup",
      "ARN": "arn:aws:redshift:${Region}:${Account}:securitygroupingress:${SecurityGroupName}/ec2securitygroup/${Owner}/${Ece2SecuritygroupId}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RevokeSnapshotAccess",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "snapshot"
  ],
  "supportedResources": [
    {
      "Name": "snapshot",
      "ARN": "arn:aws:redshift:${Region}:${Account}:snapshot:${ClusterName}/${SnapshotName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RotateEncryptionKey",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "cluster"
  ],
  "supportedResources": [
    {
      "Name": "cluster",
      "ARN": "arn:aws:redshift:${Region}:${Account}:cluster:${ClusterName}",
      "RegEx": "^arn:aws:redshift:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ViewQueriesFromConsole",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ViewQueriesInConsole",
  "evaluated": false,
  "allowed": false,
  "prefix": "redshift",
  "service": "Amazon Redshift",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateRoleToGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateServiceRoleToAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCoreDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateCoreDefinitionVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDeployment",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDeviceDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateDeviceDefinitionVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateFunctionDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateFunctionDefinitionVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateGroupCertificateAuthority",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateGroupVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLoggerDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLoggerDefinitionVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateResourceDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateResourceDefinitionVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSoftwareUpdateJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSubscriptionDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateSubscriptionDefinitionVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCoreDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteDeviceDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteFunctionDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteLoggerDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteResourceDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteSubscriptionDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateRoleFromGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateServiceRoleFromAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetAssociatedRole",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetConnectivityInfo",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCoreDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCoreDefinitionVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDeploymentStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDeviceDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetDeviceDefinitionVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetFunctionDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetFunctionDefinitionVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGroupCertificateAuthority",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGroupCertificateConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetGroupVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetLoggerDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetLoggerDefinitionVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetResourceDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetResourceDefinitionVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetServiceRoleForAccount",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSubscriptionDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetSubscriptionDefinitionVersion",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCoreDefinitionVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListCoreDefinitions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDeployments",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDeviceDefinitionVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListDeviceDefinitions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListFunctionDefinitionVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListFunctionDefinitions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGroupCertificateAuthorities",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGroupVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLoggerDefinitionVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLoggerDefinitions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListResourceDefinitionVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListResourceDefinitions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSubscriptionDefinitionVersions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListSubscriptionDefinitions",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ResetDeployments",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateConnectivityInfo",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateCoreDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateDeviceDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateFunctionDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateGroupCertificateConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateLoggerDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateResourceDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateSubscriptionDefinition",
  "evaluated": false,
  "allowed": false,
  "prefix": "greengrass",
  "service": "AWS Greengrass",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AssociateProductsWithPrivateMarketplace",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Private Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePrivateMarketplace",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Private Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreatePrivateMarketplaceProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Private Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePrivateMarketplaceProducts",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Private Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePrivateMarketplaceProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Private Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribePrivateMarketplaceStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Private Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DisassociateProductsFromPrivateMarketplace",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Private Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListPrivateMarketplaceProducts",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Private Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartPrivateMarketplace",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Private Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopPrivateMarketplace",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Private Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdatePrivateMarketplaceProfile",
  "evaluated": false,
  "allowed": false,
  "prefix": "aws-marketplace",
  "service": "AWS Private Marketplace",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetFinancialReports",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobileanalytics",
  "service": "Amazon Mobile Analytics",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetReports",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobileanalytics",
  "service": "Amazon Mobile Analytics",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "mobileanalytics",
  "service": "Amazon Mobile Analytics",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateAccelerator",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateEndpointGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener"
  ],
  "supportedResources": [
    {
      "Name": "listener",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}/listener/${ListenerId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+/listener/[0-9a-fA-F]{8}$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateListener",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "accelerator"
  ],
  "supportedResources": [
    {
      "Name": "accelerator",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteAccelerator",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "accelerator"
  ],
  "supportedResources": [
    {
      "Name": "accelerator",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteEndpointGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpointgroup"
  ],
  "supportedResources": [
    {
      "Name": "endpointgroup",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}/listener/${ListenerId}/endpoint-group/${EndpointGroupId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+/listener/[0-9a-fA-F]{8}/endpoint-group/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteListener",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener"
  ],
  "supportedResources": [
    {
      "Name": "listener",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}/listener/${ListenerId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+/listener/[0-9a-fA-F]{8}$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAccelerator",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "accelerator"
  ],
  "supportedResources": [
    {
      "Name": "accelerator",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAcceleratorAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "accelerator"
  ],
  "supportedResources": [
    {
      "Name": "accelerator",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeEndpointGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpointgroup"
  ],
  "supportedResources": [
    {
      "Name": "endpointgroup",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}/listener/${ListenerId}/endpoint-group/${EndpointGroupId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+/listener/[0-9a-fA-F]{8}/endpoint-group/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeListener",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener"
  ],
  "supportedResources": [
    {
      "Name": "listener",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}/listener/${ListenerId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+/listener/[0-9a-fA-F]{8}$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAccelerators",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "noResourceARN": "",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListEndpointGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener"
  ],
  "supportedResources": [
    {
      "Name": "listener",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}/listener/${ListenerId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+/listener/[0-9a-fA-F]{8}$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListListeners",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "accelerator"
  ],
  "supportedResources": [
    {
      "Name": "accelerator",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateAccelerator",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "accelerator"
  ],
  "supportedResources": [
    {
      "Name": "accelerator",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateAcceleratorAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "accelerator"
  ],
  "supportedResources": [
    {
      "Name": "accelerator",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateEndpointGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "endpointgroup"
  ],
  "supportedResources": [
    {
      "Name": "endpointgroup",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}/listener/${ListenerId}/endpoint-group/${EndpointGroupId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+/listener/[0-9a-fA-F]{8}/endpoint-group/.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateListener",
  "evaluated": false,
  "allowed": false,
  "prefix": "globalaccelerator",
  "service": "Global Accelerator",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "listener"
  ],
  "supportedResources": [
    {
      "Name": "listener",
      "ARN": "arn:aws:globalaccelerator::${Account}:accelerator/${AcceleratorId}/listener/${ListenerId}",
      "RegEx": "^arn:aws:globalaccelerator::[0-9]+:accelerator/[0-9a-f-]+/listener/[0-9a-fA-F]{8}$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CancelTaskExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "taskexecution"
  ],
  "supportedResources": [
    {
      "Name": "taskexecution",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:task/${TaskId}/execution/${ExecutionId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:task/task-[0-9a-z]{17}/execution/exec-[0-9a-z]{17}$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateAgent",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLocationEfs",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLocationNfs",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateLocationS3",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteAgent",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "agent"
  ],
  "supportedResources": [
    {
      "Name": "agent",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:agent/${AgentId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:agent/agent-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "DeleteLocation",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "location"
  ],
  "supportedResources": [
    {
      "Name": "location",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:location/${LocationId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:location/loc-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "DeleteTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "task"
  ],
  "supportedResources": [
    {
      "Name": "task",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:task/${TaskId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:task/task-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeAgent",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "agent"
  ],
  "supportedResources": [
    {
      "Name": "agent",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:agent/${AgentId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:agent/agent-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "DescribeLocationEfs",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "location"
  ],
  "supportedResources": [
    {
      "Name": "location",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:location/${LocationId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:location/loc-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "DescribeLocationNfs",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "location"
  ],
  "supportedResources": [
    {
      "Name": "location",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:location/${LocationId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:location/loc-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "DescribeLocationS3",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "location"
  ],
  "supportedResources": [
    {
      "Name": "location",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:location/${LocationId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:location/loc-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "DescribeTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "task"
  ],
  "supportedResources": [
    {
      "Name": "task",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:task/${TaskId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:task/task-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "DescribeTaskExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "taskexecution"
  ],
  "supportedResources": [
    {
      "Name": "taskexecution",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:task/${TaskId}/execution/${ExecutionId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:task/task-[0-9a-z]{17}/execution/exec-[0-9a-z]{17}$",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListAgents",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListLocations",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "agent",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:agent/${AgentId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:agent/agent-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "task",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:task/${TaskId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:task/task-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "location",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:location/${LocationId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:location/loc-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "ListTaskExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTasks",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartTaskExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "task"
  ],
  "supportedResources": [
    {
      "Name": "task",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:task/${TaskId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:task/task-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "agent",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:agent/${AgentId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:agent/agent-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "task",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:task/${TaskId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:task/task-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "location",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:location/${LocationId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:location/loc-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "Filters create requests based on the presence of mandatory tags in the request."
    },
    {
      "Name": "aws:RequestTag/${TagKey}",
      "Type": "String",
      "Description": "Filters create requests based on the allowed set of values for each of the tags."
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "agent",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:agent/${AgentId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:agent/agent-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "task",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:task/${TaskId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:task/task-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    },
    {
      "Name": "location",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:location/${LocationId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:location/loc-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:TagKeys",
      "Type": "String",
      "Description": "Filters create requests based on the presence of mandatory tags in the request."
    }
  ]
}
{
  "name": "UpdateAgent",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "agent"
  ],
  "supportedResources": [
    {
      "Name": "agent",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:agent/${AgentId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:agent/agent-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "UpdateTask",
  "evaluated": false,
  "allowed": false,
  "prefix": "datasync",
  "service": "DataSync",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "task"
  ],
  "supportedResources": [
    {
      "Name": "task",
      "ARN": "arn:aws:datasync:${Region}:${AccountId}:task/${TaskId}",
      "RegEx": "^arn:aws:datasync:[a-z0-9\\-]+:[0-9]{12}:task/task-[0-9a-z]{17}$",
      "ContextKeys": [
        "aws:ResourceTag/${TagKey}"
      ],
      "ContextKeyStrings": [
        "aws:resourcetag/${tagkey}"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": [
    {
      "Name": "aws:ResourceTag/${TagKey}",
      "Type": "String",
      "Description": "Filters actions based on tag-value associated with the resource."
    }
  ]
}
{
  "name": "AddCustomAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminAddUserToGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminConfirmSignUp",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminCreateUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminDeleteUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminDeleteUserAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminDisableProviderForUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminDisableUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminEnableUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminForgetDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminGetDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminGetUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminInitiateAuth",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminLinkProviderForUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminListDevices",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminListGroupsForUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminListUserAuthEvents",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminRemoveUserFromGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminResetUserPassword",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminRespondToAuthChallenge",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminSetUserMFAPreference",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminSetUserSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminUpdateAuthEventFeedback",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminUpdateDeviceStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminUpdateUserAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AdminUserGlobalSignOut",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateSoftwareToken",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ChangePassword",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ConfirmDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ConfirmForgotPassword",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ConfirmSignUp",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateIdentityProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateResourceServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateUserImportJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateUserPool",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateUserPoolClient",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateUserPoolDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteIdentityProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteResourceServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUserAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUserPool",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUserPoolClient",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteUserPoolDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeIdentityProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeResourceServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeRiskConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeUserImportJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeUserPool",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeUserPoolClient",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DescribeUserPoolDomain",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ForgetDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ForgotPassword",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetCSVHeader",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetDevice",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetIdentityProviderByIdentifier",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetSigningCertificate",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetUICustomization",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetUser",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetUserAttributeVerificationCode",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetUserPoolMfaConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GlobalSignOut",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "InitiateAuth",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListDevices",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListIdentityProviders",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListResourceServers",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListUserImportJobs",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListUserPoolClients",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListUserPools",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListUsers",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListUsersInGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ResendConfirmationCode",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RespondToAuthChallenge",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetRiskConfiguration",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetUICustomization",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetUserMFAPreference",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetUserPoolMfaConfig",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SetUserSettings",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "SignUp",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StartUserImportJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "StopUserImportJob",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateAuthEventFeedback",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateDeviceStatus",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateIdentityProvider",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateResourceServer",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateUserAttributes",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateUserPool",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateUserPoolClient",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "VerifySoftwareToken",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "VerifyUserAttribute",
  "evaluated": false,
  "allowed": false,
  "prefix": "cognito-idp",
  "service": "Amazon Cognito User Pools",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "userpool"
  ],
  "supportedResources": [
    {
      "Name": "userpool",
      "ARN": "arn:aws:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}",
      "RegEx": "^arn:aws:cognito-idp:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "BatchGetNamedQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "BatchGetQueryExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CancelQueryExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateNamedQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateWorkGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteNamedQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteWorkGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCatalogs",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetExecutionEngine",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetExecutionEngines",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetNamedQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetNamespace",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetNamespaces",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetQueryExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetQueryExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetQueryResults",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetQueryResultsStream",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTable",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetTables",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetWorkGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListNamedQueries",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListQueryExecutions",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListTagsForResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListWorkGroups",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "RunQuery",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartQueryExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopQueryExecution",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "UpdateWorkGroup",
  "evaluated": false,
  "allowed": false,
  "prefix": "athena",
  "service": "Amazon Athena",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "CreateContainer",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteContainer",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteContainerPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteCorsPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteLifecyclePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DeleteObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeContainer",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "DescribeObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetContainerPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetCorsPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetLifecyclePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListContainers",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "ListItems",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutContainerPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutCorsPolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutLifecyclePolicy",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "PutObject",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "noResourceARN": "*",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StartAccessLogging",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "StopAccessLogging",
  "evaluated": false,
  "allowed": false,
  "prefix": "mediastore",
  "service": "AWS Elemental MediaStore",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "AcceptResourceShareInvitation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resource-share-invitation"
  ],
  "supportedResources": [
    {
      "Name": "resource-share-invitation",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share-invitation/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "ContextKeys": [
        "ram:ShareOwnerAccountIds"
      ],
      "ContextKeyStrings": [
        "ram:shareowneraccountids"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "AssociateResourceShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resource-share"
  ],
  "supportedResources": [
    {
      "Name": "resource-share",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "ContextKeys": [
        "ram:AllowsExternalPrincipals"
      ],
      "ContextKeyStrings": [
        "ram:allowsexternalprincipals"
      ],
      "isRequired": true
    },
    {
      "Name": "resource",
      "ARN": "arn:aws:${Service}:${Region}:#{Account}:${ResourceType}/${ResourcePath}",
      "RegEx": "^arn:aws:.+",
      "ContextKeys": [
        "ram:ResourceType",
        "ram:ResourceArns",
        "ram:ResourceShareNames"
      ],
      "ContextKeyStrings": [
        "ram:resourcearns",
        "ram:resourcesharenames",
        "ram:resourcetype"
      ],
      "isRequired": false
    },
    {
      "Name": "principal",
      "ARN": "arn:aws:iam::${Account}:user/${User}",
      "RegEx": "^arn:aws:iam::.+",
      "ContextKeys": [
        "ram:Principals"
      ],
      "ContextKeyStrings": [
        "ram:principals"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "CreateResourceShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "principal",
      "ARN": "arn:aws:iam::${Account}:user/${User}",
      "RegEx": "^arn:aws:iam::.+",
      "ContextKeys": [
        "ram:Principals"
      ],
      "ContextKeyStrings": [
        "ram:principals"
      ],
      "isRequired": false
    },
    {
      "Name": "resource-share",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "ContextKeys": [
        "ram:ResourceType",
        "ram:ResourceArns"
      ],
      "ContextKeyStrings": [
        "ram:resourcearns",
        "ram:resourcetype"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DeleteResourceShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resource-share"
  ],
  "supportedResources": [
    {
      "Name": "resource-share",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "ContextKeys": [
        "ram:AllowsExternalPrincipals"
      ],
      "ContextKeyStrings": [
        "ram:allowsexternalprincipals"
      ],
      "isRequired": true
    },
    {
      "Name": "resource",
      "ARN": "arn:aws:${Service}:${Region}:#{Account}:${ResourceType}/${ResourcePath}",
      "RegEx": "^arn:aws:.+",
      "ContextKeys": [
        "ram:ResourceType",
        "ram:ResourceArns",
        "ram:ResourceShareNames"
      ],
      "ContextKeyStrings": [
        "ram:resourcearns",
        "ram:resourcesharenames",
        "ram:resourcetype"
      ],
      "isRequired": false
    },
    {
      "Name": "principal",
      "ARN": "arn:aws:iam::${Account}:user/${User}",
      "RegEx": "^arn:aws:iam::.+",
      "ContextKeys": [
        "ram:Principals"
      ],
      "ContextKeyStrings": [
        "ram:principals"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "DisassociateResourceShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resource-share"
  ],
  "supportedResources": [
    {
      "Name": "resource-share",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "ContextKeys": [
        "ram:AllowsExternalPrincipals"
      ],
      "ContextKeyStrings": [
        "ram:allowsexternalprincipals"
      ],
      "isRequired": true
    },
    {
      "Name": "resource",
      "ARN": "arn:aws:${Service}:${Region}:#{Account}:${ResourceType}/${ResourcePath}",
      "RegEx": "^arn:aws:.+",
      "ContextKeys": [
        "ram:ResourceType",
        "ram:ResourceArns",
        "ram:ResourceShareNames"
      ],
      "ContextKeyStrings": [
        "ram:resourcearns",
        "ram:resourcesharenames",
        "ram:resourcetype"
      ],
      "isRequired": false
    },
    {
      "Name": "principal",
      "ARN": "arn:aws:iam::${Account}:user/${User}",
      "RegEx": "^arn:aws:iam::.+",
      "ContextKeys": [
        "ram:Principals"
      ],
      "ContextKeyStrings": [
        "ram:principals"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "EnableSharingWithAwsOrganization",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": false,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "ARN",
      "ARN": "*",
      "ContextKeys": [],
      "ContextKeyStrings": [],
      "isRequired": true,
      "ContextKeysRef": []
    }
  ]
}
{
  "name": "GetResourceShareAssociations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "resource-share",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "ContextKeys": [
        "ram:ResourceShareNames"
      ],
      "ContextKeyStrings": [
        "ram:resourcesharenames"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetResourceShareInvitations",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "resource-share",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "isRequired": false
    },
    {
      "Name": "resource-share-invitation",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share-invitation/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "ContextKeys": [
        "ram:ShareOwnerAccountIds"
      ],
      "ContextKeyStrings": [
        "ram:shareowneraccountids"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "GetResourceShares",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "supportedResources": [
    {
      "Name": "resource-share",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "ContextKeys": [
        "ram:ResourceShareNames"
      ],
      "ContextKeyStrings": [
        "ram:resourcesharenames"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListPrincipals",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resource"
  ],
  "supportedResources": [
    {
      "Name": "resource",
      "ARN": "arn:aws:${Service}:${Region}:#{Account}:${ResourceType}/${ResourcePath}",
      "RegEx": "^arn:aws:.+",
      "isRequired": true
    },
    {
      "Name": "principal",
      "ARN": "arn:aws:iam::${Account}:user/${User}",
      "RegEx": "^arn:aws:iam::.+",
      "ContextKeys": [
        "ram:Principals"
      ],
      "ContextKeyStrings": [
        "ram:principals"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "ListResources",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "principal"
  ],
  "supportedResources": [
    {
      "Name": "principal",
      "ARN": "arn:aws:iam::${Account}:user/${User}",
      "RegEx": "^arn:aws:iam::.+",
      "isRequired": true
    },
    {
      "Name": "resource",
      "ARN": "arn:aws:${Service}:${Region}:#{Account}:${ResourceType}/${ResourcePath}",
      "RegEx": "^arn:aws:.+",
      "ContextKeys": [
        "ram:ResourceArns"
      ],
      "ContextKeyStrings": [
        "ram:resourcearns"
      ],
      "isRequired": false
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "RejectResourceShareInvitation",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resource-share-invitation"
  ],
  "supportedResources": [
    {
      "Name": "resource-share-invitation",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share-invitation/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "ContextKeys": [
        "ram:ShareOwnerAccountIds"
      ],
      "ContextKeyStrings": [
        "ram:shareowneraccountids"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "TagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resource-share"
  ],
  "supportedResources": [
    {
      "Name": "resource-share",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UntagResource",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resource-share"
  ],
  "supportedResources": [
    {
      "Name": "resource-share",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
{
  "name": "UpdateResourceShare",
  "evaluated": false,
  "allowed": false,
  "prefix": "ram",
  "service": "AWS Resource Access Manager",
  "serviceAware": true,
  "resourceEnabled": true,
  "deniedByOrganization": false,
  "requiredResourceNames": [
    "resource-share"
  ],
  "supportedResources": [
    {
      "Name": "resource-share",
      "ARN": "arn:aws:ram:${Region}:${Account}:resource-share/${ResourcePath}",
      "RegEx": "^arn:aws:ram:.+",
      "ContextKeys": [
        "ram:AllowsExternalPrincipals",
        "ram:ResourceShareNames"
      ],
      "ContextKeyStrings": [
        "ram:resourcesharenames",
        "ram:allowsexternalprincipals"
      ],
      "isRequired": true
    }
  ],
  "scenarios": [],
  "contextKeys": []
}
